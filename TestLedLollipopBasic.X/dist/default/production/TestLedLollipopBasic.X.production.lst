

Microchip Technology PIC18 PRO Macro Assembler V1.42 build -159332390 
                                                                                               Mon Aug 21 10:15:08 2017

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	18LF25K22
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec,minocg
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec,minocg
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1,minocg
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec,minocg
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec,minocg
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1,minocg
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,minocg
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,minocg
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,minocg
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,minocg
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,minocg
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,minocg
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,minocg
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,minocg
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,minocg
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,minocg
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,minocg
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,minocg
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,minocg
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,minocg
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,minocg
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,minocg
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,minocg
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,minocg
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,minocg
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,minocg
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,minocg
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,minocg
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1,minocg
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1,minocg
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1,minocg
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1,minocg
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,minocg
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,minocg
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,minocg
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1,minocg
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1,minocg
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1,minocg
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1,minocg
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1,minocg
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1,minocg
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1,minocg
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1,minocg
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1,minocg
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1,minocg
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1,minocg
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1,minocg
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1,minocg
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1,minocg
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1,minocg
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1,minocg
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1,minocg
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1,minocg
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1,minocg
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1,minocg
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1,minocg
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1,minocg
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1,minocg
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1,minocg
    68                           	psect	param0,global,class=BANK0,space=1,delta=1,noexec
    69                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    70                           	psect	pa_nodes0,global,class=CODE,delta=1
    71                           	psect	pa_nodes1,global,class=CODE,delta=1
    72                           	psect	pa_nodes2,global,class=CODE,delta=1
    73  0000                     
    74                           ; Version 1.42
    75                           ; Generated 13/04/2017 GMT
    76                           ; 
    77                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18LF25K22 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     tosu	equ	0xFFF
   109                           tosh	equ	0xFFE
   110                           tosl	equ	0xFFD
   111                           pclath	equ	0xFFA
   112                           tblptru	equ	0xFF8
   113                           tblptrh	equ	0xFF7
   114                           tblptrl	equ	0xFF6
   115                           tablat	equ	0xFF5
   116                           prodh	equ	0xFF4
   117                           prodl	equ	0xFF3
   118                           intcon	equ	0xFF2
   119                           intcon2	equ	0xFF1
   120                           wreg	equ	0xFE8
   121                           indf1	equ	0xFE7
   122                           fsr1h	equ	0xFE2
   123                           fsr1l	equ	0xFE1
   124                           indf2	equ	0xFDF
   125                           postinc2	equ	0xFDE
   126                           plusw2	equ	0xFDB
   127                           fsr2h	equ	0xFDA
   128                           fsr2l	equ	0xFD9
   129                           status	equ	0xFD8
   130                           
   131                           	psect	idataBANK0
   132  001552                     __pidataBANK0:
   133                           	opt stack 0
   134                           
   135                           ;initializer for _lastKnownResult
   136  001552  04                 	db	4
   137                           
   138                           ;initializer for _SigfoxTransactionResult
   139  001553  01                 	db	1
   140                           
   141                           ;initializer for _SFX_STATE
   142  001554  01                 	db	1
   143                           
   144                           ;initializer for _sysVarBattery
   145  001555  64                 	db	100
   146                           tosu	equ	0xFFF
   147                           tosh	equ	0xFFE
   148                           tosl	equ	0xFFD
   149                           pclath	equ	0xFFA
   150                           tblptru	equ	0xFF8
   151                           tblptrh	equ	0xFF7
   152                           tblptrl	equ	0xFF6
   153                           tablat	equ	0xFF5
   154                           prodh	equ	0xFF4
   155                           prodl	equ	0xFF3
   156                           intcon	equ	0xFF2
   157                           intcon2	equ	0xFF1
   158                           wreg	equ	0xFE8
   159                           indf1	equ	0xFE7
   160                           fsr1h	equ	0xFE2
   161                           fsr1l	equ	0xFE1
   162                           indf2	equ	0xFDF
   163                           postinc2	equ	0xFDE
   164                           plusw2	equ	0xFDB
   165                           fsr2h	equ	0xFDA
   166                           fsr2l	equ	0xFD9
   167                           status	equ	0xFD8
   168                           
   169                           	psect	smallconst
   170  000600                     __psmallconst:
   171                           	opt stack 0
   172  000600  00                 	db	0
   173  000601                     SigfoxCommandSelector@F6862:
   174                           	opt stack 0
   175  000601  2C                 	db	44
   176  000602  31                 	db	49
   177  000603  0D                 	db	13
   178  000604  00                 	db	0
   179  000605                     __end_ofSigfoxCommandSelector@F6862:
   180                           	opt stack 0
   181  000605                     SigfoxTask@F6885:
   182                           	opt stack 0
   183  000605  00                 	db	0
   184  000606  06                 	db	6
   185  000607  FF                 	db	255
   186  000608                     __end_ofSigfoxTask@F6885:
   187                           	opt stack 0
   188  000608                     SigfoxCommandSelector@F6860:
   189                           	opt stack 0
   190  000608  0D                 	db	13
   191  000609  00                 	db	0
   192  00060A                     __end_ofSigfoxCommandSelector@F6860:
   193                           	opt stack 0
   194  00060A                     _SigfoxCommandsDefinitions:
   195                           	opt stack 0
   196  00060A  2B                 	db	43
   197  00060B  2B                 	db	43
   198  00060C  2B                 	db	43
   199  00060D  00                 	db	0
   200  00060E  00                 	db	0
   201  00060F  00                 	db	0
   202  000610  00                 	db	0
   203  000611  00                 	db	0
   204  000612  00                 	db	0
   205  000613  00                 	db	0
   206  000614  41                 	db	65
   207  000615  54                 	db	84
   208  000616  24                 	db	36
   209  000617  53                 	db	83
   210  000618  46                 	db	70
   211  000619  3D                 	db	61
   212  00061A  00                 	db	0
   213  00061B  00                 	db	0
   214  00061C  00                 	db	0
   215  00061D  00                 	db	0
   216  00061E  41                 	db	65
   217  00061F  54                 	db	84
   218  000620  24                 	db	36
   219  000621  53                 	db	83
   220  000622  46                 	db	70
   221  000623  3D                 	db	61
   222  000624  00                 	db	0
   223  000625  00                 	db	0
   224  000626  00                 	db	0
   225  000627  00                 	db	0
   226  000628  41                 	db	65
   227  000629  54                 	db	84
   228  00062A  24                 	db	36
   229  00062B  53                 	db	83
   230  00062C  42                 	db	66
   231  00062D  3D                 	db	61
   232  00062E  31                 	db	49
   233  00062F  00                 	db	0
   234  000630  00                 	db	0
   235  000631  00                 	db	0
   236  000632  41                 	db	65
   237  000633  54                 	db	84
   238  000634  58                 	db	88
   239  000635  00                 	db	0
   240  000636  00                 	db	0
   241  000637  00                 	db	0
   242  000638  00                 	db	0
   243  000639  00                 	db	0
   244  00063A  00                 	db	0
   245  00063B  00                 	db	0
   246  00063C  41                 	db	65
   247  00063D  54                 	db	84
   248  00063E  53                 	db	83
   249  00063F  32                 	db	50
   250  000640  30                 	db	48
   251  000641  32                 	db	50
   252  000642  3D                 	db	61
   253  000643  37                 	db	55
   254  000644  00                 	db	0
   255  000645  00                 	db	0
   256  000646                     __end_of_SigfoxCommandsDefinitions:
   257                           	opt stack 0
   258  000646                     _SIT_FRAME_TRACKER_SF_ID_DESC:
   259                           	opt stack 0
   260  000646  06                 	db	6
   261  000647  7F                 	db	127
   262  000648  16                 	db	22
   263  000649  18                 	db	24
   264  00064A  20                 	db	32
   265  00064B  7F                 	db	127
   266  00064C  0B                 	db	11
   267  00064D  00                 	db	0
   268  00064E                     __end_of_SIT_FRAME_TRACKER_SF_ID_DESC:
   269                           	opt stack 0
   270  00064E                     _SIT_FRAME_POWERUP_SF_DESC:
   271                           	opt stack 0
   272  00064E  07                 	db	7
   273  00064F  41                 	db	65
   274  000650  42                 	db	66
   275  000651  43                 	db	67
   276  000652  00                 	db	0
   277  000653                     __end_of_SIT_FRAME_POWERUP_SF_DESC:
   278                           	opt stack 0
   279  000653                     STR_1:
   280  000653  4F                 	db	79	;'O'
   281  000654  4B                 	db	75	;'K'
   282  000655  00                 	db	0
   283  0000                     
   284                           ; #config settings
   285  000656  00                 	db	0	; dummy byte at the end
   286  0000                     tosu	equ	0xFFF
   287                           tosh	equ	0xFFE
   288                           tosl	equ	0xFFD
   289                           pclath	equ	0xFFA
   290                           tblptru	equ	0xFF8
   291                           tblptrh	equ	0xFF7
   292                           tblptrl	equ	0xFF6
   293                           tablat	equ	0xFF5
   294                           prodh	equ	0xFF4
   295                           prodl	equ	0xFF3
   296                           intcon	equ	0xFF2
   297                           intcon2	equ	0xFF1
   298                           wreg	equ	0xFE8
   299                           indf1	equ	0xFE7
   300                           fsr1h	equ	0xFE2
   301                           fsr1l	equ	0xFE1
   302                           indf2	equ	0xFDF
   303                           postinc2	equ	0xFDE
   304                           plusw2	equ	0xFDB
   305                           fsr2h	equ	0xFDA
   306                           fsr2l	equ	0xFD9
   307                           status	equ	0xFD8
   308                           
   309                           	psect	nvBANK0
   310  0000EB                     __pnvBANK0:
   311                           	opt stack 0
   312  0000EB                     _timer0ReloadVal:
   313                           	opt stack 0
   314  0000EB                     	ds	2
   315  0000ED                     _TMR0_InterruptHandler:
   316                           	opt stack 0
   317  0000ED                     	ds	2
   318  0000EF                     _PWR_STATE:
   319                           	opt stack 0
   320  0000EF                     	ds	1
   321  0000                     _PMD2bits	set	3901
   322  0000                     _PMD0bits	set	3903
   323  0000                     _ANSELA	set	3896
   324  0000                     _ANSELB	set	3897
   325  0000                     _ANSELC	set	3898
   326  0000                     _LATCbits	set	3979
   327  0000                     _TRISBbits	set	3987
   328  0000                     _LATAbits	set	3977
   329  0000                     _PORTAbits	set	3968
   330  0000                     _LATBbits	set	3978
   331  0000                     _RCREG2	set	3956
   332  0000                     _TXREG2	set	3955
   333  0000                     _SPBRGH2	set	3958
   334  0000                     _SPBRG2	set	3957
   335  0000                     _TXSTA2	set	3954
   336  0000                     _RCSTA2	set	3953
   337  0000                     _BAUDCON2	set	3952
   338  0000                     _RCSTA2bits	set	3953
   339  0000                     _INTCON2bits	set	4081
   340  0000                     _WPUB	set	3937
   341  0000                     _TRISC	set	3988
   342  0000                     _TRISB	set	3987
   343  0000                     _TRISA	set	3986
   344  0000                     _LATC	set	3979
   345  0000                     _LATB	set	3978
   346  0000                     _LATA	set	3977
   347  0000                     _T0CONbits	set	4053
   348  0000                     _TMR0L	set	4054
   349  0000                     _TMR0H	set	4055
   350  0000                     _T0CON	set	4053
   351  0000                     _PIR3bits	set	4004
   352  0000                     _PIE3bits	set	4003
   353  0000                     _INTCONbits	set	4082
   354  0000                     _RCONbits	set	4048
   355  0000                     _OSCTUNE	set	3995
   356  0000                     _OSCCON2	set	4050
   357  0000                     _OSCCON	set	4051
   358                           tosu	equ	0xFFF
   359                           tosh	equ	0xFFE
   360                           tosl	equ	0xFFD
   361                           pclath	equ	0xFFA
   362                           tblptru	equ	0xFF8
   363                           tblptrh	equ	0xFF7
   364                           tblptrl	equ	0xFF6
   365                           tablat	equ	0xFF5
   366                           prodh	equ	0xFF4
   367                           prodl	equ	0xFF3
   368                           intcon	equ	0xFF2
   369                           intcon2	equ	0xFF1
   370                           wreg	equ	0xFE8
   371                           indf1	equ	0xFE7
   372                           fsr1h	equ	0xFE2
   373                           fsr1l	equ	0xFE1
   374                           indf2	equ	0xFDF
   375                           postinc2	equ	0xFDE
   376                           plusw2	equ	0xFDB
   377                           fsr2h	equ	0xFDA
   378                           fsr2l	equ	0xFD9
   379                           status	equ	0xFD8
   380                           
   381                           	psect	cinit
   382  001132                     __pcinit:
   383                           	opt stack 0
   384  001132                     start_initialization:
   385                           	opt stack 0
   386  001132                     __initialization:
   387                           	opt stack 0
   388                           
   389                           ; Initialize objects allocated to BANK0 (4 bytes)
   390                           ; load TBLPTR registers with __pidataBANK0
   391  001132  0E52               	movlw	low __pidataBANK0
   392  001134  6EF6               	movwf	tblptrl,c
   393  001136  0E15               	movlw	high __pidataBANK0
   394  001138  6EF7               	movwf	tblptrh,c
   395  00113A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   396  00113C  6EF8               	movwf	tblptru,c
   397  00113E  EE00  F0F0         	lfsr	0,__pdataBANK0
   398  001142  EE10 F004          	lfsr	1,4
   399  001146                     copy_data0:
   400  001146  0009               	tblrd		*+
   401  001148  CFF5 FFEE          	movff	tablat,postinc0
   402  00114C  50E5               	movf	postdec1,w,c
   403  00114E  50E1               	movf	fsr1l,w,c
   404  001150  E1FA               	bnz	copy_data0
   405                           
   406                           ; Clear objects allocated to BANK1 (147 bytes)
   407  001152  EE01  F000         	lfsr	0,__pbssBANK1
   408  001156  0E93               	movlw	147
   409  001158                     clear_0:
   410  001158  6AEE               	clrf	postinc0,c
   411  00115A  06E8               	decf	wreg,f,c
   412  00115C  E1FD               	bnz	clear_0
   413                           
   414                           ; Clear objects allocated to BANK0 (100 bytes)
   415  00115E  EE00  F060         	lfsr	0,__pbssBANK0
   416  001162  0E64               	movlw	100
   417  001164                     clear_1:
   418  001164  6AEE               	clrf	postinc0,c
   419  001166  06E8               	decf	wreg,f,c
   420  001168  E1FD               	bnz	clear_1
   421  00116A                     end_of_initialization:
   422                           	opt stack 0
   423  00116A                     __end_of__initialization:
   424                           	opt stack 0
   425  00116A  9001               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   426  00116C  9201               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   427  00116E  0100               	movlb	0
   428  001170  EF9F  F007         	goto	_main	;jump to C main() function
   429                           tosu	equ	0xFFF
   430                           tosh	equ	0xFFE
   431                           tosl	equ	0xFFD
   432                           pclath	equ	0xFFA
   433                           tblptru	equ	0xFF8
   434                           tblptrh	equ	0xFF7
   435                           tblptrl	equ	0xFF6
   436                           tablat	equ	0xFF5
   437                           prodh	equ	0xFF4
   438                           prodl	equ	0xFF3
   439                           intcon	equ	0xFF2
   440                           intcon2	equ	0xFF1
   441                           postinc0	equ	0xFEE
   442                           wreg	equ	0xFE8
   443                           indf1	equ	0xFE7
   444                           postdec1	equ	0xFE5
   445                           fsr1h	equ	0xFE2
   446                           fsr1l	equ	0xFE1
   447                           indf2	equ	0xFDF
   448                           postinc2	equ	0xFDE
   449                           plusw2	equ	0xFDB
   450                           fsr2h	equ	0xFDA
   451                           fsr2l	equ	0xFD9
   452                           status	equ	0xFD8
   453                           
   454                           	psect	bssBANK0
   455  000060                     __pbssBANK0:
   456                           	opt stack 0
   457  000060                     _protVarCommunicationTimer:
   458                           	opt stack 0
   459  000060                     	ds	4
   460  000064                     _protVarMeasurementTimer:
   461                           	opt stack 0
   462  000064                     	ds	4
   463  000068                     _sysVarGpsDayTime:
   464                           	opt stack 0
   465  000068                     	ds	4
   466  00006C                     _sysVarGpsLong:
   467                           	opt stack 0
   468  00006C                     	ds	4
   469  000070                     _sysVarGpsLat:
   470                           	opt stack 0
   471  000070                     	ds	4
   472  000074                     _powerTaskPwrReadyTimer:
   473                           	opt stack 0
   474  000074                     	ds	2
   475  000076                     _sessionTO:
   476                           	opt stack 0
   477  000076                     	ds	2
   478  000078                     _sysVarGpsOdometer:
   479                           	opt stack 0
   480  000078                     	ds	2
   481  00007A                     _sysVarGpsCourse:
   482                           	opt stack 0
   483  00007A                     	ds	2
   484  00007C                     _sysVarGpsSpeed:
   485                           	opt stack 0
   486  00007C                     	ds	2
   487  00007E                     _pwrScheduledCommPowerTaskFlag:
   488                           	opt stack 0
   489  00007E                     	ds	1
   490  00007F                     _pwrScheduledMeasPowerTaskFlag:
   491                           	opt stack 0
   492  00007F                     	ds	1
   493  000080                     _pwrScheduledInitTaskFlag:
   494                           	opt stack 0
   495  000080                     	ds	1
   496  000081                     ProtocolTaskTick@_500msToSecond:
   497                           	opt stack 0
   498  000081                     	ds	1
   499  000082                     _PROT_STATE:
   500                           	opt stack 0
   501  000082                     	ds	1
   502  000083                     _protVarSystemSynchronizedFlag:
   503                           	opt stack 0
   504  000083                     	ds	1
   505  000084                     _ledTimer:
   506                           	opt stack 0
   507  000084                     	ds	1
   508  000085                     _statusIndTimer:
   509                           	opt stack 0
   510  000085                     	ds	1
   511  000086                     _SigfoxTxDelay:
   512                           	opt stack 0
   513  000086                     	ds	1
   514  000087                     _SigfoxTimeOutTimer:
   515                           	opt stack 0
   516  000087                     	ds	1
   517  000088                     _SigfoxRXBufferPtr:
   518                           	opt stack 0
   519  000088                     	ds	1
   520  000089                     _SigfoxTXBufferPtr:
   521                           	opt stack 0
   522  000089                     	ds	1
   523  00008A                     _SigfoxTransactionAttemps:
   524                           	opt stack 0
   525  00008A                     	ds	1
   526  00008B                     _SigfoxScheduledMsgStaTaskFlag:
   527                           	opt stack 0
   528  00008B                     	ds	1
   529  00008C                     _SigfoxScheduledInitTaskFlag:
   530                           	opt stack 0
   531  00008C                     	ds	1
   532  00008D                     _SigfoxScheduledPwrDownTaskFlag:
   533                           	opt stack 0
   534  00008D                     	ds	1
   535  00008E                     _SigfoxScheduledMsgAckTaskFlag:
   536                           	opt stack 0
   537  00008E                     	ds	1
   538  00008F                     _SigfoxScheduledMsgTaskFlag:
   539                           	opt stack 0
   540  00008F                     	ds	1
   541  000090                     _SigfoxMsgReceivedFlag:
   542                           	opt stack 0
   543  000090                     	ds	1
   544  000091                     _SigfoxCommManagerState:
   545                           	opt stack 0
   546  000091                     	ds	1
   547  000092                     _usartSemaphore:
   548                           	opt stack 0
   549  000092                     	ds	1
   550  000093                     _sysVarMainInput:
   551                           	opt stack 0
   552  000093                     	ds	1
   553  000094                     _sysVarGpsValidFlag:
   554                           	opt stack 0
   555  000094                     	ds	1
   556  000095                     _SigfoxTXBuffer:
   557                           	opt stack 0
   558  000095                     	ds	35
   559  0000B8                     _protDataShifter:
   560                           	opt stack 0
   561  0000B8                     	ds	12
   562                           tosu	equ	0xFFF
   563                           tosh	equ	0xFFE
   564                           tosl	equ	0xFFD
   565                           pclath	equ	0xFFA
   566                           tblptru	equ	0xFF8
   567                           tblptrh	equ	0xFF7
   568                           tblptrl	equ	0xFF6
   569                           tablat	equ	0xFF5
   570                           prodh	equ	0xFF4
   571                           prodl	equ	0xFF3
   572                           intcon	equ	0xFF2
   573                           intcon2	equ	0xFF1
   574                           postinc0	equ	0xFEE
   575                           wreg	equ	0xFE8
   576                           indf1	equ	0xFE7
   577                           postdec1	equ	0xFE5
   578                           fsr1h	equ	0xFE2
   579                           fsr1l	equ	0xFE1
   580                           indf2	equ	0xFDF
   581                           postinc2	equ	0xFDE
   582                           plusw2	equ	0xFDB
   583                           fsr2h	equ	0xFDA
   584                           fsr2l	equ	0xFD9
   585                           status	equ	0xFD8
   586                           
   587                           	psect	dataBANK0
   588  0000F0                     __pdataBANK0:
   589                           	opt stack 0
   590  0000F0                     _lastKnownResult:
   591                           	opt stack 0
   592  0000F0                     	ds	1
   593  0000F1                     _SigfoxTransactionResult:
   594                           	opt stack 0
   595  0000F1                     	ds	1
   596  0000F2                     _SFX_STATE:
   597                           	opt stack 0
   598  0000F2                     	ds	1
   599  0000F3                     _sysVarBattery:
   600                           	opt stack 0
   601  0000F3                     	ds	1
   602                           tosu	equ	0xFFF
   603                           tosh	equ	0xFFE
   604                           tosl	equ	0xFFD
   605                           pclath	equ	0xFFA
   606                           tblptru	equ	0xFF8
   607                           tblptrh	equ	0xFF7
   608                           tblptrl	equ	0xFF6
   609                           tablat	equ	0xFF5
   610                           prodh	equ	0xFF4
   611                           prodl	equ	0xFF3
   612                           intcon	equ	0xFF2
   613                           intcon2	equ	0xFF1
   614                           postinc0	equ	0xFEE
   615                           wreg	equ	0xFE8
   616                           indf1	equ	0xFE7
   617                           postdec1	equ	0xFE5
   618                           fsr1h	equ	0xFE2
   619                           fsr1l	equ	0xFE1
   620                           indf2	equ	0xFDF
   621                           postinc2	equ	0xFDE
   622                           plusw2	equ	0xFDB
   623                           fsr2h	equ	0xFDA
   624                           fsr2l	equ	0xFD9
   625                           status	equ	0xFD8
   626                           
   627                           	psect	bssBANK1
   628  000100                     __pbssBANK1:
   629                           	opt stack 0
   630  000100                     _gprsRxBuffer:
   631                           	opt stack 0
   632  000100                     	ds	100
   633  000164                     _SigfoxPayloadBuffer:
   634                           	opt stack 0
   635  000164                     	ds	25
   636  00017D                     _SigfoxRXBuffer:
   637                           	opt stack 0
   638  00017D                     	ds	22
   639                           tosu	equ	0xFFF
   640                           tosh	equ	0xFFE
   641                           tosl	equ	0xFFD
   642                           pclath	equ	0xFFA
   643                           tblptru	equ	0xFF8
   644                           tblptrh	equ	0xFF7
   645                           tblptrl	equ	0xFF6
   646                           tablat	equ	0xFF5
   647                           prodh	equ	0xFF4
   648                           prodl	equ	0xFF3
   649                           intcon	equ	0xFF2
   650                           intcon2	equ	0xFF1
   651                           postinc0	equ	0xFEE
   652                           wreg	equ	0xFE8
   653                           indf1	equ	0xFE7
   654                           postdec1	equ	0xFE5
   655                           fsr1h	equ	0xFE2
   656                           fsr1l	equ	0xFE1
   657                           indf2	equ	0xFDF
   658                           postinc2	equ	0xFDE
   659                           plusw2	equ	0xFDB
   660                           fsr2h	equ	0xFDA
   661                           fsr2l	equ	0xFD9
   662                           status	equ	0xFD8
   663                           
   664                           	psect	cstackBANK0
   665  0000C4                     __pcstackBANK0:
   666                           	opt stack 0
   667  0000C4                     EUSART2_Receive_ISR@auxVar:
   668                           	opt stack 0
   669  0000C4                     systemMainTimer@secondMultiplier:
   670                           	opt stack 0
   671                           
   672                           ; 1 bytes @ 0x0
   673  0000C4                     	ds	1
   674  0000C5                     ??_INTERRUPT_InterruptManager:
   675                           
   676                           ; 1 bytes @ 0x1
   677  0000C5                     	ds	4
   678  0000C9                     ??_TMR0_Initialize:
   679  0000C9                     ?_strcpy:
   680                           	opt stack 0
   681  0000C9                     ?_strcat:
   682                           	opt stack 0
   683  0000C9                     ?_strlen:
   684                           	opt stack 0
   685  0000C9                     ?_strchr:
   686                           	opt stack 0
   687  0000C9                     ?___almod:
   688                           	opt stack 0
   689  0000C9                     SigfoxTaskNewTask@command:
   690                           	opt stack 0
   691  0000C9                     gpsTaskGetVarValidity@variableID:
   692                           	opt stack 0
   693  0000C9                     setLedStatus@status:
   694                           	opt stack 0
   695  0000C9                     powerTaskNewTask@command:
   696                           	opt stack 0
   697  0000C9                     powerTaskGetVarValidity@variableID:
   698                           	opt stack 0
   699  0000C9                     TMR0_SetInterruptHandler@InterruptHandler:
   700                           	opt stack 0
   701  0000C9                     SigfoxTaskLoadPayloadBuffer@rawData:
   702                           	opt stack 0
   703  0000C9                     strcat@to:
   704                           	opt stack 0
   705  0000C9                     strcpy@to:
   706                           	opt stack 0
   707  0000C9                     strchr@ptr:
   708                           	opt stack 0
   709  0000C9                     strlen@s:
   710                           	opt stack 0
   711  0000C9                     ProtocolAddFrameData@Data:
   712                           	opt stack 0
   713  0000C9                     ___almod@dividend:
   714                           	opt stack 0
   715                           
   716                           ; 4 bytes @ 0x5
   717  0000C9                     	ds	1
   718  0000CA                     ProtocolGetValidity@variableID:
   719                           	opt stack 0
   720                           
   721                           ; 1 bytes @ 0x6
   722  0000CA                     	ds	1
   723  0000CB                     ??_SigfoxTaskLoadPayloadBuffer:
   724  0000CB                     ProtocolGetValidity@taskResponse:
   725                           	opt stack 0
   726  0000CB                     strcat@from:
   727                           	opt stack 0
   728  0000CB                     strcpy@from:
   729                           	opt stack 0
   730  0000CB                     strchr@chr:
   731                           	opt stack 0
   732  0000CB                     strlen@cp:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0x7
   736  0000CB                     	ds	2
   737  0000CD                     ?_strncmp:
   738                           	opt stack 0
   739  0000CD                     ProtocolAddFrameData@DataRepSize:
   740                           	opt stack 0
   741  0000CD                     _SigfoxTaskLoadPayloadBuffer$805:
   742                           	opt stack 0
   743  0000CD                     strcat@cp:
   744                           	opt stack 0
   745  0000CD                     strcpy@cp:
   746                           	opt stack 0
   747  0000CD                     strncmp@s1:
   748                           	opt stack 0
   749  0000CD                     ___almod@divisor:
   750                           	opt stack 0
   751                           
   752                           ; 4 bytes @ 0x9
   753  0000CD                     	ds	1
   754  0000CE                     ??_ProtocolAddFrameData:
   755                           
   756                           ; 1 bytes @ 0xA
   757  0000CE                     	ds	1
   758  0000CF                     _SigfoxTaskLoadPayloadBuffer$806:
   759                           	opt stack 0
   760  0000CF                     strncmp@s2:
   761                           	opt stack 0
   762  0000CF                     SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR:
   763                           	opt stack 0
   764                           
   765                           ; 4 bytes @ 0xB
   766  0000CF                     	ds	2
   767  0000D1                     SigfoxTaskLoadPayloadBuffer@payloadBufferPtr:
   768                           	opt stack 0
   769  0000D1                     ___almod@counter:
   770                           	opt stack 0
   771  0000D1                     strncmp@len:
   772                           	opt stack 0
   773                           
   774                           ; 2 bytes @ 0xD
   775  0000D1                     	ds	1
   776  0000D2                     SigfoxTaskLoadPayloadBuffer@buffer:
   777                           	opt stack 0
   778  0000D2                     ___almod@sign:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0xE
   782  0000D2                     	ds	1
   783  0000D3                     ??_strncmp:
   784  0000D3                     SigfoxCommandSelector@SFX_COMMAND_TAIL_STR:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0xF
   788  0000D3                     	ds	1
   789  0000D4                     ?_strstr:
   790                           	opt stack 0
   791  0000D4                     strstr@s1:
   792                           	opt stack 0
   793                           
   794                           ; 2 bytes @ 0x10
   795  0000D4                     	ds	1
   796  0000D5                     SigfoxCommandSelector@SigfoxRomCommandStrPtr:
   797                           	opt stack 0
   798                           
   799                           ; 2 bytes @ 0x11
   800  0000D5                     	ds	1
   801  0000D6                     strstr@s2:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x12
   805  0000D6                     	ds	1
   806  0000D7                     SigfoxCommandSelector@SigfoxCommand:
   807                           	opt stack 0
   808  0000D7                     ProtocolAddFrameData@toLeft:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x13
   812  0000D7                     	ds	1
   813  0000D8                     SigfoxCommManager@SigfoxCommand:
   814                           	opt stack 0
   815  0000D8                     SigfoxResponseParser@dumyPtr:
   816                           	opt stack 0
   817  0000D8                     ProtocolAddFrameData@longMask:
   818                           	opt stack 0
   819                           
   820                           ; 4 bytes @ 0x14
   821  0000D8                     	ds	2
   822  0000DA                     
   823                           ; 1 bytes @ 0x16
   824  0000DA                     	ds	1
   825  0000DB                     SigfoxTask@sigfoxInitCommandsROMList:
   826                           	opt stack 0
   827                           
   828                           ; 3 bytes @ 0x17
   829  0000DB                     	ds	1
   830  0000DC                     ProtocolAddFrameData@i:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x18
   834  0000DC                     	ds	1
   835  0000DD                     ProtocolAddFrameData@bytes:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x19
   839  0000DD                     	ds	1
   840  0000DE                     ??_ProtocolTaskBuildFrame:
   841  0000DE                     SigfoxTask@SigfoxInitCommandPtr:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x1A
   845  0000DE                     	ds	2
   846  0000E0                     ProtocolTaskBuildFrame@EVENT:
   847                           	opt stack 0
   848  0000E0                     ProtocolTaskExecute@taskPointer:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x1C
   852  0000E0                     	ds	1
   853  0000E1                     ProtocolTaskBuildFrame@dataField:
   854                           	opt stack 0
   855                           
   856                           ; 4 bytes @ 0x1D
   857  0000E1                     	ds	1
   858  0000E2                     ProtocolTaskExecute@taskTimeOut:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x1E
   862  0000E2                     	ds	2
   863  0000E4                     ProtocolTaskExecute@timeOut:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x20
   867  0000E4                     	ds	1
   868  0000E5                     ProtocolTaskBuildFrame@totalBits:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0x21
   872  0000E5                     	ds	1
   873  0000E6                     ProtocolTaskExecute@taskResult:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0x22
   877  0000E6                     	ds	1
   878  0000E7                     ProtocolTaskBuildFrame@dataSize:
   879                           	opt stack 0
   880                           
   881                           ; 1 bytes @ 0x23
   882  0000E7                     	ds	1
   883  0000E8                     ProtocolTaskBuildFrame@protFrameDescPtr:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x24
   887  0000E8                     	ds	2
   888  0000EA                     main@taskResult:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0x26
   892  0000EA                     	ds	1
   893                           tosu	equ	0xFFF
   894                           tosh	equ	0xFFE
   895                           tosl	equ	0xFFD
   896                           pclath	equ	0xFFA
   897                           tblptru	equ	0xFF8
   898                           tblptrh	equ	0xFF7
   899                           tblptrl	equ	0xFF6
   900                           tablat	equ	0xFF5
   901                           prodh	equ	0xFF4
   902                           prodl	equ	0xFF3
   903                           intcon	equ	0xFF2
   904                           intcon2	equ	0xFF1
   905                           postinc0	equ	0xFEE
   906                           wreg	equ	0xFE8
   907                           indf1	equ	0xFE7
   908                           postdec1	equ	0xFE5
   909                           fsr1h	equ	0xFE2
   910                           fsr1l	equ	0xFE1
   911                           indf2	equ	0xFDF
   912                           postinc2	equ	0xFDE
   913                           plusw2	equ	0xFDB
   914                           fsr2h	equ	0xFDA
   915                           fsr2l	equ	0xFD9
   916                           status	equ	0xFD8
   917                           
   918 ;;
   919 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   920 ;;
   921 ;; *************** function _main *****************
   922 ;; Defined at:
   923 ;;		line 69 in file "main.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;		None
   926 ;; Auto vars:     Size  Location     Type
   927 ;;  taskResult      1   38[BANK0 ] enum E6679
   928 ;; Return value:  Size  Location     Type
   929 ;;                  1    wreg      void 
   930 ;; Registers used:
   931 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   932 ;; Tracked objects:
   933 ;;		On entry : 0/0
   934 ;;		On exit  : 3F/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   937 ;;      Params:         0       0       0       0       0       0       0
   938 ;;      Locals:         0       1       0       0       0       0       0
   939 ;;      Temps:          0       0       0       0       0       0       0
   940 ;;      Totals:         0       1       0       0       0       0       0
   941 ;;Total ram usage:        1 bytes
   942 ;; Hardware stack levels required when called:   11
   943 ;; This function calls:
   944 ;;		_ProtocolTask
   945 ;;		_ProtocolTaskPowerDown
   946 ;;		_SYSTEM_Initialize
   947 ;;		_TMR0_SetInterruptHandler
   948 ;;		_setLedStatus
   949 ;; This function is called by:
   950 ;;		Startup code after reset
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           	psect	text0
   955  000F3E                     __ptext0:
   956                           	opt stack 0
   957  000F3E                     _main:
   958                           	opt stack 20
   959                           
   960                           ;main.c: 71: taskResult_t taskResult;
   961                           ;main.c: 73: SYSTEM_Initialize();
   962                           
   963                           ;incstack = 0
   964  000F3E  EC56  F00A         	call	_SYSTEM_Initialize	;wreg free
   965                           
   966                           ;main.c: 74: TMR0_SetInterruptHandler(systemMainTimer);
   967  000F42  0E96               	movlw	low _systemMainTimer
   968  000F44  0100               	movlb	0	; () banked
   969  000F46  6FC9               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
   970  000F48  0E12               	movlw	high _systemMainTimer
   971  000F4A  6FCA               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
   972  000F4C  EC96  F00A         	call	_TMR0_SetInterruptHandler	;wreg free
   973                           
   974                           ;main.c: 76: (INTCONbits.GIE = 1);
   975  000F50  8EF2               	bsf	intcon,7,c	;volatile
   976                           
   977                           ;main.c: 77: (INTCONbits.PEIE = 1);
   978  000F52  8CF2               	bsf	intcon,6,c	;volatile
   979                           
   980                           ;main.c: 78: TRISBbits.TRISB1 = 1;
   981  000F54  8293               	bsf	3987,1,c	;volatile
   982                           
   983                           ;main.c: 80: ProtocolTaskPowerDown();
   984  000F56  EC90  F00A         	call	_ProtocolTaskPowerDown	;wreg free
   985  000F5A                     l3497:
   986                           
   987                           ; BSR set to: 0
   988                           ;main.c: 83: setLedStatus(TASK_ON_COURSE);
   989  000F5A  0E01               	movlw	1
   990  000F5C  ECDA  F008         	call	_setLedStatus
   991                           
   992                           ; BSR set to: 0
   993                           ;main.c: 84: sessionTO = 50 + 360 + 60;
   994  000F60  0E01               	movlw	1
   995  000F62  6F77               	movwf	(_sessionTO+1)& (0+255),b
   996  000F64  0ED6               	movlw	214
   997  000F66  6F76               	movwf	_sessionTO& (0+255),b
   998  000F68                     l3501:
   999                           
  1000                           ; BSR set to: 0
  1001                           ;main.c: 86: taskResult = ProtocolTask();
  1002  000F68  EC99  F005         	call	_ProtocolTask	;wreg free
  1003  000F6C  6FEA               	movwf	main@taskResult& (0+255),b
  1004                           
  1005                           ; BSR set to: 0
  1006                           ;main.c: 87: if(!sessionTO){
  1007  000F6E  5176               	movf	_sessionTO& (0+255),w,b
  1008  000F70  1177               	iorwf	(_sessionTO+1)& (0+255),w,b
  1009  000F72  E002               	bz	l3509
  1010                           
  1011                           ; BSR set to: 0
  1012                           ;main.c: 89: }
  1013                           ;main.c: 90: }while(taskResult!=TASK_NO_SENSOR_FOUND);
  1014  000F74  51EA               	movf	main@taskResult& (0+255),w,b
  1015  000F76  E1F8               	bnz	l3501
  1016  000F78                     l3509:
  1017                           
  1018                           ; BSR set to: 0
  1019                           ;main.c: 92: if(sysVarGpsValidFlag){
  1020  000F78  5194               	movf	_sysVarGpsValidFlag& (0+255),w,b
  1021  000F7A  E009               	bz	l3517
  1022                           
  1023                           ; BSR set to: 0
  1024                           ;main.c: 93: setLedStatus(TASK_DATA_READY);
  1025  000F7C  0E02               	movlw	2
  1026  000F7E  ECDA  F008         	call	_setLedStatus
  1027                           
  1028                           ; BSR set to: 0
  1029                           ;main.c: 94: sessionTO = 15;
  1030  000F82  6B77               	clrf	(_sessionTO+1)& (0+255),b
  1031  000F84  0E0F               	movlw	15
  1032  000F86  6F76               	movwf	_sessionTO& (0+255),b
  1033  000F88                     l3515:
  1034                           
  1035                           ; BSR set to: 0
  1036  000F88  5176               	movf	_sessionTO& (0+255),w,b
  1037  000F8A  1177               	iorwf	(_sessionTO+1)& (0+255),w,b
  1038  000F8C  E1FD               	bnz	l3515
  1039  000F8E                     l3517:
  1040                           
  1041                           ; BSR set to: 0
  1042                           ;main.c: 96: }
  1043                           ;main.c: 97: sessionTO = 60;
  1044  000F8E  6B77               	clrf	(_sessionTO+1)& (0+255),b
  1045  000F90  0E3C               	movlw	60
  1046  000F92  6F76               	movwf	_sessionTO& (0+255),b
  1047                           
  1048                           ; BSR set to: 0
  1049                           ;main.c: 99: setLedStatus(TASK_NO_SENSOR_FOUND);
  1050  000F94  0E00               	movlw	0
  1051  000F96  ECDA  F008         	call	_setLedStatus
  1052                           
  1053                           ;main.c: 100: while (sessionTO){
  1054  000F9A  D001               	goto	l3521
  1055  000F9C                     l600:
  1056                           
  1057                           ; BSR set to: 0
  1058  000F9C  0004               	clrwdt		;# 
  1059  000F9E                     l3521:
  1060  000F9E  0100               	movlb	0	; () banked
  1061  000FA0  5176               	movf	_sessionTO& (0+255),w,b
  1062  000FA2  1177               	iorwf	(_sessionTO+1)& (0+255),w,b
  1063  000FA4  E0DA               	bz	l3497
  1064  000FA6  D7FA               	goto	l600
  1065  000FA8                     __end_of_main:
  1066                           	opt stack 0
  1067                           tosu	equ	0xFFF
  1068                           tosh	equ	0xFFE
  1069                           tosl	equ	0xFFD
  1070                           pclath	equ	0xFFA
  1071                           tblptru	equ	0xFF8
  1072                           tblptrh	equ	0xFF7
  1073                           tblptrl	equ	0xFF6
  1074                           tablat	equ	0xFF5
  1075                           prodh	equ	0xFF4
  1076                           prodl	equ	0xFF3
  1077                           intcon	equ	0xFF2
  1078                           intcon2	equ	0xFF1
  1079                           postinc0	equ	0xFEE
  1080                           wreg	equ	0xFE8
  1081                           indf1	equ	0xFE7
  1082                           postdec1	equ	0xFE5
  1083                           fsr1h	equ	0xFE2
  1084                           fsr1l	equ	0xFE1
  1085                           indf2	equ	0xFDF
  1086                           postinc2	equ	0xFDE
  1087                           plusw2	equ	0xFDB
  1088                           fsr2h	equ	0xFDA
  1089                           fsr2l	equ	0xFD9
  1090                           status	equ	0xFD8
  1091                           
  1092 ;; *************** function _setLedStatus *****************
  1093 ;; Defined at:
  1094 ;;		line 44 in file "main.c"
  1095 ;; Parameters:    Size  Location     Type
  1096 ;;  status          1    wreg     enum E6679
  1097 ;; Auto vars:     Size  Location     Type
  1098 ;;  status          1    5[BANK0 ] enum E6679
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  1    wreg      void 
  1101 ;; Registers used:
  1102 ;;		wreg, status,2, status,0
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 3F/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1108 ;;      Params:         0       0       0       0       0       0       0
  1109 ;;      Locals:         0       1       0       0       0       0       0
  1110 ;;      Temps:          0       0       0       0       0       0       0
  1111 ;;      Totals:         0       1       0       0       0       0       0
  1112 ;;Total ram usage:        1 bytes
  1113 ;; Hardware stack levels used:    1
  1114 ;; Hardware stack levels required when called:    5
  1115 ;; This function calls:
  1116 ;;		Nothing
  1117 ;; This function is called by:
  1118 ;;		_main
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           	psect	text1
  1123  0011B4                     __ptext1:
  1124                           	opt stack 0
  1125  0011B4                     _setLedStatus:
  1126                           	opt stack 25
  1127                           
  1128                           ; BSR set to: 0
  1129                           ;incstack = 0
  1130                           ;setLedStatus@status stored from wreg
  1131  0011B4  0100               	movlb	0	; () banked
  1132  0011B6  6FC9               	movwf	setLedStatus@status& (0+255),b
  1133                           
  1134                           ;main.c: 45: if(status != lastKnownResult){
  1135  0011B8  19F0               	xorwf	_lastKnownResult& (0+255),w,b
  1136  0011BA  E10A               	bnz	l2661
  1137  0011BC  D015               	goto	l2663
  1138  0011BE                     l2651:
  1139                           
  1140                           ; BSR set to: 0
  1141                           ;main.c: 51: statusIndTimer = 1;
  1142  0011BE  0E01               	movlw	1
  1143  0011C0  D005               	goto	L4
  1144  0011C2                     l2653:
  1145                           
  1146                           ; BSR set to: 0
  1147                           ;main.c: 54: statusIndTimer = 2;
  1148  0011C2  0E02               	movlw	2
  1149  0011C4  D003               	goto	L4
  1150  0011C6                     l2655:
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;main.c: 57: statusIndTimer = 4;
  1154  0011C6  0E04               	movlw	4
  1155  0011C8  D001               	goto	L4
  1156  0011CA                     l2657:
  1157                           
  1158                           ; BSR set to: 0
  1159                           ;main.c: 60: statusIndTimer = 15;
  1160  0011CA  0E0F               	movlw	15
  1161  0011CC                     L4:
  1162  0011CC  6F85               	movwf	_statusIndTimer& (0+255),b
  1163                           
  1164                           ;main.c: 61: break;
  1165  0011CE  D009               	goto	l584
  1166  0011D0                     l2661:
  1167                           
  1168                           ; BSR set to: 0
  1169  0011D0  51C9               	movf	setLedStatus@status& (0+255),w,b
  1170                           
  1171                           ; Switch size 1, requested type "space"
  1172                           ; Number of cases is 4, Range of values is 0 to 4
  1173                           ; switch strategies available:
  1174                           ; Name         Instructions Cycles
  1175                           ; simple_byte           13     7 (average)
  1176                           ;	Chosen strategy is simple_byte
  1177  0011D2  E0FB               	bz	l2657
  1178  0011D4  0A01               	xorlw	1	; case 1
  1179  0011D6  E0F3               	bz	l2651
  1180  0011D8  0A03               	xorlw	3	; case 2
  1181  0011DA  E0F3               	bz	l2653
  1182  0011DC  0A06               	xorlw	6	; case 4
  1183  0011DE  E0F3               	bz	l2655
  1184  0011E0  D7F4               	goto	l2657
  1185  0011E2                     l584:
  1186                           
  1187                           ; BSR set to: 0
  1188  0011E2  8489               	bsf	3977,2,c	;volatile
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;main.c: 64: ledTimer = statusIndTimer;
  1192  0011E4  C085  F084         	movff	_statusIndTimer,_ledTimer
  1193  0011E8                     l2663:
  1194                           
  1195                           ; BSR set to: 0
  1196                           ;main.c: 65: }
  1197                           ;main.c: 66: lastKnownResult = status;
  1198  0011E8  C0C9  F0F0         	movff	setLedStatus@status,_lastKnownResult
  1199                           
  1200                           ; BSR set to: 0
  1201  0011EC  0012               	return		;funcret
  1202  0011EE                     __end_of_setLedStatus:
  1203                           	opt stack 0
  1204                           tosu	equ	0xFFF
  1205                           tosh	equ	0xFFE
  1206                           tosl	equ	0xFFD
  1207                           pclath	equ	0xFFA
  1208                           tblptru	equ	0xFF8
  1209                           tblptrh	equ	0xFF7
  1210                           tblptrl	equ	0xFF6
  1211                           tablat	equ	0xFF5
  1212                           prodh	equ	0xFF4
  1213                           prodl	equ	0xFF3
  1214                           intcon	equ	0xFF2
  1215                           intcon2	equ	0xFF1
  1216                           postinc0	equ	0xFEE
  1217                           wreg	equ	0xFE8
  1218                           indf1	equ	0xFE7
  1219                           postdec1	equ	0xFE5
  1220                           fsr1h	equ	0xFE2
  1221                           fsr1l	equ	0xFE1
  1222                           indf2	equ	0xFDF
  1223                           postinc2	equ	0xFDE
  1224                           plusw2	equ	0xFDB
  1225                           fsr2h	equ	0xFDA
  1226                           fsr2l	equ	0xFD9
  1227                           status	equ	0xFD8
  1228                           
  1229 ;; *************** function _TMR0_SetInterruptHandler *****************
  1230 ;; Defined at:
  1231 ;;		line 121 in file "mcc_generated_files/tmr0.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;  InterruptHan    2    5[BANK0 ] PTR void 
  1234 ;;		 -> systemMainTimer(1), 
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;		None
  1237 ;; Return value:  Size  Location     Type
  1238 ;;                  1    wreg      void 
  1239 ;; Registers used:
  1240 ;;		wreg, status,2, status,0
  1241 ;; Tracked objects:
  1242 ;;		On entry : 3F/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1246 ;;      Params:         0       2       0       0       0       0       0
  1247 ;;      Locals:         0       0       0       0       0       0       0
  1248 ;;      Temps:          0       0       0       0       0       0       0
  1249 ;;      Totals:         0       2       0       0       0       0       0
  1250 ;;Total ram usage:        2 bytes
  1251 ;; Hardware stack levels used:    1
  1252 ;; Hardware stack levels required when called:    5
  1253 ;; This function calls:
  1254 ;;		Nothing
  1255 ;; This function is called by:
  1256 ;;		_main
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260                           	psect	text2
  1261  00152C                     __ptext2:
  1262                           	opt stack 0
  1263  00152C                     _TMR0_SetInterruptHandler:
  1264                           	opt stack 25
  1265                           
  1266                           ;tmr0.c: 122: TMR0_InterruptHandler = InterruptHandler;
  1267                           
  1268                           ; BSR set to: 0
  1269                           ;incstack = 0
  1270  00152C  C0C9  F0ED         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  1271  001530  C0CA  F0EE         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  1272  001534  0012               	return		;funcret
  1273  001536                     __end_of_TMR0_SetInterruptHandler:
  1274                           	opt stack 0
  1275                           tosu	equ	0xFFF
  1276                           tosh	equ	0xFFE
  1277                           tosl	equ	0xFFD
  1278                           pclath	equ	0xFFA
  1279                           tblptru	equ	0xFF8
  1280                           tblptrh	equ	0xFF7
  1281                           tblptrl	equ	0xFF6
  1282                           tablat	equ	0xFF5
  1283                           prodh	equ	0xFF4
  1284                           prodl	equ	0xFF3
  1285                           intcon	equ	0xFF2
  1286                           intcon2	equ	0xFF1
  1287                           postinc0	equ	0xFEE
  1288                           wreg	equ	0xFE8
  1289                           indf1	equ	0xFE7
  1290                           postdec1	equ	0xFE5
  1291                           fsr1h	equ	0xFE2
  1292                           fsr1l	equ	0xFE1
  1293                           indf2	equ	0xFDF
  1294                           postinc2	equ	0xFDE
  1295                           plusw2	equ	0xFDB
  1296                           fsr2h	equ	0xFDA
  1297                           fsr2l	equ	0xFD9
  1298                           status	equ	0xFD8
  1299                           
  1300 ;; *************** function _SYSTEM_Initialize *****************
  1301 ;; Defined at:
  1302 ;;		line 105 in file "mcc_generated_files/mcc.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;		None
  1305 ;; Auto vars:     Size  Location     Type
  1306 ;;		None
  1307 ;; Return value:  Size  Location     Type
  1308 ;;                  1    wreg      void 
  1309 ;; Registers used:
  1310 ;;		wreg, status,2, status,0, cstack
  1311 ;; Tracked objects:
  1312 ;;		On entry : 0/0
  1313 ;;		On exit  : 0/0
  1314 ;;		Unchanged: 0/0
  1315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1316 ;;      Params:         0       0       0       0       0       0       0
  1317 ;;      Locals:         0       0       0       0       0       0       0
  1318 ;;      Temps:          0       0       0       0       0       0       0
  1319 ;;      Totals:         0       0       0       0       0       0       0
  1320 ;;Total ram usage:        0 bytes
  1321 ;; Hardware stack levels used:    1
  1322 ;; Hardware stack levels required when called:    7
  1323 ;; This function calls:
  1324 ;;		_ADC_Initialize
  1325 ;;		_INTERRUPT_Initialize
  1326 ;;		_OSCILLATOR_Initialize
  1327 ;;		_PIN_MANAGER_Initialize
  1328 ;;		_TMR0_Initialize
  1329 ;; This function is called by:
  1330 ;;		_main
  1331 ;; This function uses a non-reentrant model
  1332 ;;
  1333                           
  1334                           	psect	text3
  1335  0014AC                     __ptext3:
  1336                           	opt stack 0
  1337  0014AC                     _SYSTEM_Initialize:
  1338                           	opt stack 23
  1339                           
  1340                           ;mcc.c: 108: INTERRUPT_Initialize();
  1341                           
  1342                           ;incstack = 0
  1343  0014AC  ECAD  F00A         	call	_INTERRUPT_Initialize	;wreg free
  1344                           
  1345                           ;mcc.c: 109: PIN_MANAGER_Initialize();
  1346  0014B0  ECFE  F009         	call	_PIN_MANAGER_Initialize	;wreg free
  1347                           
  1348                           ; BSR set to: 15
  1349                           ;mcc.c: 110: OSCILLATOR_Initialize();
  1350  0014B4  EC7B  F00A         	call	_OSCILLATOR_Initialize	;wreg free
  1351                           
  1352                           ;mcc.c: 111: ADC_Initialize();
  1353  0014B8  ECA3  F00A         	call	_ADC_Initialize	;wreg free
  1354                           
  1355                           ; BSR set to: 15
  1356                           ;mcc.c: 112: TMR0_Initialize();
  1357  0014BC  EF94  F009         	goto	_TMR0_Initialize	;wreg free
  1358  0014C0                     __end_of_SYSTEM_Initialize:
  1359                           	opt stack 0
  1360                           tosu	equ	0xFFF
  1361                           tosh	equ	0xFFE
  1362                           tosl	equ	0xFFD
  1363                           pclath	equ	0xFFA
  1364                           tblptru	equ	0xFF8
  1365                           tblptrh	equ	0xFF7
  1366                           tblptrl	equ	0xFF6
  1367                           tablat	equ	0xFF5
  1368                           prodh	equ	0xFF4
  1369                           prodl	equ	0xFF3
  1370                           intcon	equ	0xFF2
  1371                           intcon2	equ	0xFF1
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           indf1	equ	0xFE7
  1375                           postdec1	equ	0xFE5
  1376                           fsr1h	equ	0xFE2
  1377                           fsr1l	equ	0xFE1
  1378                           indf2	equ	0xFDF
  1379                           postinc2	equ	0xFDE
  1380                           plusw2	equ	0xFDB
  1381                           fsr2h	equ	0xFDA
  1382                           fsr2l	equ	0xFD9
  1383                           status	equ	0xFD8
  1384                           
  1385 ;; *************** function _TMR0_Initialize *****************
  1386 ;; Defined at:
  1387 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;		None
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;		None
  1392 ;; Return value:  Size  Location     Type
  1393 ;;                  1    wreg      void 
  1394 ;; Registers used:
  1395 ;;		wreg, status,2, status,0, cstack
  1396 ;; Tracked objects:
  1397 ;;		On entry : 3F/F
  1398 ;;		On exit  : 0/0
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1401 ;;      Params:         0       0       0       0       0       0       0
  1402 ;;      Locals:         0       0       0       0       0       0       0
  1403 ;;      Temps:          0       2       0       0       0       0       0
  1404 ;;      Totals:         0       2       0       0       0       0       0
  1405 ;;Total ram usage:        2 bytes
  1406 ;; Hardware stack levels used:    1
  1407 ;; Hardware stack levels required when called:    6
  1408 ;; This function calls:
  1409 ;;		_TMR0_StartTimer
  1410 ;; This function is called by:
  1411 ;;		_SYSTEM_Initialize
  1412 ;; This function uses a non-reentrant model
  1413 ;;
  1414                           
  1415                           	psect	text4
  1416  001328                     __ptext4:
  1417                           	opt stack 0
  1418  001328                     _TMR0_Initialize:
  1419                           	opt stack 23
  1420                           
  1421                           ;tmr0.c: 71: T0CON = 0x13;
  1422                           
  1423                           ;incstack = 0
  1424  001328  0E13               	movlw	19
  1425  00132A  6ED5               	movwf	4053,c	;volatile
  1426                           
  1427                           ;tmr0.c: 74: TMR0H = 0x85;
  1428  00132C  0E85               	movlw	133
  1429  00132E  6ED7               	movwf	4055,c	;volatile
  1430                           
  1431                           ;tmr0.c: 77: TMR0L = 0xED;
  1432  001330  0EED               	movlw	237
  1433  001332  6ED6               	movwf	4054,c	;volatile
  1434                           
  1435                           ;tmr0.c: 80: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  1436  001334  50D6               	movf	4054,w,c	;volatile
  1437  001336  CFD7 F0C9          	movff	4055,??_TMR0_Initialize	;volatile
  1438  00133A  0100               	movlb	0	; () banked
  1439  00133C  6BCA               	clrf	(??_TMR0_Initialize+1)& (0+255),b
  1440  00133E  C0C9  F0CA         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  1441  001342  6BC9               	clrf	??_TMR0_Initialize& (0+255),b
  1442  001344  11C9               	iorwf	??_TMR0_Initialize& (0+255),w,b
  1443  001346  6FEB               	movwf	_timer0ReloadVal& (0+255),b	;volatile
  1444  001348  51CA               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
  1445  00134A  6FEC               	movwf	(_timer0ReloadVal+1)& (0+255),b	;volatile
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;tmr0.c: 83: INTCONbits.TMR0IF = 0;
  1449  00134C  94F2               	bcf	intcon,2,c	;volatile
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;tmr0.c: 86: INTCONbits.TMR0IE = 1;
  1453  00134E  8AF2               	bsf	intcon,5,c	;volatile
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;tmr0.c: 92: TMR0_StartTimer();
  1457  001350  EFAB  F00A         	goto	_TMR0_StartTimer	;wreg free
  1458  001354                     __end_of_TMR0_Initialize:
  1459                           	opt stack 0
  1460                           tosu	equ	0xFFF
  1461                           tosh	equ	0xFFE
  1462                           tosl	equ	0xFFD
  1463                           pclath	equ	0xFFA
  1464                           tblptru	equ	0xFF8
  1465                           tblptrh	equ	0xFF7
  1466                           tblptrl	equ	0xFF6
  1467                           tablat	equ	0xFF5
  1468                           prodh	equ	0xFF4
  1469                           prodl	equ	0xFF3
  1470                           intcon	equ	0xFF2
  1471                           intcon2	equ	0xFF1
  1472                           postinc0	equ	0xFEE
  1473                           wreg	equ	0xFE8
  1474                           indf1	equ	0xFE7
  1475                           postdec1	equ	0xFE5
  1476                           fsr1h	equ	0xFE2
  1477                           fsr1l	equ	0xFE1
  1478                           indf2	equ	0xFDF
  1479                           postinc2	equ	0xFDE
  1480                           plusw2	equ	0xFDB
  1481                           fsr2h	equ	0xFDA
  1482                           fsr2l	equ	0xFD9
  1483                           status	equ	0xFD8
  1484                           
  1485 ;; *************** function _TMR0_StartTimer *****************
  1486 ;; Defined at:
  1487 ;;		line 95 in file "mcc_generated_files/tmr0.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;		None
  1490 ;; Auto vars:     Size  Location     Type
  1491 ;;		None
  1492 ;; Return value:  Size  Location     Type
  1493 ;;                  1    wreg      void 
  1494 ;; Registers used:
  1495 ;;		None
  1496 ;; Tracked objects:
  1497 ;;		On entry : 3F/0
  1498 ;;		On exit  : 0/0
  1499 ;;		Unchanged: 0/0
  1500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1501 ;;      Params:         0       0       0       0       0       0       0
  1502 ;;      Locals:         0       0       0       0       0       0       0
  1503 ;;      Temps:          0       0       0       0       0       0       0
  1504 ;;      Totals:         0       0       0       0       0       0       0
  1505 ;;Total ram usage:        0 bytes
  1506 ;; Hardware stack levels used:    1
  1507 ;; Hardware stack levels required when called:    5
  1508 ;; This function calls:
  1509 ;;		Nothing
  1510 ;; This function is called by:
  1511 ;;		_TMR0_Initialize
  1512 ;; This function uses a non-reentrant model
  1513 ;;
  1514                           
  1515                           	psect	text5
  1516  001556                     __ptext5:
  1517                           	opt stack 0
  1518  001556                     _TMR0_StartTimer:
  1519                           	opt stack 23
  1520                           
  1521                           ;tmr0.c: 98: T0CONbits.TMR0ON = 1;
  1522                           
  1523                           ;incstack = 0
  1524  001556  8ED5               	bsf	4053,7,c	;volatile
  1525  001558  0012               	return		;funcret
  1526  00155A                     __end_of_TMR0_StartTimer:
  1527                           	opt stack 0
  1528                           tosu	equ	0xFFF
  1529                           tosh	equ	0xFFE
  1530                           tosl	equ	0xFFD
  1531                           pclath	equ	0xFFA
  1532                           tblptru	equ	0xFF8
  1533                           tblptrh	equ	0xFF7
  1534                           tblptrl	equ	0xFF6
  1535                           tablat	equ	0xFF5
  1536                           prodh	equ	0xFF4
  1537                           prodl	equ	0xFF3
  1538                           intcon	equ	0xFF2
  1539                           intcon2	equ	0xFF1
  1540                           postinc0	equ	0xFEE
  1541                           wreg	equ	0xFE8
  1542                           indf1	equ	0xFE7
  1543                           postdec1	equ	0xFE5
  1544                           fsr1h	equ	0xFE2
  1545                           fsr1l	equ	0xFE1
  1546                           indf2	equ	0xFDF
  1547                           postinc2	equ	0xFDE
  1548                           plusw2	equ	0xFDB
  1549                           fsr2h	equ	0xFDA
  1550                           fsr2l	equ	0xFD9
  1551                           status	equ	0xFD8
  1552                           
  1553 ;; *************** function _PIN_MANAGER_Initialize *****************
  1554 ;; Defined at:
  1555 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  1556 ;; Parameters:    Size  Location     Type
  1557 ;;		None
  1558 ;; Auto vars:     Size  Location     Type
  1559 ;;		None
  1560 ;; Return value:  Size  Location     Type
  1561 ;;                  1    wreg      void 
  1562 ;; Registers used:
  1563 ;;		wreg, status,2
  1564 ;; Tracked objects:
  1565 ;;		On entry : 0/0
  1566 ;;		On exit  : 3F/F
  1567 ;;		Unchanged: 0/0
  1568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1569 ;;      Params:         0       0       0       0       0       0       0
  1570 ;;      Locals:         0       0       0       0       0       0       0
  1571 ;;      Temps:          0       0       0       0       0       0       0
  1572 ;;      Totals:         0       0       0       0       0       0       0
  1573 ;;Total ram usage:        0 bytes
  1574 ;; Hardware stack levels used:    1
  1575 ;; Hardware stack levels required when called:    5
  1576 ;; This function calls:
  1577 ;;		Nothing
  1578 ;; This function is called by:
  1579 ;;		_SYSTEM_Initialize
  1580 ;; This function uses a non-reentrant model
  1581 ;;
  1582                           
  1583                           	psect	text6
  1584  0013FC                     __ptext6:
  1585                           	opt stack 0
  1586  0013FC                     _PIN_MANAGER_Initialize:
  1587                           	opt stack 24
  1588                           
  1589                           ;pin_manager.c: 56: LATA = 0x00;
  1590                           
  1591                           ;incstack = 0
  1592  0013FC  6A89               	clrf	3977,c	;volatile
  1593                           
  1594                           ;pin_manager.c: 57: LATB = 0x65;
  1595  0013FE  0E65               	movlw	101
  1596  001400  6E8A               	movwf	3978,c	;volatile
  1597                           
  1598                           ;pin_manager.c: 58: LATC = 0x40;
  1599  001402  0E40               	movlw	64
  1600  001404  6E8B               	movwf	3979,c	;volatile
  1601                           
  1602                           ;pin_manager.c: 63: TRISA = 0x23;
  1603  001406  0E23               	movlw	35
  1604  001408  6E92               	movwf	3986,c	;volatile
  1605                           
  1606                           ;pin_manager.c: 64: TRISB = 0x98;
  1607  00140A  0E98               	movlw	152
  1608  00140C  6E93               	movwf	3987,c	;volatile
  1609                           
  1610                           ;pin_manager.c: 65: TRISC = 0x98;
  1611  00140E  6E94               	movwf	3988,c	;volatile
  1612                           
  1613                           ;pin_manager.c: 70: ANSELC = 0x00;
  1614  001410  010F               	movlb	15	; () banked
  1615  001412  6B3A               	clrf	58,b	;volatile
  1616                           
  1617                           ; BSR set to: 15
  1618                           ;pin_manager.c: 71: ANSELB = 0x00;
  1619  001414  6B39               	clrf	57,b	;volatile
  1620                           
  1621                           ;pin_manager.c: 72: ANSELA = 0x23;
  1622  001416  0E23               	movlw	35
  1623  001418  6F38               	movwf	56,b	;volatile
  1624                           
  1625                           ; BSR set to: 15
  1626                           ;pin_manager.c: 77: WPUB = 0x00;
  1627  00141A  6A61               	clrf	3937,c	;volatile
  1628                           
  1629                           ; BSR set to: 15
  1630                           ;pin_manager.c: 78: INTCON2bits.nRBPU = 0;
  1631  00141C  9EF1               	bcf	intcon2,7,c	;volatile
  1632                           
  1633                           ; BSR set to: 15
  1634  00141E  0012               	return		;funcret
  1635  001420                     __end_of_PIN_MANAGER_Initialize:
  1636                           	opt stack 0
  1637                           tosu	equ	0xFFF
  1638                           tosh	equ	0xFFE
  1639                           tosl	equ	0xFFD
  1640                           pclath	equ	0xFFA
  1641                           tblptru	equ	0xFF8
  1642                           tblptrh	equ	0xFF7
  1643                           tblptrl	equ	0xFF6
  1644                           tablat	equ	0xFF5
  1645                           prodh	equ	0xFF4
  1646                           prodl	equ	0xFF3
  1647                           intcon	equ	0xFF2
  1648                           intcon2	equ	0xFF1
  1649                           postinc0	equ	0xFEE
  1650                           wreg	equ	0xFE8
  1651                           indf1	equ	0xFE7
  1652                           postdec1	equ	0xFE5
  1653                           fsr1h	equ	0xFE2
  1654                           fsr1l	equ	0xFE1
  1655                           indf2	equ	0xFDF
  1656                           postinc2	equ	0xFDE
  1657                           plusw2	equ	0xFDB
  1658                           fsr2h	equ	0xFDA
  1659                           fsr2l	equ	0xFD9
  1660                           status	equ	0xFD8
  1661                           
  1662 ;; *************** function _OSCILLATOR_Initialize *****************
  1663 ;; Defined at:
  1664 ;;		line 117 in file "mcc_generated_files/mcc.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;		None
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;		None
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      void 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2
  1673 ;; Tracked objects:
  1674 ;;		On entry : 3F/F
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1678 ;;      Params:         0       0       0       0       0       0       0
  1679 ;;      Locals:         0       0       0       0       0       0       0
  1680 ;;      Temps:          0       0       0       0       0       0       0
  1681 ;;      Totals:         0       0       0       0       0       0       0
  1682 ;;Total ram usage:        0 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    5
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_SYSTEM_Initialize
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text7
  1693  0014F6                     __ptext7:
  1694                           	opt stack 0
  1695  0014F6                     _OSCILLATOR_Initialize:
  1696                           	opt stack 24
  1697                           
  1698                           ;mcc.c: 120: OSCCON = 0x50;
  1699                           
  1700                           ; BSR set to: 15
  1701                           ;incstack = 0
  1702  0014F6  0E50               	movlw	80
  1703  0014F8  6ED3               	movwf	4051,c	;volatile
  1704                           
  1705                           ;mcc.c: 122: OSCCON2 = 0x04;
  1706  0014FA  0E04               	movlw	4
  1707  0014FC  6ED2               	movwf	4050,c	;volatile
  1708                           
  1709                           ;mcc.c: 124: OSCTUNE = 0x80;
  1710  0014FE  0E80               	movlw	128
  1711  001500  6E9B               	movwf	3995,c	;volatile
  1712  001502  0C80               	retlw	128	;funcret
  1713  001504                     __end_of_OSCILLATOR_Initialize:
  1714                           	opt stack 0
  1715                           tosu	equ	0xFFF
  1716                           tosh	equ	0xFFE
  1717                           tosl	equ	0xFFD
  1718                           pclath	equ	0xFFA
  1719                           tblptru	equ	0xFF8
  1720                           tblptrh	equ	0xFF7
  1721                           tblptrl	equ	0xFF6
  1722                           tablat	equ	0xFF5
  1723                           prodh	equ	0xFF4
  1724                           prodl	equ	0xFF3
  1725                           intcon	equ	0xFF2
  1726                           intcon2	equ	0xFF1
  1727                           postinc0	equ	0xFEE
  1728                           wreg	equ	0xFE8
  1729                           indf1	equ	0xFE7
  1730                           postdec1	equ	0xFE5
  1731                           fsr1h	equ	0xFE2
  1732                           fsr1l	equ	0xFE1
  1733                           indf2	equ	0xFDF
  1734                           postinc2	equ	0xFDE
  1735                           plusw2	equ	0xFDB
  1736                           fsr2h	equ	0xFDA
  1737                           fsr2l	equ	0xFD9
  1738                           status	equ	0xFD8
  1739                           
  1740 ;; *************** function _INTERRUPT_Initialize *****************
  1741 ;; Defined at:
  1742 ;;		line 56 in file "mcc_generated_files/interrupt_manager.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;		None
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;		None
  1747 ;; Return value:  Size  Location     Type
  1748 ;;                  1    wreg      void 
  1749 ;; Registers used:
  1750 ;;		None
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1756 ;;      Params:         0       0       0       0       0       0       0
  1757 ;;      Locals:         0       0       0       0       0       0       0
  1758 ;;      Temps:          0       0       0       0       0       0       0
  1759 ;;      Totals:         0       0       0       0       0       0       0
  1760 ;;Total ram usage:        0 bytes
  1761 ;; Hardware stack levels used:    1
  1762 ;; Hardware stack levels required when called:    5
  1763 ;; This function calls:
  1764 ;;		Nothing
  1765 ;; This function is called by:
  1766 ;;		_SYSTEM_Initialize
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           	psect	text8
  1771  00155A                     __ptext8:
  1772                           	opt stack 0
  1773  00155A                     _INTERRUPT_Initialize:
  1774                           	opt stack 24
  1775                           
  1776                           ;interrupt_manager.c: 59: RCONbits.IPEN = 0;
  1777                           
  1778                           ;incstack = 0
  1779  00155A  9ED0               	bcf	4048,7,c	;volatile
  1780  00155C  0012               	return		;funcret
  1781  00155E                     __end_of_INTERRUPT_Initialize:
  1782                           	opt stack 0
  1783                           tosu	equ	0xFFF
  1784                           tosh	equ	0xFFE
  1785                           tosl	equ	0xFFD
  1786                           pclath	equ	0xFFA
  1787                           tblptru	equ	0xFF8
  1788                           tblptrh	equ	0xFF7
  1789                           tblptrl	equ	0xFF6
  1790                           tablat	equ	0xFF5
  1791                           prodh	equ	0xFF4
  1792                           prodl	equ	0xFF3
  1793                           intcon	equ	0xFF2
  1794                           intcon2	equ	0xFF1
  1795                           postinc0	equ	0xFEE
  1796                           wreg	equ	0xFE8
  1797                           indf1	equ	0xFE7
  1798                           postdec1	equ	0xFE5
  1799                           fsr1h	equ	0xFE2
  1800                           fsr1l	equ	0xFE1
  1801                           indf2	equ	0xFDF
  1802                           postinc2	equ	0xFDE
  1803                           plusw2	equ	0xFDB
  1804                           fsr2h	equ	0xFDA
  1805                           fsr2l	equ	0xFD9
  1806                           status	equ	0xFD8
  1807                           
  1808 ;; *************** function _ADC_Initialize *****************
  1809 ;; Defined at:
  1810 ;;		line 59 in file "mcc_generated_files/adc.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;		None
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;		None
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  1    wreg      void 
  1817 ;; Registers used:
  1818 ;;		None
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/F
  1821 ;;		On exit  : 3F/F
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1824 ;;      Params:         0       0       0       0       0       0       0
  1825 ;;      Locals:         0       0       0       0       0       0       0
  1826 ;;      Temps:          0       0       0       0       0       0       0
  1827 ;;      Totals:         0       0       0       0       0       0       0
  1828 ;;Total ram usage:        0 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; Hardware stack levels required when called:    5
  1831 ;; This function calls:
  1832 ;;		Nothing
  1833 ;; This function is called by:
  1834 ;;		_SYSTEM_Initialize
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838                           	psect	text9
  1839  001546                     __ptext9:
  1840                           	opt stack 0
  1841  001546                     _ADC_Initialize:
  1842                           	opt stack 24
  1843                           
  1844                           ;adc.c: 62: PMD2bits.ADCMD = 1;
  1845                           
  1846                           ;incstack = 0
  1847  001546  010F               	movlb	15	; () banked
  1848  001548  813D               	bsf	61,0,b	;volatile
  1849                           
  1850                           ; BSR set to: 15
  1851  00154A  0012               	return		;funcret
  1852  00154C                     __end_of_ADC_Initialize:
  1853                           	opt stack 0
  1854                           tosu	equ	0xFFF
  1855                           tosh	equ	0xFFE
  1856                           tosl	equ	0xFFD
  1857                           pclath	equ	0xFFA
  1858                           tblptru	equ	0xFF8
  1859                           tblptrh	equ	0xFF7
  1860                           tblptrl	equ	0xFF6
  1861                           tablat	equ	0xFF5
  1862                           prodh	equ	0xFF4
  1863                           prodl	equ	0xFF3
  1864                           intcon	equ	0xFF2
  1865                           intcon2	equ	0xFF1
  1866                           postinc0	equ	0xFEE
  1867                           wreg	equ	0xFE8
  1868                           indf1	equ	0xFE7
  1869                           postdec1	equ	0xFE5
  1870                           fsr1h	equ	0xFE2
  1871                           fsr1l	equ	0xFE1
  1872                           indf2	equ	0xFDF
  1873                           postinc2	equ	0xFDE
  1874                           plusw2	equ	0xFDB
  1875                           fsr2h	equ	0xFDA
  1876                           fsr2l	equ	0xFD9
  1877                           status	equ	0xFD8
  1878                           
  1879 ;; *************** function _ProtocolTask *****************
  1880 ;; Defined at:
  1881 ;;		line 253 in file "sfxProtocoll.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;		None
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;		None
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  1    wreg      enum E6679
  1888 ;; Registers used:
  1889 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 3F/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1895 ;;      Params:         0       0       0       0       0       0       0
  1896 ;;      Locals:         0       0       0       0       0       0       0
  1897 ;;      Temps:          0       0       0       0       0       0       0
  1898 ;;      Totals:         0       0       0       0       0       0       0
  1899 ;;Total ram usage:        0 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:   10
  1902 ;; This function calls:
  1903 ;;		_ProtocolSetNextCommTime
  1904 ;;		_ProtocolSetNextMeasTime
  1905 ;;		_ProtocolTaskBuildFrame
  1906 ;;		_ProtocolTaskExecute
  1907 ;;		_ProtocolTaskPowerDown
  1908 ;;		_SigfoxTaskNewTask
  1909 ;;		_powerTaskNewTask
  1910 ;; This function is called by:
  1911 ;;		_main
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text10
  1916  000B32                     __ptext10:
  1917                           	opt stack 0
  1918  000B32                     _ProtocolTask:
  1919                           	opt stack 20
  1920                           
  1921                           ;sfxProtocoll.c: 254: switch(PROT_STATE){
  1922                           
  1923                           ; BSR set to: 15
  1924                           ;incstack = 0
  1925  000B32  D050               	goto	l3457
  1926  000B34                     l3389:
  1927                           
  1928                           ; BSR set to: 0
  1929                           ;sfxProtocoll.c: 256: if(ProtocolSetNextMeasTime()){
  1930  000B34  ECE4  F006         	call	_ProtocolSetNextMeasTime	;wreg free
  1931  000B38  0900               	iorlw	0
  1932  000B3A  E005               	bz	l3399
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;sfxProtocoll.c: 257: protVarMeasurementTimer = 0;
  1936  000B3C  6B64               	clrf	_protVarMeasurementTimer& (0+255),b
  1937  000B3E  6B65               	clrf	(_protVarMeasurementTimer+1)& (0+255),b
  1938  000B40  6B66               	clrf	(_protVarMeasurementTimer+2)& (0+255),b
  1939  000B42  6B67               	clrf	(_protVarMeasurementTimer+3)& (0+255),b
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;sfxProtocoll.c: 258: PROT_STATE = POWERING_TASK;
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;sfxProtocoll.c: 259: return(TASK_ON_COURSE);
  1946  000B44  D05A               	goto	PL36	;call to abstracted procedure
  1947  000B46                     l3399:
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;sfxProtocoll.c: 260: }
  1951                           ;sfxProtocoll.c: 261: if(ProtocolSetNextCommTime()){
  1952  000B46  EC14  F009         	call	_ProtocolSetNextCommTime	;wreg free
  1953  000B4A  0900               	iorlw	0
  1954  000B4C  B4D8               	btfsc	status,2,c
  1955  000B4E  0C00               	retlw	0
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;sfxProtocoll.c: 262: protVarCommunicationTimer = 0;
  1959  000B50  6B60               	clrf	_protVarCommunicationTimer& (0+255),b
  1960  000B52  6B61               	clrf	(_protVarCommunicationTimer+1)& (0+255),b
  1961  000B54  6B62               	clrf	(_protVarCommunicationTimer+2)& (0+255),b
  1962  000B56  6B63               	clrf	(_protVarCommunicationTimer+3)& (0+255),b
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;sfxProtocoll.c: 263: PROT_STATE = POWERING_TASK;
  1966                           
  1967                           ; BSR set to: 0
  1968                           ;sfxProtocoll.c: 264: return(TASK_ON_COURSE);
  1969  000B58  D050               	goto	PL36	;call to abstracted procedure
  1970  000B5A                     l3413:
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;sfxProtocoll.c: 268: if(ProtocolSetNextMeasTime()){
  1974  000B5A  ECE4  F006         	call	_ProtocolSetNextMeasTime	;wreg free
  1975  000B5E  0900               	iorlw	0
  1976  000B60  E00C               	bz	l3425
  1977                           
  1978                           ; BSR set to: 0
  1979                           ;sfxProtocoll.c: 269: powerTaskNewTask(PWR_CMD_INITIALIZE);
  1980  000B62  0E00               	movlw	0
  1981  000B64  ECBA  F008         	call	_powerTaskNewTask
  1982                           
  1983                           ;sfxProtocoll.c: 270: powerTaskNewTask(PWR_CMD_VDD_EN);
  1984  000B68  0E01               	movlw	1
  1985  000B6A  ECBA  F008         	call	_powerTaskNewTask
  1986                           
  1987                           ; BSR set to: 0
  1988                           ;sfxProtocoll.c: 271: ProtocolTaskExecute(powerTask,50);
  1989  000B6E  D83D               	call	PL16	;call to abstracted procedure
  1990  000B70  EC31  F009         	call	_ProtocolTaskExecute	;wreg free
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;sfxProtocoll.c: 272: PROT_STATE = MEASURING_TASK;
  1994  000B74  0E02               	movlw	2
  1995  000B76  6F82               	movwf	_PROT_STATE& (0+255),b
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;sfxProtocoll.c: 273: return(TASK_ON_COURSE);
  1999  000B78  0C01               	retlw	1
  2000  000B7A                     l3425:
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;sfxProtocoll.c: 274: }
  2004                           ;sfxProtocoll.c: 275: if(ProtocolSetNextCommTime()){
  2005  000B7A  EC14  F009         	call	_ProtocolSetNextCommTime	;wreg free
  2006  000B7E  0900               	iorlw	0
  2007  000B80  E010               	bz	l3439
  2008                           
  2009                           ; BSR set to: 0
  2010                           ;sfxProtocoll.c: 276: powerTaskNewTask(PWR_CMD_INITIALIZE);
  2011  000B82  0E00               	movlw	0
  2012  000B84  ECBA  F008         	call	_powerTaskNewTask
  2013                           
  2014                           ;sfxProtocoll.c: 281: powerTaskNewTask(PWR_CMD_VDD_EN);
  2015  000B88  0E01               	movlw	1
  2016  000B8A  ECBA  F008         	call	_powerTaskNewTask
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;sfxProtocoll.c: 283: ProtocolTaskExecute(powerTask,50);
  2020  000B8E  D82D               	call	PL16	;call to abstracted procedure
  2021  000B90  EC31  F009         	call	_ProtocolTaskExecute	;wreg free
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;sfxProtocoll.c: 284: ProtocolTaskBuildFrame(TIMER1_EV);
  2025  000B94  0E01               	movlw	1
  2026  000B96  EC2C  F003         	call	_ProtocolTaskBuildFrame
  2027                           
  2028                           ;sfxProtocoll.c: 285: PROT_STATE = COMMUNICATING_TASK;
  2029  000B9A  0E03               	movlw	3
  2030  000B9C  0100               	movlb	0	; () banked
  2031  000B9E  6F82               	movwf	_PROT_STATE& (0+255),b
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;sfxProtocoll.c: 286: return(TASK_ON_COURSE);
  2035  000BA0  0C01               	retlw	1
  2036  000BA2                     l3439:
  2037                           
  2038                           ; BSR set to: 0
  2039                           ;sfxProtocoll.c: 287: }
  2040                           ;sfxProtocoll.c: 288: ProtocolTaskPowerDown();
  2041  000BA2  EC90  F00A         	call	_ProtocolTaskPowerDown	;wreg free
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;sfxProtocoll.c: 289: return(TASK_NO_SENSOR_FOUND);
  2045  000BA6  0C00               	retlw	0
  2046  000BA8                     l3445:
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;sfxProtocoll.c: 302: SigfoxTaskNewTask(SFX_CMD_INITIALIZE);
  2050  000BA8  0E00               	movlw	0
  2051  000BAA  EC75  F008         	call	_SigfoxTaskNewTask
  2052                           
  2053                           ;sfxProtocoll.c: 303: SigfoxTaskNewTask(SFX_CMD_SEND_MSG);
  2054  000BAE  0E01               	movlw	1
  2055  000BB0  EC75  F008         	call	_SigfoxTaskNewTask
  2056                           
  2057                           ;sfxProtocoll.c: 305: SigfoxTaskNewTask(SFX_CMD_PWR_DOWN);
  2058  000BB4  0E05               	movlw	5
  2059  000BB6  EC75  F008         	call	_SigfoxTaskNewTask
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;sfxProtocoll.c: 306: ProtocolTaskExecute(SigfoxTask,60);
  2063  000BBA  0EF0               	movlw	low _SigfoxTask
  2064  000BBC  6FE0               	movwf	ProtocolTaskExecute@taskPointer& (0+255),b
  2065  000BBE  0E07               	movlw	high _SigfoxTask
  2066  000BC0  6FE1               	movwf	(ProtocolTaskExecute@taskPointer+1)& (0+255),b
  2067  000BC2  6BE3               	clrf	(ProtocolTaskExecute@taskTimeOut+1)& (0+255),b
  2068  000BC4  0E3C               	movlw	60
  2069  000BC6  6FE2               	movwf	ProtocolTaskExecute@taskTimeOut& (0+255),b
  2070  000BC8  EC31  F009         	call	_ProtocolTaskExecute	;wreg free
  2071                           
  2072                           ;sfxProtocoll.c: 308: break;
  2073  000BCC  D016               	goto	PL36
  2074  000BCE                     l3449:
  2075                           
  2076                           ; BSR set to: 0
  2077                           ;sfxProtocoll.c: 310: ProtocolTaskPowerDown();
  2078  000BCE  EC90  F00A         	call	_ProtocolTaskPowerDown	;wreg free
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;sfxProtocoll.c: 311: return(TASK_NO_SENSOR_FOUND);
  2082  000BD2  0C00               	retlw	0
  2083  000BD4                     l3457:
  2084  000BD4  0100               	movlb	0	; () banked
  2085  000BD6  5182               	movf	_PROT_STATE& (0+255),w,b
  2086                           
  2087                           ; Switch size 1, requested type "space"
  2088                           ; Number of cases is 4, Range of values is 0 to 3
  2089                           ; switch strategies available:
  2090                           ; Name         Instructions Cycles
  2091                           ; simple_byte           13     7 (average)
  2092                           ;	Chosen strategy is simple_byte
  2093  000BD8  E0AD               	bz	l3389
  2094  000BDA  0A01               	xorlw	1	; case 1
  2095  000BDC  E0BE               	bz	l3413
  2096  000BDE  0A03               	xorlw	3	; case 2
  2097  000BE0  E00C               	bz	PL36
  2098  000BE2  0A01               	xorlw	1	; case 3
  2099  000BE4  E0E1               	bz	l3445
  2100  000BE6  D7F3               	goto	l3449
  2101  000BE8                     l3459:
  2102                           
  2103                           ; BSR set to: 0
  2104                           ;sfxProtocoll.c: 313: PROT_STATE = POWERING_TASK;
  2105                           
  2106                           ; BSR set to: 0
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;sfxProtocoll.c: 314: return(TASK_ON_COURSE);
  2110  000BE8  D008               	goto	PL36	;call to abstracted procedure
  2111  000BEA                     __end_of_ProtocolTask:
  2112                           	opt stack 0
  2113  000BEA                     PL16:
  2114                           	opt stack 20
  2115  000BEA  0E9C               	movlw	low _powerTask
  2116  000BEC  6FE0               	movwf	ProtocolTaskExecute@taskPointer& (0+255),b
  2117  000BEE  0E0C               	movlw	high _powerTask
  2118  000BF0  6FE1               	movwf	(ProtocolTaskExecute@taskPointer+1)& (0+255),b
  2119  000BF2  6BE3               	clrf	(ProtocolTaskExecute@taskTimeOut+1)& (0+255),b
  2120  000BF4  0E32               	movlw	50
  2121  000BF6  6FE2               	movwf	ProtocolTaskExecute@taskTimeOut& (0+255),b
  2122  000BF8  0C32               	retlw	50
  2123  000BFA                     __end_ofPL16:
  2124                           	opt stack 0
  2125  000BFA                     PL36:
  2126                           	opt stack 20
  2127  000BFA  0E01               	movlw	1
  2128  000BFC  6F82               	movwf	_PROT_STATE& (0+255),b
  2129  000BFE  0C01               	retlw	1
  2130  000C00                     __end_ofPL36:
  2131                           	opt stack 0
  2132                           tosu	equ	0xFFF
  2133                           tosh	equ	0xFFE
  2134                           tosl	equ	0xFFD
  2135                           pclath	equ	0xFFA
  2136                           tblptru	equ	0xFF8
  2137                           tblptrh	equ	0xFF7
  2138                           tblptrl	equ	0xFF6
  2139                           tablat	equ	0xFF5
  2140                           prodh	equ	0xFF4
  2141                           prodl	equ	0xFF3
  2142                           intcon	equ	0xFF2
  2143                           intcon2	equ	0xFF1
  2144                           postinc0	equ	0xFEE
  2145                           wreg	equ	0xFE8
  2146                           indf1	equ	0xFE7
  2147                           postdec1	equ	0xFE5
  2148                           fsr1h	equ	0xFE2
  2149                           fsr1l	equ	0xFE1
  2150                           indf2	equ	0xFDF
  2151                           postinc2	equ	0xFDE
  2152                           plusw2	equ	0xFDB
  2153                           fsr2h	equ	0xFDA
  2154                           fsr2l	equ	0xFD9
  2155                           status	equ	0xFD8
  2156                           
  2157 ;; *************** function _powerTaskNewTask *****************
  2158 ;; Defined at:
  2159 ;;		line 104 in file "powerTask.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;  command         1    wreg     enum E6686
  2162 ;; Auto vars:     Size  Location     Type
  2163 ;;  command         1    5[BANK0 ] enum E6686
  2164 ;; Return value:  Size  Location     Type
  2165 ;;                  1    wreg      void 
  2166 ;; Registers used:
  2167 ;;		wreg, status,2, status,0, cstack
  2168 ;; Tracked objects:
  2169 ;;		On entry : 3F/0
  2170 ;;		On exit  : 3F/0
  2171 ;;		Unchanged: 0/0
  2172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2173 ;;      Params:         0       0       0       0       0       0       0
  2174 ;;      Locals:         0       1       0       0       0       0       0
  2175 ;;      Temps:          0       0       0       0       0       0       0
  2176 ;;      Totals:         0       1       0       0       0       0       0
  2177 ;;Total ram usage:        1 bytes
  2178 ;; Hardware stack levels used:    1
  2179 ;; Hardware stack levels required when called:    6
  2180 ;; This function calls:
  2181 ;;		_powerTaskPowerDown
  2182 ;; This function is called by:
  2183 ;;		_ProtocolTask
  2184 ;; This function uses a non-reentrant model
  2185 ;;
  2186                           
  2187                           	psect	text11
  2188  001174                     __ptext11:
  2189                           	opt stack 0
  2190  001174                     _powerTaskNewTask:
  2191                           	opt stack 23
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;incstack = 0
  2195                           ;powerTaskNewTask@command stored from wreg
  2196  001174  0100               	movlb	0	; () banked
  2197  001176  6FC9               	movwf	powerTaskNewTask@command& (0+255),b
  2198                           
  2199                           ;powerTask.c: 105: switch(command){
  2200  001178  D007               	goto	l2593
  2201  00117A                     l2583:
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;powerTask.c: 107: pwrScheduledInitTaskFlag = 1;
  2205  00117A  0E01               	movlw	1
  2206  00117C  6F80               	movwf	_pwrScheduledInitTaskFlag& (0+255),b
  2207                           
  2208                           ;powerTask.c: 108: break;
  2209  00117E  0C01               	retlw	1
  2210  001180                     l2585:
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;powerTask.c: 110: pwrScheduledMeasPowerTaskFlag = 1;
  2214                           
  2215                           ;powerTask.c: 111: break;
  2216  001180  D016               	goto	PL42	;call to abstracted procedure
  2217  001182                     l858:
  2218                           
  2219                           ; BSR set to: 0
  2220                           ;powerTask.c: 113: pwrScheduledMeasPowerTaskFlag = 0;
  2221                           
  2222                           ; BSR set to: 0
  2223                           
  2224                           ;powerTask.c: 114: do { LATAbits.LATA6 = 0; } while(0);
  2225  001182  D012               	goto	PL38	;call to abstracted procedure
  2226  001184                     l2587:
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;powerTask.c: 120: pwrScheduledMeasPowerTaskFlag = 1;
  2230                           
  2231                           ;powerTask.c: 122: break;
  2232  001184  D014               	goto	PL42	;call to abstracted procedure
  2233  001186                     l862:
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;powerTask.c: 128: pwrScheduledMeasPowerTaskFlag = 0;
  2237                           
  2238                           ; BSR set to: 0
  2239                           
  2240                           ;powerTask.c: 129: do { LATAbits.LATA6 = 0; } while(0);
  2241  001186  D010               	goto	PL38	;call to abstracted procedure
  2242  001188                     l2593:
  2243  001188  0100               	movlb	0	; () banked
  2244  00118A  51C9               	movf	powerTaskNewTask@command& (0+255),w,b
  2245                           
  2246                           ; Switch size 1, requested type "space"
  2247                           ; Number of cases is 6, Range of values is 0 to 5
  2248                           ; switch strategies available:
  2249                           ; Name         Instructions Cycles
  2250                           ; simple_byte           19    10 (average)
  2251                           ;	Chosen strategy is simple_byte
  2252  00118C  E0F6               	bz	l2583
  2253  00118E  0A01               	xorlw	1	; case 1
  2254  001190  E00E               	bz	PL42
  2255  001192  0A03               	xorlw	3	; case 2
  2256  001194  E009               	bz	PL38
  2257  001196  0A01               	xorlw	1	; case 3
  2258  001198  E00A               	bz	PL42
  2259  00119A  0A07               	xorlw	7	; case 4
  2260  00119C  E005               	bz	PL38
  2261  00119E  0A01               	xorlw	1	; case 5
  2262  0011A0  E102 EF40  F00A    	bz	_powerTaskPowerDown
  2263                           
  2264                           ; BSR set to: 0
  2265  0011A6  0012               	return		;funcret
  2266  0011A8                     __end_of_powerTaskNewTask:
  2267                           	opt stack 0
  2268  0011A8                     PL38:
  2269                           	opt stack 23
  2270  0011A8  6B7F               	clrf	_pwrScheduledMeasPowerTaskFlag& (0+255),b
  2271  0011AA  9C89               	bcf	3977,6,c	;volatile
  2272  0011AC  0012               	return	
  2273  0011AE                     __end_ofPL38:
  2274                           	opt stack 0
  2275  0011AE                     PL42:
  2276                           	opt stack 23
  2277  0011AE  0E01               	movlw	1
  2278  0011B0  6F7F               	movwf	_pwrScheduledMeasPowerTaskFlag& (0+255),b
  2279  0011B2  0C01               	retlw	1
  2280  0011B4                     __end_ofPL42:
  2281                           	opt stack 0
  2282                           tosu	equ	0xFFF
  2283                           tosh	equ	0xFFE
  2284                           tosl	equ	0xFFD
  2285                           pclath	equ	0xFFA
  2286                           tblptru	equ	0xFF8
  2287                           tblptrh	equ	0xFF7
  2288                           tblptrl	equ	0xFF6
  2289                           tablat	equ	0xFF5
  2290                           prodh	equ	0xFF4
  2291                           prodl	equ	0xFF3
  2292                           intcon	equ	0xFF2
  2293                           intcon2	equ	0xFF1
  2294                           postinc0	equ	0xFEE
  2295                           wreg	equ	0xFE8
  2296                           indf1	equ	0xFE7
  2297                           postdec1	equ	0xFE5
  2298                           fsr1h	equ	0xFE2
  2299                           fsr1l	equ	0xFE1
  2300                           indf2	equ	0xFDF
  2301                           postinc2	equ	0xFDE
  2302                           plusw2	equ	0xFDB
  2303                           fsr2h	equ	0xFDA
  2304                           fsr2l	equ	0xFD9
  2305                           status	equ	0xFD8
  2306                           
  2307 ;; *************** function _SigfoxTaskNewTask *****************
  2308 ;; Defined at:
  2309 ;;		line 431 in file "mcc_generated_files/eusart2.c"
  2310 ;; Parameters:    Size  Location     Type
  2311 ;;  command         1    wreg     enum E6708
  2312 ;; Auto vars:     Size  Location     Type
  2313 ;;  command         1    5[BANK0 ] enum E6708
  2314 ;; Return value:  Size  Location     Type
  2315 ;;                  1    wreg      void 
  2316 ;; Registers used:
  2317 ;;		wreg, status,2, status,0
  2318 ;; Tracked objects:
  2319 ;;		On entry : 0/0
  2320 ;;		On exit  : 3F/0
  2321 ;;		Unchanged: 0/0
  2322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2323 ;;      Params:         0       0       0       0       0       0       0
  2324 ;;      Locals:         0       1       0       0       0       0       0
  2325 ;;      Temps:          0       0       0       0       0       0       0
  2326 ;;      Totals:         0       1       0       0       0       0       0
  2327 ;;Total ram usage:        1 bytes
  2328 ;; Hardware stack levels used:    1
  2329 ;; Hardware stack levels required when called:    5
  2330 ;; This function calls:
  2331 ;;		Nothing
  2332 ;; This function is called by:
  2333 ;;		_ProtocolTask
  2334 ;; This function uses a non-reentrant model
  2335 ;;
  2336                           
  2337                           	psect	text12
  2338  0010EA                     __ptext12:
  2339                           	opt stack 0
  2340  0010EA                     _SigfoxTaskNewTask:
  2341                           	opt stack 24
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;incstack = 0
  2345                           ;SigfoxTaskNewTask@command stored from wreg
  2346  0010EA  0100               	movlb	0	; () banked
  2347  0010EC  6FC9               	movwf	SigfoxTaskNewTask@command& (0+255),b
  2348                           
  2349                           ;eusart2.c: 432: switch(command){
  2350  0010EE  D015               	goto	l2419
  2351  0010F0                     l2403:
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;eusart2.c: 434: SigfoxScheduledInitTaskFlag = 1;
  2355  0010F0  0E01               	movlw	1
  2356  0010F2  6F8C               	movwf	_SigfoxScheduledInitTaskFlag& (0+255),b
  2357                           
  2358                           ;eusart2.c: 435: break;
  2359  0010F4  0C01               	retlw	1
  2360  0010F6                     l380:
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;eusart2.c: 438: SigfoxScheduledMsgAckTaskFlag = 0;
  2364  0010F6  6B8E               	clrf	_SigfoxScheduledMsgAckTaskFlag& (0+255),b
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;eusart2.c: 439: SigfoxScheduledMsgTaskFlag = 1;
  2368  0010F8  0E01               	movlw	1
  2369  0010FA  6F8F               	movwf	_SigfoxScheduledMsgTaskFlag& (0+255),b
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;eusart2.c: 440: SigfoxScheduledMsgStaTaskFlag = 0;
  2373  0010FC  6B8B               	clrf	_SigfoxScheduledMsgStaTaskFlag& (0+255),b
  2374                           
  2375                           ;eusart2.c: 441: break;
  2376  0010FE  0012               	return	
  2377  001100                     l381:
  2378                           
  2379                           ; BSR set to: 0
  2380                           ;eusart2.c: 445: SigfoxScheduledMsgTaskFlag = 0;
  2381  001100  6B8F               	clrf	_SigfoxScheduledMsgTaskFlag& (0+255),b
  2382                           
  2383                           ; BSR set to: 0
  2384                           ;eusart2.c: 446: SigfoxScheduledMsgAckTaskFlag = 1;
  2385  001102  0E01               	movlw	1
  2386  001104  6F8E               	movwf	_SigfoxScheduledMsgAckTaskFlag& (0+255),b
  2387                           
  2388                           ; BSR set to: 0
  2389                           ;eusart2.c: 447: SigfoxScheduledMsgStaTaskFlag = 0;
  2390  001106  6B8B               	clrf	_SigfoxScheduledMsgStaTaskFlag& (0+255),b
  2391                           
  2392                           ;eusart2.c: 448: break;
  2393  001108  0012               	return	
  2394  00110A                     l382:
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;eusart2.c: 451: SigfoxScheduledMsgTaskFlag = 0;
  2398  00110A  6B8F               	clrf	_SigfoxScheduledMsgTaskFlag& (0+255),b
  2399                           
  2400                           ;eusart2.c: 452: SigfoxScheduledMsgAckTaskFlag = 0;
  2401  00110C  6B8E               	clrf	_SigfoxScheduledMsgAckTaskFlag& (0+255),b
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;eusart2.c: 453: SigfoxScheduledMsgStaTaskFlag = 1;
  2405  00110E  0E01               	movlw	1
  2406  001110  6F8B               	movwf	_SigfoxScheduledMsgStaTaskFlag& (0+255),b
  2407                           
  2408                           ;eusart2.c: 454: break;
  2409  001112  0C01               	retlw	1
  2410  001114                     l2415:
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;eusart2.c: 457: SigfoxScheduledPwrDownTaskFlag = 1;
  2414  001114  0E01               	movlw	1
  2415  001116  6F8D               	movwf	_SigfoxScheduledPwrDownTaskFlag& (0+255),b
  2416                           
  2417                           ;eusart2.c: 458: break;
  2418  001118  0C01               	retlw	1
  2419  00111A                     l2419:
  2420  00111A  0100               	movlb	0	; () banked
  2421  00111C  51C9               	movf	SigfoxTaskNewTask@command& (0+255),w,b
  2422                           
  2423                           ; Switch size 1, requested type "space"
  2424                           ; Number of cases is 5, Range of values is 0 to 5
  2425                           ; switch strategies available:
  2426                           ; Name         Instructions Cycles
  2427                           ; simple_byte           16     9 (average)
  2428                           ;	Chosen strategy is simple_byte
  2429  00111E  E0E8               	bz	l2403
  2430  001120  0A01               	xorlw	1	; case 1
  2431  001122  E0E9               	bz	l380
  2432  001124  0A03               	xorlw	3	; case 2
  2433  001126  E0EC               	bz	l381
  2434  001128  0A01               	xorlw	1	; case 3
  2435  00112A  E0EF               	bz	l382
  2436  00112C  0A06               	xorlw	6	; case 5
  2437  00112E  E0F2               	bz	l2415
  2438                           
  2439                           ; BSR set to: 0
  2440  001130  0012               	return		;funcret
  2441  001132                     __end_of_SigfoxTaskNewTask:
  2442                           	opt stack 0
  2443                           tosu	equ	0xFFF
  2444                           tosh	equ	0xFFE
  2445                           tosl	equ	0xFFD
  2446                           pclath	equ	0xFFA
  2447                           tblptru	equ	0xFF8
  2448                           tblptrh	equ	0xFF7
  2449                           tblptrl	equ	0xFF6
  2450                           tablat	equ	0xFF5
  2451                           prodh	equ	0xFF4
  2452                           prodl	equ	0xFF3
  2453                           intcon	equ	0xFF2
  2454                           intcon2	equ	0xFF1
  2455                           postinc0	equ	0xFEE
  2456                           wreg	equ	0xFE8
  2457                           indf1	equ	0xFE7
  2458                           postdec1	equ	0xFE5
  2459                           fsr1h	equ	0xFE2
  2460                           fsr1l	equ	0xFE1
  2461                           indf2	equ	0xFDF
  2462                           postinc2	equ	0xFDE
  2463                           plusw2	equ	0xFDB
  2464                           fsr2h	equ	0xFDA
  2465                           fsr2l	equ	0xFD9
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function _ProtocolTaskPowerDown *****************
  2469 ;; Defined at:
  2470 ;;		line 243 in file "sfxProtocoll.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;		None
  2473 ;; Auto vars:     Size  Location     Type
  2474 ;;		None
  2475 ;; Return value:  Size  Location     Type
  2476 ;;                  1    wreg      void 
  2477 ;; Registers used:
  2478 ;;		cstack
  2479 ;; Tracked objects:
  2480 ;;		On entry : 0/0
  2481 ;;		On exit  : 3F/0
  2482 ;;		Unchanged: 0/0
  2483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2484 ;;      Params:         0       0       0       0       0       0       0
  2485 ;;      Locals:         0       0       0       0       0       0       0
  2486 ;;      Temps:          0       0       0       0       0       0       0
  2487 ;;      Totals:         0       0       0       0       0       0       0
  2488 ;;Total ram usage:        0 bytes
  2489 ;; Hardware stack levels used:    1
  2490 ;; Hardware stack levels required when called:    6
  2491 ;; This function calls:
  2492 ;;		_SigfoxTaskPowerDown
  2493 ;;		_powerTaskPowerDown
  2494 ;; This function is called by:
  2495 ;;		_main
  2496 ;;		_ProtocolTask
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           	psect	text13
  2501  001520                     __ptext13:
  2502                           	opt stack 0
  2503  001520                     _ProtocolTaskPowerDown:
  2504                           	opt stack 24
  2505                           
  2506                           ;sfxProtocoll.c: 244: PROT_STATE = MAIN_TASK_PARKED;
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;incstack = 0
  2510  001520  0100               	movlb	0	; () banked
  2511  001522  6B82               	clrf	_PROT_STATE& (0+255),b
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;sfxProtocoll.c: 249: SigfoxTaskPowerDown();
  2515  001524  EC4B  F00A         	call	_SigfoxTaskPowerDown	;wreg free
  2516                           
  2517                           ;sfxProtocoll.c: 251: powerTaskPowerDown();
  2518  001528  EF40  F00A         	goto	_powerTaskPowerDown	;wreg free
  2519  00152C                     __end_of_ProtocolTaskPowerDown:
  2520                           	opt stack 0
  2521                           tosu	equ	0xFFF
  2522                           tosh	equ	0xFFE
  2523                           tosl	equ	0xFFD
  2524                           pclath	equ	0xFFA
  2525                           tblptru	equ	0xFF8
  2526                           tblptrh	equ	0xFF7
  2527                           tblptrl	equ	0xFF6
  2528                           tablat	equ	0xFF5
  2529                           prodh	equ	0xFF4
  2530                           prodl	equ	0xFF3
  2531                           intcon	equ	0xFF2
  2532                           intcon2	equ	0xFF1
  2533                           postinc0	equ	0xFEE
  2534                           wreg	equ	0xFE8
  2535                           indf1	equ	0xFE7
  2536                           postdec1	equ	0xFE5
  2537                           fsr1h	equ	0xFE2
  2538                           fsr1l	equ	0xFE1
  2539                           indf2	equ	0xFDF
  2540                           postinc2	equ	0xFDE
  2541                           plusw2	equ	0xFDB
  2542                           fsr2h	equ	0xFDA
  2543                           fsr2l	equ	0xFD9
  2544                           status	equ	0xFD8
  2545                           
  2546 ;; *************** function _ProtocolTaskExecute *****************
  2547 ;; Defined at:
  2548 ;;		line 230 in file "sfxProtocoll.c"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;  taskPointer     2   28[BANK0 ] PTR FTN()enum E6679
  2551 ;;		 -> powerTask(1), SigfoxTask(1), 
  2552 ;;  taskTimeOut     2   30[BANK0 ] unsigned int 
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;  timeOut         2   32[BANK0 ] unsigned int 
  2555 ;;  taskResult      1   34[BANK0 ] enum E6679
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      enum E6679
  2558 ;; Registers used:
  2559 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : 3F/0
  2562 ;;		On exit  : 3F/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2565 ;;      Params:         0       4       0       0       0       0       0
  2566 ;;      Locals:         0       3       0       0       0       0       0
  2567 ;;      Temps:          0       0       0       0       0       0       0
  2568 ;;      Totals:         0       7       0       0       0       0       0
  2569 ;;Total ram usage:        7 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    9
  2572 ;; This function calls:
  2573 ;;		_SigfoxTask
  2574 ;;		_powerTask
  2575 ;; This function is called by:
  2576 ;;		_ProtocolTask
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           	psect	text14
  2581  001262                     __ptext14:
  2582                           	opt stack 0
  2583  001262                     _ProtocolTaskExecute:
  2584                           	opt stack 20
  2585                           
  2586                           ;sfxProtocoll.c: 231: taskResult_t taskResult;
  2587                           ;sfxProtocoll.c: 232: unsigned int timeOut;
  2588                           ;sfxProtocoll.c: 234: timeOut = taskTimeOut;
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;incstack = 0
  2592  001262  C0E2  F0E4         	movff	ProtocolTaskExecute@taskTimeOut,ProtocolTaskExecute@timeOut
  2593  001266  C0E3  F0E5         	movff	ProtocolTaskExecute@taskTimeOut+1,ProtocolTaskExecute@timeOut+1
  2594                           
  2595                           ;sfxProtocoll.c: 235: while(timeOut){
  2596  00126A  D010               	goto	l3345
  2597  00126C                     l3337:
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;sfxProtocoll.c: 236: taskResult = taskPointer();
  2601  00126C  D801               	call	u1938
  2602  00126E  D009               	goto	u1939
  2603  001270                     u1938:
  2604  001270  0005               	push	
  2605  001272  6EFA               	movwf	pclath,c
  2606  001274  51E0               	movf	ProtocolTaskExecute@taskPointer& (0+255),w,b
  2607  001276  6EFD               	movwf	tosl,c
  2608  001278  51E1               	movf	(ProtocolTaskExecute@taskPointer+1)& (0+255),w,b
  2609  00127A  6EFE               	movwf	tosh,c
  2610  00127C  6AFF               	clrf	tosu,c
  2611  00127E  50FA               	movf	pclath,w,c
  2612  001280  0012               	return		;indir
  2613  001282                     u1939:
  2614  001282  6FE6               	movwf	ProtocolTaskExecute@taskResult& (0+255),b
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;sfxProtocoll.c: 237: if(taskResult != TASK_ON_COURSE){
  2618  001284  05E6               	decf	ProtocolTaskExecute@taskResult& (0+255),w,b
  2619  001286  E002               	bz	l3345
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;sfxProtocoll.c: 238: return(taskResult);
  2623  001288  51E6               	movf	ProtocolTaskExecute@taskResult& (0+255),w,b
  2624  00128A  0012               	return	
  2625  00128C                     l3345:
  2626  00128C  0100               	movlb	0	; () banked
  2627  00128E  51E4               	movf	ProtocolTaskExecute@timeOut& (0+255),w,b
  2628  001290  11E5               	iorwf	(ProtocolTaskExecute@timeOut+1)& (0+255),w,b
  2629  001292  E1EC               	bnz	l3337
  2630                           
  2631                           ; BSR set to: 0
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;sfxProtocoll.c: 239: }
  2635                           ;sfxProtocoll.c: 240: }
  2636                           ;sfxProtocoll.c: 241: return(TASK_TO_ERR);
  2637  001294  0C03               	retlw	3	;funcret
  2638  001296                     __end_of_ProtocolTaskExecute:
  2639                           	opt stack 0
  2640                           tosu	equ	0xFFF
  2641                           tosh	equ	0xFFE
  2642                           tosl	equ	0xFFD
  2643                           pclath	equ	0xFFA
  2644                           tblptru	equ	0xFF8
  2645                           tblptrh	equ	0xFF7
  2646                           tblptrl	equ	0xFF6
  2647                           tablat	equ	0xFF5
  2648                           prodh	equ	0xFF4
  2649                           prodl	equ	0xFF3
  2650                           intcon	equ	0xFF2
  2651                           intcon2	equ	0xFF1
  2652                           postinc0	equ	0xFEE
  2653                           wreg	equ	0xFE8
  2654                           indf1	equ	0xFE7
  2655                           postdec1	equ	0xFE5
  2656                           fsr1h	equ	0xFE2
  2657                           fsr1l	equ	0xFE1
  2658                           indf2	equ	0xFDF
  2659                           postinc2	equ	0xFDE
  2660                           plusw2	equ	0xFDB
  2661                           fsr2h	equ	0xFDA
  2662                           fsr2l	equ	0xFD9
  2663                           status	equ	0xFD8
  2664                           
  2665 ;; *************** function _SigfoxTask *****************
  2666 ;; Defined at:
  2667 ;;		line 314 in file "mcc_generated_files/eusart2.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  sigfoxInitCo    3   23[BANK0 ] const unsigned char [3]
  2672 ;;  SigfoxInitCo    2   26[BANK0 ] PTR const unsigned char 
  2673 ;;		 -> SigfoxTask@sigfoxInitCommandsROMList(3), 
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  1    wreg      enum E6663
  2676 ;; Registers used:
  2677 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2678 ;; Tracked objects:
  2679 ;;		On entry : 3F/0
  2680 ;;		On exit  : 3F/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2683 ;;      Params:         0       0       0       0       0       0       0
  2684 ;;      Locals:         0       5       0       0       0       0       0
  2685 ;;      Temps:          0       1       0       0       0       0       0
  2686 ;;      Totals:         0       6       0       0       0       0       0
  2687 ;;Total ram usage:        6 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    8
  2690 ;; This function calls:
  2691 ;;		_SigfoxCommManager
  2692 ;;		_SigfoxResponseParser
  2693 ;;		_SigfoxTaskPowerDown
  2694 ;;		_SigfoxTaskReset
  2695 ;; This function is called by:
  2696 ;;		_ProtocolTask
  2697 ;;		_ProtocolTaskExecute
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           	psect	text15
  2702  0007F0                     __ptext15:
  2703                           	opt stack 0
  2704  0007F0                     _SigfoxTask:
  2705                           	opt stack 20
  2706                           
  2707                           ;eusart2.c: 315: const uint8_t sigfoxInitCommandsROMList[3] = {SFX_CMD_INITIALIZE,
  2708                           ;eusart2.c: 317: SFX_CMD_ADJ_PWR,
  2709                           ;eusart2.c: 318: 0xFF};
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;incstack = 0
  2713  0007F0  0E05               	movlw	low SigfoxTask@F6885
  2714  0007F2  6EF6               	movwf	tblptrl,c
  2715  0007F4                     	if	1	;There is more than 1 active tblptr byte
  2716  0007F4  0E06               	movlw	high SigfoxTask@F6885
  2717  0007F6  6EF7               	movwf	tblptrh,c
  2718  0007F8                     	endif
  2719  0007F8                     	if	1	;There are 3 active tblptr bytes
  2720  0007F8  0E00               	movlw	low (SigfoxTask@F6885 shr (0+16))
  2721  0007FA  6EF8               	movwf	tblptru,c
  2722  0007FC                     	endif
  2723  0007FC  0009               	tblrd		*+
  2724  0007FE  CFF5 F0DB          	movff	tablat,SigfoxTask@sigfoxInitCommandsROMList
  2725  000802  0009               	tblrd		*+
  2726  000804  CFF5 F0DC          	movff	tablat,SigfoxTask@sigfoxInitCommandsROMList+1
  2727  000808  000A               	tblrd		*-
  2728  00080A  CFF5 F0DD          	movff	tablat,SigfoxTask@sigfoxInitCommandsROMList+2
  2729                           
  2730                           ;eusart2.c: 319: const char *SigfoxInitCommandPtr;
  2731                           ;eusart2.c: 321: switch(SFX_STATE){
  2732  00080E  D076               	goto	l3081
  2733  000810                     l2943:
  2734                           
  2735                           ; BSR set to: 0
  2736                           ;eusart2.c: 323: if(SigfoxScheduledInitTaskFlag){
  2737  000810  518C               	movf	_SigfoxScheduledInitTaskFlag& (0+255),w,b
  2738  000812  B4D8               	btfsc	status,2,c
  2739  000814  0C00               	retlw	0
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;eusart2.c: 324: SFX_STATE = TASK_RESET_TASK;
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;eusart2.c: 325: return(TASK_ON_COURSE);
  2746  000816  D083               	goto	PL40	;call to abstracted procedure
  2747  000818                     l2955:
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;eusart2.c: 331: SigfoxTaskReset();
  2751  000818  EC10  F00A         	call	_SigfoxTaskReset	;wreg free
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;eusart2.c: 332: SFX_STATE = TASK_INIT;
  2755  00081C  0E02               	movlw	2
  2756  00081E  6FF2               	movwf	_SFX_STATE& (0+255),b
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;eusart2.c: 333: SigfoxInitCommandPtr = sigfoxInitCommandsROMList;
  2760  000820  0EDB               	movlw	low SigfoxTask@sigfoxInitCommandsROMList
  2761  000822  6FDE               	movwf	SigfoxTask@SigfoxInitCommandPtr& (0+255),b
  2762  000824  0E00               	movlw	high SigfoxTask@sigfoxInitCommandsROMList
  2763  000826  6FDF               	movwf	(SigfoxTask@SigfoxInitCommandPtr+1)& (0+255),b
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;eusart2.c: 334: return(TASK_ON_COURSE);
  2767  000828  0C01               	retlw	1
  2768  00082A                     l2965:
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;eusart2.c: 338: {
  2772                           ;eusart2.c: 339: SigfoxTransactionResult = SigfoxCommManager(SigfoxInitCommandPtr[0]);
  2773  00082A  D874               	call	PL28	;call to abstracted procedure
  2774  00082C  50DF               	movf	indf2,w,c
  2775  00082E  EC04  F008         	call	_SigfoxCommManager
  2776  000832  6FF1               	movwf	_SigfoxTransactionResult& (0+255),b
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;eusart2.c: 340: if(SigfoxTransactionResult == TASK_DATA_READY){
  2780  000834  0E02               	movlw	2
  2781  000836  19F1               	xorwf	_SigfoxTransactionResult& (0+255),w,b
  2782  000838  E10D               	bnz	l2979
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;eusart2.c: 341: if(SigfoxResponseParser()){
  2786  00083A  EC22  F00A         	call	_SigfoxResponseParser	;wreg free
  2787  00083E  0900               	iorlw	0
  2788  000840  E005               	bz	l2975
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;eusart2.c: 342: SigfoxInitCommandPtr++;
  2792  000842  4BDE               	infsnz	SigfoxTask@SigfoxInitCommandPtr& (0+255),f,b
  2793  000844  2BDF               	incf	(SigfoxTask@SigfoxInitCommandPtr+1)& (0+255),f,b
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;eusart2.c: 343: SigfoxTransactionAttemps = 3;
  2797  000846  0E03               	movlw	3
  2798  000848  6F8A               	movwf	_SigfoxTransactionAttemps& (0+255),b
  2799                           
  2800                           ;eusart2.c: 344: }
  2801  00084A  D00A               	goto	l2987
  2802  00084C                     l2975:
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;eusart2.c: 345: else if(SigfoxTransactionAttemps){
  2806  00084C  518A               	movf	_SigfoxTransactionAttemps& (0+255),w,b
  2807  00084E  E008               	bz	l2987
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;eusart2.c: 346: SigfoxTransactionAttemps--;
  2811  000850  078A               	decf	_SigfoxTransactionAttemps& (0+255),f,b
  2812  000852  D006               	goto	l2987
  2813  000854                     l2979:
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;eusart2.c: 349: }
  2817                           ;eusart2.c: 350: if(SigfoxTransactionResult == TASK_NO_SENSOR_FOUND){
  2818  000854  51F1               	movf	_SigfoxTransactionResult& (0+255),w,b
  2819  000856  E102               	bnz	l2983
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;eusart2.c: 351: SigfoxTaskPowerDown();
  2823  000858  EC4B  F00A         	call	_SigfoxTaskPowerDown	;wreg free
  2824  00085C                     l2983:
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;eusart2.c: 352: }
  2828                           ;eusart2.c: 353: return(SigfoxTransactionResult);
  2829  00085C  51F1               	movf	_SigfoxTransactionResult& (0+255),w,b
  2830  00085E  0012               	return	
  2831  000860                     l2987:
  2832                           
  2833                           ; BSR set to: 0
  2834  000860  D859               	call	PL28	;call to abstracted procedure
  2835  000862  28DE               	incf	postinc2,w,c
  2836  000864  E1E2               	bnz	l2965
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;eusart2.c: 354: }
  2840                           ;eusart2.c: 355: SigfoxTransactionResult = TASK_DATA_READY;
  2841  000866  0E02               	movlw	2
  2842  000868  6FF1               	movwf	_SigfoxTransactionResult& (0+255),b
  2843                           
  2844                           ;eusart2.c: 356: SFX_STATE = TASK_READY;
  2845  00086A  0E03               	movlw	3
  2846  00086C  6FF2               	movwf	_SFX_STATE& (0+255),b
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;eusart2.c: 357: SigfoxScheduledInitTaskFlag = 0;
  2850  00086E  6B8C               	clrf	_SigfoxScheduledInitTaskFlag& (0+255),b
  2851                           
  2852                           ;eusart2.c: 358: if(SigfoxScheduledMsgTaskFlag || SigfoxScheduledMsgAckTaskFlag || Sigfo
      +                          xScheduledMsgStaTaskFlag){
  2853  000870  518F               	movf	_SigfoxScheduledMsgTaskFlag& (0+255),w,b
  2854  000872  A4D8               	btfss	status,2,c
  2855  000874  0C01               	retlw	1
  2856                           
  2857                           ; BSR set to: 0
  2858  000876  518E               	movf	_SigfoxScheduledMsgAckTaskFlag& (0+255),w,b
  2859  000878  A4D8               	btfss	status,2,c
  2860  00087A  0C01               	retlw	1
  2861                           
  2862                           ; BSR set to: 0
  2863  00087C  518B               	movf	_SigfoxScheduledMsgStaTaskFlag& (0+255),w,b
  2864  00087E  A4D8               	btfss	status,2,c
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;eusart2.c: 359: return(TASK_ON_COURSE);
  2868  000880  0C01               	retlw	1
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;eusart2.c: 360: }
  2872                           ;eusart2.c: 361: return(TASK_DATA_READY);
  2873  000882  0C02               	retlw	2
  2874  000884                     l3005:
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;eusart2.c: 369: if(SigfoxScheduledMsgTaskFlag || SigfoxScheduledMsgAckTaskFlag || Sigfo
      +                          xScheduledMsgStaTaskFlag){
  2878  000884  518F               	movf	_SigfoxScheduledMsgTaskFlag& (0+255),w,b
  2879  000886  E104               	bnz	l3011
  2880                           
  2881                           ; BSR set to: 0
  2882  000888  518E               	movf	_SigfoxScheduledMsgAckTaskFlag& (0+255),w,b
  2883  00088A  E102               	bnz	l3011
  2884                           
  2885                           ; BSR set to: 0
  2886  00088C  518B               	movf	_SigfoxScheduledMsgStaTaskFlag& (0+255),w,b
  2887  00088E  E006               	bz	l3019
  2888  000890                     l3011:
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;eusart2.c: 370: SigfoxTransactionAttemps = 3;
  2892  000890  0E03               	movlw	3
  2893  000892  6F8A               	movwf	_SigfoxTransactionAttemps& (0+255),b
  2894                           
  2895                           ;eusart2.c: 371: SFX_STATE = TASK_WAITING_DATA;
  2896  000894  0E04               	movlw	4
  2897  000896  6FF2               	movwf	_SFX_STATE& (0+255),b
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;eusart2.c: 372: SigfoxCommManagerState = TASK_SEND_COMMAND_SM;
  2901  000898  6B91               	clrf	_SigfoxCommManagerState& (0+255),b
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;eusart2.c: 373: return(TASK_ON_COURSE);
  2905  00089A  0C01               	retlw	1
  2906  00089C                     l3019:
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;eusart2.c: 374: }
  2910                           ;eusart2.c: 375: if(SigfoxScheduledPwrDownTaskFlag){
  2911  00089C  518D               	movf	_SigfoxScheduledPwrDownTaskFlag& (0+255),w,b
  2912  00089E  B4D8               	btfsc	status,2,c
  2913  0008A0  0C02               	retlw	2
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;eusart2.c: 376: SigfoxTaskPowerDown();
  2917  0008A2  EC4B  F00A         	call	_SigfoxTaskPowerDown	;wreg free
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;eusart2.c: 377: return(TASK_NO_SENSOR_FOUND);
  2921  0008A6  0C00               	retlw	0
  2922  0008A8                     l3031:
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;eusart2.c: 382: if(SigfoxScheduledMsgAckTaskFlag){
  2926  0008A8  518E               	movf	_SigfoxScheduledMsgAckTaskFlag& (0+255),w,b
  2927  0008AA  E004               	bz	l3035
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;eusart2.c: 383: SigfoxTransactionResult = SigfoxCommManager(SFX_CMD_SEND_MSG_WAIT_ACK);
  2931  0008AC  0E02               	movlw	2
  2932  0008AE  EC04  F008         	call	_SigfoxCommManager
  2933  0008B2  D009               	goto	L5
  2934  0008B4                     l3035:
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;eusart2.c: 385: else if(SigfoxScheduledMsgStaTaskFlag){
  2938  0008B4  518B               	movf	_SigfoxScheduledMsgStaTaskFlag& (0+255),w,b
  2939  0008B6  E004               	bz	l3039
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;eusart2.c: 386: SigfoxTransactionResult = SigfoxCommManager(SFX_CMD_SEND_STATUS);
  2943  0008B8  0E03               	movlw	3
  2944  0008BA  EC04  F008         	call	_SigfoxCommManager
  2945  0008BE  D003               	goto	L5
  2946  0008C0                     l3039:
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;eusart2.c: 388: else
  2950                           ;eusart2.c: 389: {
  2951                           ;eusart2.c: 390: SigfoxTransactionResult = SigfoxCommManager(SFX_CMD_SEND_MSG);
  2952  0008C0  0E01               	movlw	1
  2953  0008C2  EC04  F008         	call	_SigfoxCommManager
  2954  0008C6                     L5:
  2955  0008C6  6FF1               	movwf	_SigfoxTransactionResult& (0+255),b
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;eusart2.c: 391: }
  2959                           ;eusart2.c: 392: if(SigfoxTransactionResult == TASK_DATA_READY){
  2960  0008C8  0E02               	movlw	2
  2961  0008CA  19F1               	xorwf	_SigfoxTransactionResult& (0+255),w,b
  2962  0008CC  E10D               	bnz	l3059
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;eusart2.c: 393: if(SigfoxResponseParser()){
  2966  0008CE  EC22  F00A         	call	_SigfoxResponseParser	;wreg free
  2967  0008D2  0900               	iorlw	0
  2968  0008D4  E006               	bz	l3055
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;eusart2.c: 394: SigfoxScheduledMsgTaskFlag = 0;
  2972  0008D6  6B8F               	clrf	_SigfoxScheduledMsgTaskFlag& (0+255),b
  2973                           
  2974                           ;eusart2.c: 395: SigfoxScheduledMsgAckTaskFlag = 0;
  2975  0008D8  6B8E               	clrf	_SigfoxScheduledMsgAckTaskFlag& (0+255),b
  2976                           
  2977                           ;eusart2.c: 396: SigfoxScheduledMsgStaTaskFlag = 0;
  2978  0008DA  6B8B               	clrf	_SigfoxScheduledMsgStaTaskFlag& (0+255),b
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;eusart2.c: 398: SFX_STATE = TASK_READY;
  2982  0008DC  0E03               	movlw	3
  2983  0008DE  6FF2               	movwf	_SFX_STATE& (0+255),b
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;eusart2.c: 399: return(TASK_ON_COURSE);
  2987  0008E0  0C01               	retlw	1
  2988  0008E2                     l3055:
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;eusart2.c: 401: else if(SigfoxTransactionAttemps){
  2992  0008E2  518A               	movf	_SigfoxTransactionAttemps& (0+255),w,b
  2993  0008E4  E001               	bz	l3059
  2994                           
  2995                           ; BSR set to: 0
  2996                           ;eusart2.c: 402: SigfoxTransactionAttemps--;
  2997  0008E6  078A               	decf	_SigfoxTransactionAttemps& (0+255),f,b
  2998  0008E8                     l3059:
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;eusart2.c: 403: }
  3002                           ;eusart2.c: 404: }
  3003                           ;eusart2.c: 405: if(SigfoxTransactionResult == TASK_NO_SENSOR_FOUND){
  3004  0008E8  51F1               	movf	_SigfoxTransactionResult& (0+255),w,b
  3005  0008EA  A4D8               	btfss	status,2,c
  3006  0008EC  0C01               	retlw	1
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;eusart2.c: 408: SigfoxScheduledMsgStaTaskFlag = 0;
  3010  0008EE  6B8B               	clrf	_SigfoxScheduledMsgStaTaskFlag& (0+255),b
  3011                           
  3012                           ;eusart2.c: 409: SigfoxScheduledMsgTaskFlag = 0;
  3013  0008F0  6B8F               	clrf	_SigfoxScheduledMsgTaskFlag& (0+255),b
  3014                           
  3015                           ;eusart2.c: 410: SigfoxScheduledMsgAckTaskFlag = 0;
  3016  0008F2  6B8E               	clrf	_SigfoxScheduledMsgAckTaskFlag& (0+255),b
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;eusart2.c: 411: SFX_STATE = TASK_READY;
  3020  0008F4  0E03               	movlw	3
  3021  0008F6  6FF2               	movwf	_SFX_STATE& (0+255),b
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;eusart2.c: 412: return(TASK_DATA_NOT_AVAILABLE);
  3025  0008F8  0C04               	retlw	4
  3026  0008FA                     l3073:
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;eusart2.c: 416: SFX_STATE = TASK_RESET_TASK;
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;eusart2.c: 417: return(TASK_ON_COURSE);
  3033  0008FA  D011               	goto	PL40	;call to abstracted procedure
  3034  0008FC                     l3081:
  3035  0008FC  0100               	movlb	0	; () banked
  3036  0008FE  51F2               	movf	_SFX_STATE& (0+255),w,b
  3037                           
  3038                           ; Switch size 1, requested type "space"
  3039                           ; Number of cases is 5, Range of values is 0 to 4
  3040                           ; switch strategies available:
  3041                           ; Name         Instructions Cycles
  3042                           ; simple_byte           16     9 (average)
  3043                           ;	Chosen strategy is simple_byte
  3044  000900  E087               	bz	l2943
  3045  000902  0A01               	xorlw	1	; case 1
  3046  000904  E089               	bz	l2955
  3047  000906  0A03               	xorlw	3	; case 2
  3048  000908  E0AB               	bz	l2987
  3049  00090A  0A01               	xorlw	1	; case 3
  3050  00090C  E0BB               	bz	l3005
  3051  00090E  0A07               	xorlw	7	; case 4
  3052  000910  E0CB               	bz	l3031
  3053  000912  D005               	goto	PL40
  3054  000914                     __end_of_SigfoxTask:
  3055                           	opt stack 0
  3056  000914                     PL28:
  3057                           	opt stack 20
  3058  000914  C0DE  FFD9         	movff	SigfoxTask@SigfoxInitCommandPtr,fsr2l
  3059  000918  C0DF  FFDA         	movff	SigfoxTask@SigfoxInitCommandPtr+1,fsr2h
  3060  00091C  0012               	return	
  3061  00091E                     __end_ofPL28:
  3062                           	opt stack 0
  3063  00091E                     PL40:
  3064                           	opt stack 20
  3065  00091E  0E01               	movlw	1
  3066  000920  6FF2               	movwf	_SFX_STATE& (0+255),b
  3067  000922  0C01               	retlw	1
  3068  000924                     __end_ofPL40:
  3069                           	opt stack 0
  3070                           tosu	equ	0xFFF
  3071                           tosh	equ	0xFFE
  3072                           tosl	equ	0xFFD
  3073                           pclath	equ	0xFFA
  3074                           tblptru	equ	0xFF8
  3075                           tblptrh	equ	0xFF7
  3076                           tblptrl	equ	0xFF6
  3077                           tablat	equ	0xFF5
  3078                           prodh	equ	0xFF4
  3079                           prodl	equ	0xFF3
  3080                           intcon	equ	0xFF2
  3081                           intcon2	equ	0xFF1
  3082                           postinc0	equ	0xFEE
  3083                           wreg	equ	0xFE8
  3084                           indf1	equ	0xFE7
  3085                           postdec1	equ	0xFE5
  3086                           fsr1h	equ	0xFE2
  3087                           fsr1l	equ	0xFE1
  3088                           indf2	equ	0xFDF
  3089                           postinc2	equ	0xFDE
  3090                           plusw2	equ	0xFDB
  3091                           fsr2h	equ	0xFDA
  3092                           fsr2l	equ	0xFD9
  3093                           status	equ	0xFD8
  3094                           
  3095 ;; *************** function _powerTask *****************
  3096 ;; Defined at:
  3097 ;;		line 43 in file "powerTask.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;		None
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;		None
  3102 ;; Return value:  Size  Location     Type
  3103 ;;                  1    wreg      enum E6679
  3104 ;; Registers used:
  3105 ;;		wreg, status,2, status,0, cstack
  3106 ;; Tracked objects:
  3107 ;;		On entry : 3F/0
  3108 ;;		On exit  : 3F/0
  3109 ;;		Unchanged: 0/0
  3110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3111 ;;      Params:         0       0       0       0       0       0       0
  3112 ;;      Locals:         0       0       0       0       0       0       0
  3113 ;;      Temps:          0       0       0       0       0       0       0
  3114 ;;      Totals:         0       0       0       0       0       0       0
  3115 ;;Total ram usage:        0 bytes
  3116 ;; Hardware stack levels used:    1
  3117 ;; Hardware stack levels required when called:    6
  3118 ;; This function calls:
  3119 ;;		_powerTaskPowerDown
  3120 ;;		_powerTaskReset
  3121 ;; This function is called by:
  3122 ;;		_ProtocolTask
  3123 ;;		_ProtocolTaskExecute
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           	psect	text16
  3128  000C9C                     __ptext16:
  3129                           	opt stack 0
  3130  000C9C                     _powerTask:
  3131                           	opt stack 22
  3132                           
  3133                           ;powerTask.c: 44: switch(PWR_STATE){
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;incstack = 0
  3137  000C9C  D040               	goto	l2333
  3138  000C9E                     l2251:
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;powerTask.c: 46: if(pwrScheduledInitTaskFlag){
  3142  000C9E  5180               	movf	_pwrScheduledInitTaskFlag& (0+255),w,b
  3143  000CA0  B4D8               	btfsc	status,2,c
  3144  000CA2  0C00               	retlw	0
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;powerTask.c: 47: PWR_STATE = TASK_RESET_TASK;
  3148  000CA4  0E01               	movlw	1
  3149  000CA6  6FEF               	movwf	_PWR_STATE& (0+255),b
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;powerTask.c: 48: return(TASK_ON_COURSE);
  3153  000CA8  0C01               	retlw	1
  3154  000CAA                     l2263:
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;powerTask.c: 52: powerTaskReset();
  3158  000CAA  EC9B  F00A         	call	_powerTaskReset	;wreg free
  3159  000CAE  8E89               	bsf	3977,7,c	;volatile
  3160                           
  3161                           ;powerTask.c: 55: powerTaskPwrReadyTimer = 4;
  3162  000CB0  0100               	movlb	0	; () banked
  3163  000CB2  6B75               	clrf	(_powerTaskPwrReadyTimer+1)& (0+255),b
  3164  000CB4  0E04               	movlw	4
  3165  000CB6  6F74               	movwf	_powerTaskPwrReadyTimer& (0+255),b
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;powerTask.c: 59: PWR_STATE = TASK_INIT;
  3169  000CB8  0E02               	movlw	2
  3170  000CBA  6FEF               	movwf	_PWR_STATE& (0+255),b
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;powerTask.c: 60: return(TASK_ON_COURSE);
  3174  000CBC  0C01               	retlw	1
  3175  000CBE                     l2275:
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;powerTask.c: 63: if(powerTaskPwrReadyTimer){
  3179  000CBE  5174               	movf	_powerTaskPwrReadyTimer& (0+255),w,b
  3180  000CC0  1175               	iorwf	(_powerTaskPwrReadyTimer+1)& (0+255),w,b
  3181  000CC2  E001               	bz	l831
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;powerTask.c: 64: return(TASK_ON_COURSE);
  3185  000CC4  0C01               	retlw	1
  3186  000CC6                     l831:
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;powerTask.c: 65: }
  3190                           ;powerTask.c: 69: pwrScheduledInitTaskFlag = 0;
  3191  000CC6  6B80               	clrf	_pwrScheduledInitTaskFlag& (0+255),b
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;powerTask.c: 70: PWR_STATE = TASK_READY;
  3195  000CC8  0E03               	movlw	3
  3196  000CCA  6FEF               	movwf	_PWR_STATE& (0+255),b
  3197                           
  3198                           ;powerTask.c: 71: if(pwrScheduledMeasPowerTaskFlag||pwrScheduledCommPowerTaskFlag){
  3199  000CCC  517F               	movf	_pwrScheduledMeasPowerTaskFlag& (0+255),w,b
  3200  000CCE  A4D8               	btfss	status,2,c
  3201  000CD0  0C01               	retlw	1
  3202                           
  3203                           ; BSR set to: 0
  3204  000CD2  517E               	movf	_pwrScheduledCommPowerTaskFlag& (0+255),w,b
  3205  000CD4  A4D8               	btfss	status,2,c
  3206                           
  3207                           ; BSR set to: 0
  3208                           ;powerTask.c: 72: return(TASK_ON_COURSE);
  3209  000CD6  0C01               	retlw	1
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;powerTask.c: 73: }
  3213                           ;powerTask.c: 74: return(TASK_DATA_READY);
  3214  000CD8  0C02               	retlw	2
  3215  000CDA                     l2293:
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;powerTask.c: 76: if(pwrScheduledMeasPowerTaskFlag){
  3219  000CDA  517F               	movf	_pwrScheduledMeasPowerTaskFlag& (0+255),w,b
  3220  000CDC  E001               	bz	l2295
  3221                           
  3222                           ; BSR set to: 0
  3223                           
  3224                           ;powerTask.c: 77: do { LATAbits.LATA6 = 1; } while(0);
  3225  000CDE  8C89               	bsf	3977,6,c	;volatile
  3226  000CE0                     l2295:
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;powerTask.c: 78: }
  3230                           ;powerTask.c: 79: if(pwrScheduledCommPowerTaskFlag){
  3231  000CE0  517E               	movf	_pwrScheduledCommPowerTaskFlag& (0+255),w,b
  3232  000CE2  E001               	bz	l2297
  3233                           
  3234                           ; BSR set to: 0
  3235                           
  3236                           ;powerTask.c: 80: do { LATCbits.LATC0 = 1; } while(0);
  3237  000CE4  808B               	bsf	3979,0,c	;volatile
  3238  000CE6                     l2297:
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;powerTask.c: 81: }
  3242                           ;powerTask.c: 82: if(pwrScheduledMeasPowerTaskFlag||pwrScheduledCommPowerTaskFlag){
  3243  000CE6  517F               	movf	_pwrScheduledMeasPowerTaskFlag& (0+255),w,b
  3244  000CE8  E103               	bnz	l2301
  3245                           
  3246                           ; BSR set to: 0
  3247  000CEA  517E               	movf	_pwrScheduledCommPowerTaskFlag& (0+255),w,b
  3248  000CEC  B4D8               	btfsc	status,2,c
  3249  000CEE  0C02               	retlw	2
  3250  000CF0                     l2301:
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;powerTask.c: 83: PWR_STATE = TASK_WAITING_DATA;
  3254  000CF0  0E04               	movlw	4
  3255  000CF2  6FEF               	movwf	_PWR_STATE& (0+255),b
  3256                           
  3257                           ;powerTask.c: 84: powerTaskPwrReadyTimer = 2;
  3258  000CF4  6B75               	clrf	(_powerTaskPwrReadyTimer+1)& (0+255),b
  3259  000CF6  0E02               	movlw	2
  3260  000CF8  6F74               	movwf	_powerTaskPwrReadyTimer& (0+255),b
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;powerTask.c: 85: return(TASK_ON_COURSE);
  3264  000CFA  0C01               	retlw	1
  3265  000CFC                     l2311:
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;powerTask.c: 89: if(powerTaskPwrReadyTimer == 0){
  3269  000CFC  5174               	movf	_powerTaskPwrReadyTimer& (0+255),w,b
  3270  000CFE  1175               	iorwf	(_powerTaskPwrReadyTimer+1)& (0+255),w,b
  3271  000D00  A4D8               	btfss	status,2,c
  3272  000D02  0C01               	retlw	1
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;powerTask.c: 90: PWR_STATE = TASK_READY;
  3276  000D04  0E03               	movlw	3
  3277  000D06  6FEF               	movwf	_PWR_STATE& (0+255),b
  3278                           
  3279                           ;powerTask.c: 91: if(pwrScheduledMeasPowerTaskFlag){
  3280  000D08  517F               	movf	_pwrScheduledMeasPowerTaskFlag& (0+255),w,b
  3281  000D0A  E002               	bz	l2317
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;powerTask.c: 92: pwrScheduledMeasPowerTaskFlag = 0;
  3285  000D0C  6B7F               	clrf	_pwrScheduledMeasPowerTaskFlag& (0+255),b
  3286                           
  3287                           ;powerTask.c: 93: }
  3288  000D0E  0C01               	retlw	1
  3289  000D10                     l2317:
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;powerTask.c: 94: else if(pwrScheduledCommPowerTaskFlag){
  3293  000D10  517E               	movf	_pwrScheduledCommPowerTaskFlag& (0+255),w,b
  3294  000D12  A4D8               	btfss	status,2,c
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;powerTask.c: 95: pwrScheduledCommPowerTaskFlag = 0;
  3298  000D14  6B7E               	clrf	_pwrScheduledCommPowerTaskFlag& (0+255),b
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;powerTask.c: 96: }
  3302                           ;powerTask.c: 97: }
  3303                           ;powerTask.c: 98: return(TASK_ON_COURSE);
  3304  000D16  0C01               	retlw	1
  3305  000D18                     l2325:
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;powerTask.c: 100: powerTaskPowerDown();
  3309  000D18  EC40  F00A         	call	_powerTaskPowerDown	;wreg free
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;powerTask.c: 101: return(TASK_ON_COURSE);
  3313  000D1C  0C01               	retlw	1
  3314  000D1E                     l2333:
  3315  000D1E  0100               	movlb	0	; () banked
  3316  000D20  51EF               	movf	_PWR_STATE& (0+255),w,b
  3317                           
  3318                           ; Switch size 1, requested type "space"
  3319                           ; Number of cases is 5, Range of values is 0 to 4
  3320                           ; switch strategies available:
  3321                           ; Name         Instructions Cycles
  3322                           ; simple_byte           16     9 (average)
  3323                           ;	Chosen strategy is simple_byte
  3324  000D22  E0BD               	bz	l2251
  3325  000D24  0A01               	xorlw	1	; case 1
  3326  000D26  E0C1               	bz	l2263
  3327  000D28  0A03               	xorlw	3	; case 2
  3328  000D2A  E0C9               	bz	l2275
  3329  000D2C  0A01               	xorlw	1	; case 3
  3330  000D2E  E0D5               	bz	l2293
  3331  000D30  0A07               	xorlw	7	; case 4
  3332  000D32  E0E4               	bz	l2311
  3333  000D34  D7F1               	goto	l2325
  3334  000D36                     __end_of_powerTask:
  3335                           	opt stack 0
  3336                           tosu	equ	0xFFF
  3337                           tosh	equ	0xFFE
  3338                           tosl	equ	0xFFD
  3339                           pclath	equ	0xFFA
  3340                           tblptru	equ	0xFF8
  3341                           tblptrh	equ	0xFF7
  3342                           tblptrl	equ	0xFF6
  3343                           tablat	equ	0xFF5
  3344                           prodh	equ	0xFF4
  3345                           prodl	equ	0xFF3
  3346                           intcon	equ	0xFF2
  3347                           intcon2	equ	0xFF1
  3348                           postinc0	equ	0xFEE
  3349                           wreg	equ	0xFE8
  3350                           indf1	equ	0xFE7
  3351                           postdec1	equ	0xFE5
  3352                           fsr1h	equ	0xFE2
  3353                           fsr1l	equ	0xFE1
  3354                           indf2	equ	0xFDF
  3355                           postinc2	equ	0xFDE
  3356                           plusw2	equ	0xFDB
  3357                           fsr2h	equ	0xFDA
  3358                           fsr2l	equ	0xFD9
  3359                           status	equ	0xFD8
  3360                           
  3361 ;; *************** function _powerTaskReset *****************
  3362 ;; Defined at:
  3363 ;;		line 33 in file "powerTask.c"
  3364 ;; Parameters:    Size  Location     Type
  3365 ;;		None
  3366 ;; Auto vars:     Size  Location     Type
  3367 ;;		None
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  1    wreg      void 
  3370 ;; Registers used:
  3371 ;;		None
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3377 ;;      Params:         0       0       0       0       0       0       0
  3378 ;;      Locals:         0       0       0       0       0       0       0
  3379 ;;      Temps:          0       0       0       0       0       0       0
  3380 ;;      Totals:         0       0       0       0       0       0       0
  3381 ;;Total ram usage:        0 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; Hardware stack levels required when called:    5
  3384 ;; This function calls:
  3385 ;;		Nothing
  3386 ;; This function is called by:
  3387 ;;		_powerTask
  3388 ;; This function uses a non-reentrant model
  3389 ;;
  3390                           
  3391                           	psect	text17
  3392  001536                     __ptext17:
  3393                           	opt stack 0
  3394  001536                     _powerTaskReset:
  3395                           	opt stack 22
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;incstack = 0
  3399                           ;powerTask.c: 34: do { LATAbits.LATA6 = 0; } while(0);
  3400  001536  9C89               	bcf	3977,6,c	;volatile
  3401                           
  3402                           ;powerTask.c: 35: do { LATCbits.LATC0 = 0; } while(0);
  3403  001538  908B               	bcf	3979,0,c	;volatile
  3404                           
  3405                           ;powerTask.c: 36: do { LATAbits.LATA7 = 0; } while(0);
  3406  00153A  9E89               	bcf	3977,7,c	;volatile
  3407  00153C  0012               	return		;funcret
  3408  00153E                     __end_of_powerTaskReset:
  3409                           	opt stack 0
  3410                           tosu	equ	0xFFF
  3411                           tosh	equ	0xFFE
  3412                           tosl	equ	0xFFD
  3413                           pclath	equ	0xFFA
  3414                           tblptru	equ	0xFF8
  3415                           tblptrh	equ	0xFF7
  3416                           tblptrl	equ	0xFF6
  3417                           tablat	equ	0xFF5
  3418                           prodh	equ	0xFF4
  3419                           prodl	equ	0xFF3
  3420                           intcon	equ	0xFF2
  3421                           intcon2	equ	0xFF1
  3422                           postinc0	equ	0xFEE
  3423                           wreg	equ	0xFE8
  3424                           indf1	equ	0xFE7
  3425                           postdec1	equ	0xFE5
  3426                           fsr1h	equ	0xFE2
  3427                           fsr1l	equ	0xFE1
  3428                           indf2	equ	0xFDF
  3429                           postinc2	equ	0xFDE
  3430                           plusw2	equ	0xFDB
  3431                           fsr2h	equ	0xFDA
  3432                           fsr2l	equ	0xFD9
  3433                           status	equ	0xFD8
  3434                           
  3435 ;; *************** function _powerTaskPowerDown *****************
  3436 ;; Defined at:
  3437 ;;		line 23 in file "powerTask.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;		None
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;		None
  3442 ;; Return value:  Size  Location     Type
  3443 ;;                  1    wreg      void 
  3444 ;; Registers used:
  3445 ;;		None
  3446 ;; Tracked objects:
  3447 ;;		On entry : 0/0
  3448 ;;		On exit  : 3F/0
  3449 ;;		Unchanged: 0/0
  3450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3451 ;;      Params:         0       0       0       0       0       0       0
  3452 ;;      Locals:         0       0       0       0       0       0       0
  3453 ;;      Temps:          0       0       0       0       0       0       0
  3454 ;;      Totals:         0       0       0       0       0       0       0
  3455 ;;Total ram usage:        0 bytes
  3456 ;; Hardware stack levels used:    1
  3457 ;; Hardware stack levels required when called:    5
  3458 ;; This function calls:
  3459 ;;		Nothing
  3460 ;; This function is called by:
  3461 ;;		_ProtocolTaskPowerDown
  3462 ;;		_powerTask
  3463 ;;		_powerTaskNewTask
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           	psect	text18
  3468  001480                     __ptext18:
  3469                           	opt stack 0
  3470  001480                     _powerTaskPowerDown:
  3471                           	opt stack 24
  3472                           
  3473                           ;powerTask.c: 24: PMD2bits.ADCMD = 1;
  3474                           
  3475                           ;incstack = 0
  3476  001480  010F               	movlb	15	; () banked
  3477  001482  813D               	bsf	61,0,b	;volatile
  3478                           
  3479                           ;powerTask.c: 25: pwrScheduledInitTaskFlag = 0;
  3480  001484  0100               	movlb	0	; () banked
  3481  001486  6B80               	clrf	_pwrScheduledInitTaskFlag& (0+255),b
  3482                           
  3483                           ;powerTask.c: 26: pwrScheduledMeasPowerTaskFlag = 0;
  3484  001488  6B7F               	clrf	_pwrScheduledMeasPowerTaskFlag& (0+255),b
  3485                           
  3486                           ;powerTask.c: 27: pwrScheduledCommPowerTaskFlag = 0;
  3487  00148A  6B7E               	clrf	_pwrScheduledCommPowerTaskFlag& (0+255),b
  3488                           
  3489                           ; BSR set to: 0
  3490                           
  3491                           ;powerTask.c: 28: do { LATAbits.LATA6 = 0; } while(0);
  3492  00148C  9C89               	bcf	3977,6,c	;volatile
  3493                           
  3494                           ; BSR set to: 0
  3495                           
  3496                           ;powerTask.c: 29: do { LATCbits.LATC0 = 0; } while(0);
  3497  00148E  908B               	bcf	3979,0,c	;volatile
  3498                           
  3499                           ; BSR set to: 0
  3500                           
  3501                           ;powerTask.c: 30: do { LATAbits.LATA7 = 0; } while(0);
  3502  001490  9E89               	bcf	3977,7,c	;volatile
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;powerTask.c: 31: PWR_STATE = TASK_PARKED;
  3506  001492  6BEF               	clrf	_PWR_STATE& (0+255),b
  3507                           
  3508                           ; BSR set to: 0
  3509  001494  0012               	return		;funcret
  3510  001496                     __end_of_powerTaskPowerDown:
  3511                           	opt stack 0
  3512                           tosu	equ	0xFFF
  3513                           tosh	equ	0xFFE
  3514                           tosl	equ	0xFFD
  3515                           pclath	equ	0xFFA
  3516                           tblptru	equ	0xFF8
  3517                           tblptrh	equ	0xFF7
  3518                           tblptrl	equ	0xFF6
  3519                           tablat	equ	0xFF5
  3520                           prodh	equ	0xFF4
  3521                           prodl	equ	0xFF3
  3522                           intcon	equ	0xFF2
  3523                           intcon2	equ	0xFF1
  3524                           postinc0	equ	0xFEE
  3525                           wreg	equ	0xFE8
  3526                           indf1	equ	0xFE7
  3527                           postdec1	equ	0xFE5
  3528                           fsr1h	equ	0xFE2
  3529                           fsr1l	equ	0xFE1
  3530                           indf2	equ	0xFDF
  3531                           postinc2	equ	0xFDE
  3532                           plusw2	equ	0xFDB
  3533                           fsr2h	equ	0xFDA
  3534                           fsr2l	equ	0xFD9
  3535                           status	equ	0xFD8
  3536                           
  3537 ;; *************** function _SigfoxTaskReset *****************
  3538 ;; Defined at:
  3539 ;;		line 290 in file "mcc_generated_files/eusart2.c"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;		None
  3542 ;; Auto vars:     Size  Location     Type
  3543 ;;		None
  3544 ;; Return value:  Size  Location     Type
  3545 ;;                  1    wreg      void 
  3546 ;; Registers used:
  3547 ;;		wreg, status,2, cstack
  3548 ;; Tracked objects:
  3549 ;;		On entry : 0/0
  3550 ;;		On exit  : 3F/0
  3551 ;;		Unchanged: 0/0
  3552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3553 ;;      Params:         0       0       0       0       0       0       0
  3554 ;;      Locals:         0       0       0       0       0       0       0
  3555 ;;      Temps:          0       0       0       0       0       0       0
  3556 ;;      Totals:         0       0       0       0       0       0       0
  3557 ;;Total ram usage:        0 bytes
  3558 ;; Hardware stack levels used:    1
  3559 ;; Hardware stack levels required when called:    6
  3560 ;; This function calls:
  3561 ;;		_EUSART2_Initialize
  3562 ;; This function is called by:
  3563 ;;		_SigfoxTask
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           	psect	text19
  3568  001420                     __ptext19:
  3569                           	opt stack 0
  3570  001420                     _SigfoxTaskReset:
  3571                           	opt stack 21
  3572                           
  3573                           ;eusart2.c: 291: EUSART2_Initialize();
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;incstack = 0
  3577  001420  EC32  F00A         	call	_EUSART2_Initialize	;wreg free
  3578                           
  3579                           ; BSR set to: 15
  3580                           ;eusart2.c: 292: SFX_STATE = TASK_RESET_TASK;
  3581  001424  0E01               	movlw	1
  3582  001426  0100               	movlb	0	; () banked
  3583  001428  6FF2               	movwf	_SFX_STATE& (0+255),b
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;eusart2.c: 293: SigfoxTxDelay = 2;
  3587  00142A  0E02               	movlw	2
  3588  00142C  6F86               	movwf	_SigfoxTxDelay& (0+255),b
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;eusart2.c: 294: SigfoxCommManagerState = TASK_SEND_COMMAND_SM;
  3592  00142E  6B91               	clrf	_SigfoxCommManagerState& (0+255),b
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;eusart2.c: 295: SigfoxTransactionResult = TASK_ON_COURSE;
  3596  001430  0E01               	movlw	1
  3597  001432  6FF1               	movwf	_SigfoxTransactionResult& (0+255),b
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;eusart2.c: 296: SigfoxTransactionAttemps = 3;
  3601  001434  0E03               	movlw	3
  3602  001436  6F8A               	movwf	_SigfoxTransactionAttemps& (0+255),b
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;eusart2.c: 297: SigfoxTimeOutTimer = 0;
  3606  001438  6B87               	clrf	_SigfoxTimeOutTimer& (0+255),b
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;eusart2.c: 299: SigfoxMsgReceivedFlag = 0;
  3610  00143A  6B90               	clrf	_SigfoxMsgReceivedFlag& (0+255),b
  3611                           
  3612                           ; BSR set to: 0
  3613  00143C  8A8A               	bsf	3978,5,c	;volatile
  3614                           
  3615                           ; BSR set to: 0
  3616  00143E  908A               	bcf	3978,0,c	;volatile
  3617                           
  3618                           ; BSR set to: 0
  3619  001440  948A               	bcf	3978,2,c	;volatile
  3620                           
  3621                           ; BSR set to: 0
  3622  001442  0012               	return		;funcret
  3623  001444                     __end_of_SigfoxTaskReset:
  3624                           	opt stack 0
  3625                           tosu	equ	0xFFF
  3626                           tosh	equ	0xFFE
  3627                           tosl	equ	0xFFD
  3628                           pclath	equ	0xFFA
  3629                           tblptru	equ	0xFF8
  3630                           tblptrh	equ	0xFF7
  3631                           tblptrl	equ	0xFF6
  3632                           tablat	equ	0xFF5
  3633                           prodh	equ	0xFF4
  3634                           prodl	equ	0xFF3
  3635                           intcon	equ	0xFF2
  3636                           intcon2	equ	0xFF1
  3637                           postinc0	equ	0xFEE
  3638                           wreg	equ	0xFE8
  3639                           indf1	equ	0xFE7
  3640                           postdec1	equ	0xFE5
  3641                           fsr1h	equ	0xFE2
  3642                           fsr1l	equ	0xFE1
  3643                           indf2	equ	0xFDF
  3644                           postinc2	equ	0xFDE
  3645                           plusw2	equ	0xFDB
  3646                           fsr2h	equ	0xFDA
  3647                           fsr2l	equ	0xFD9
  3648                           status	equ	0xFD8
  3649                           
  3650 ;; *************** function _EUSART2_Initialize *****************
  3651 ;; Defined at:
  3652 ;;		line 77 in file "mcc_generated_files/eusart2.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;		None
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;		None
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  1    wreg      void 
  3659 ;; Registers used:
  3660 ;;		wreg, status,2
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 3F/F
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3666 ;;      Params:         0       0       0       0       0       0       0
  3667 ;;      Locals:         0       0       0       0       0       0       0
  3668 ;;      Temps:          0       0       0       0       0       0       0
  3669 ;;      Totals:         0       0       0       0       0       0       0
  3670 ;;Total ram usage:        0 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    5
  3673 ;; This function calls:
  3674 ;;		Nothing
  3675 ;; This function is called by:
  3676 ;;		_SigfoxTaskReset
  3677 ;; This function uses a non-reentrant model
  3678 ;;
  3679                           
  3680                           	psect	text20
  3681  001464                     __ptext20:
  3682                           	opt stack 0
  3683  001464                     _EUSART2_Initialize:
  3684                           	opt stack 21
  3685                           
  3686                           ;eusart2.c: 78: PMD0bits.UART2MD = 0;
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;incstack = 0
  3690  001464  010F               	movlb	15	; () banked
  3691  001466  9F3F               	bcf	63,7,b	;volatile
  3692                           
  3693                           ;eusart2.c: 80: PIE3bits.RC2IE = 0;
  3694  001468  9AA3               	bcf	4003,5,c	;volatile
  3695                           
  3696                           ;eusart2.c: 81: PIE3bits.TX2IE = 0;
  3697  00146A  98A3               	bcf	4003,4,c	;volatile
  3698                           
  3699                           ; BSR set to: 15
  3700                           ;eusart2.c: 86: BAUDCON2 = 0x08;
  3701  00146C  0E08               	movlw	8
  3702  00146E  6E70               	movwf	3952,c	;volatile
  3703                           
  3704                           ;eusart2.c: 88: RCSTA2 = 0x90;
  3705  001470  0E90               	movlw	144
  3706  001472  6E71               	movwf	3953,c	;volatile
  3707                           
  3708                           ;eusart2.c: 90: TXSTA2 = 0x24;
  3709  001474  0E24               	movlw	36
  3710  001476  6E72               	movwf	3954,c	;volatile
  3711                           
  3712                           ;eusart2.c: 93: SPBRG2 = 0x33;
  3713  001478  0E33               	movlw	51
  3714  00147A  6E75               	movwf	3957,c	;volatile
  3715                           
  3716                           ; BSR set to: 15
  3717                           ;eusart2.c: 96: SPBRGH2 = 0x00;
  3718  00147C  6A76               	clrf	3958,c	;volatile
  3719                           
  3720                           ; BSR set to: 15
  3721  00147E  0012               	return		;funcret
  3722  001480                     __end_of_EUSART2_Initialize:
  3723                           	opt stack 0
  3724                           tosu	equ	0xFFF
  3725                           tosh	equ	0xFFE
  3726                           tosl	equ	0xFFD
  3727                           pclath	equ	0xFFA
  3728                           tblptru	equ	0xFF8
  3729                           tblptrh	equ	0xFF7
  3730                           tblptrl	equ	0xFF6
  3731                           tablat	equ	0xFF5
  3732                           prodh	equ	0xFF4
  3733                           prodl	equ	0xFF3
  3734                           intcon	equ	0xFF2
  3735                           intcon2	equ	0xFF1
  3736                           postinc0	equ	0xFEE
  3737                           wreg	equ	0xFE8
  3738                           indf1	equ	0xFE7
  3739                           postdec1	equ	0xFE5
  3740                           fsr1h	equ	0xFE2
  3741                           fsr1l	equ	0xFE1
  3742                           indf2	equ	0xFDF
  3743                           postinc2	equ	0xFDE
  3744                           plusw2	equ	0xFDB
  3745                           fsr2h	equ	0xFDA
  3746                           fsr2l	equ	0xFD9
  3747                           status	equ	0xFD8
  3748                           
  3749 ;; *************** function _SigfoxTaskPowerDown *****************
  3750 ;; Defined at:
  3751 ;;		line 305 in file "mcc_generated_files/eusart2.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;		None
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;		None
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  1    wreg      void 
  3758 ;; Registers used:
  3759 ;;		None
  3760 ;; Tracked objects:
  3761 ;;		On entry : 3F/0
  3762 ;;		On exit  : 3F/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3765 ;;      Params:         0       0       0       0       0       0       0
  3766 ;;      Locals:         0       0       0       0       0       0       0
  3767 ;;      Temps:          0       0       0       0       0       0       0
  3768 ;;      Totals:         0       0       0       0       0       0       0
  3769 ;;Total ram usage:        0 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; Hardware stack levels required when called:    5
  3772 ;; This function calls:
  3773 ;;		Nothing
  3774 ;; This function is called by:
  3775 ;;		_SigfoxTask
  3776 ;;		_ProtocolTaskPowerDown
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           	psect	text21
  3781  001496                     __ptext21:
  3782                           	opt stack 0
  3783  001496                     _SigfoxTaskPowerDown:
  3784                           	opt stack 24
  3785                           
  3786                           ;eusart2.c: 306: SigfoxScheduledInitTaskFlag = 0;
  3787                           
  3788                           ; BSR set to: 15
  3789                           ;incstack = 0
  3790  001496  0100               	movlb	0	; () banked
  3791  001498  6B8C               	clrf	_SigfoxScheduledInitTaskFlag& (0+255),b
  3792                           
  3793                           ;eusart2.c: 307: SigfoxScheduledPwrDownTaskFlag = 0;
  3794  00149A  6B8D               	clrf	_SigfoxScheduledPwrDownTaskFlag& (0+255),b
  3795                           
  3796                           ;eusart2.c: 308: PMD0bits.UART2MD = 1;
  3797  00149C  010F               	movlb	15	; () banked
  3798  00149E  8F3F               	bsf	63,7,b	;volatile
  3799                           
  3800                           ; BSR set to: 15
  3801                           
  3802                           ;eusart2.c: 309: do { LATBbits.LATB2 = 1; } while(0);
  3803  0014A0  848A               	bsf	3978,2,c	;volatile
  3804                           
  3805                           ; BSR set to: 15
  3806                           
  3807                           ;eusart2.c: 310: do { LATBbits.LATB5 = 0; } while(0);
  3808  0014A2  9A8A               	bcf	3978,5,c	;volatile
  3809                           
  3810                           ; BSR set to: 15
  3811                           
  3812                           ;eusart2.c: 311: do { LATBbits.LATB0 = 1; } while(0);
  3813  0014A4  808A               	bsf	3978,0,c	;volatile
  3814                           
  3815                           ; BSR set to: 15
  3816                           ;eusart2.c: 312: SFX_STATE = TASK_PARKED;
  3817  0014A6  0100               	movlb	0	; () banked
  3818  0014A8  6BF2               	clrf	_SFX_STATE& (0+255),b
  3819                           
  3820                           ; BSR set to: 0
  3821  0014AA  0012               	return		;funcret
  3822  0014AC                     __end_of_SigfoxTaskPowerDown:
  3823                           	opt stack 0
  3824                           tosu	equ	0xFFF
  3825                           tosh	equ	0xFFE
  3826                           tosl	equ	0xFFD
  3827                           pclath	equ	0xFFA
  3828                           tblptru	equ	0xFF8
  3829                           tblptrh	equ	0xFF7
  3830                           tblptrl	equ	0xFF6
  3831                           tablat	equ	0xFF5
  3832                           prodh	equ	0xFF4
  3833                           prodl	equ	0xFF3
  3834                           intcon	equ	0xFF2
  3835                           intcon2	equ	0xFF1
  3836                           postinc0	equ	0xFEE
  3837                           wreg	equ	0xFE8
  3838                           indf1	equ	0xFE7
  3839                           postdec1	equ	0xFE5
  3840                           fsr1h	equ	0xFE2
  3841                           fsr1l	equ	0xFE1
  3842                           indf2	equ	0xFDF
  3843                           postinc2	equ	0xFDE
  3844                           plusw2	equ	0xFDB
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _SigfoxResponseParser *****************
  3850 ;; Defined at:
  3851 ;;		line 167 in file "mcc_generated_files/eusart2.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;		None
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;  dumyPtr         2   20[BANK0 ] PTR unsigned char 
  3856 ;;		 -> NULL(0), gprsRxBuffer(100), SigfoxRXBuffer(22), 
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  1    wreg      unsigned char 
  3859 ;; Registers used:
  3860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3861 ;; Tracked objects:
  3862 ;;		On entry : 3F/0
  3863 ;;		On exit  : 3F/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3866 ;;      Params:         0       0       0       0       0       0       0
  3867 ;;      Locals:         0       2       0       0       0       0       0
  3868 ;;      Temps:          0       0       0       0       0       0       0
  3869 ;;      Totals:         0       2       0       0       0       0       0
  3870 ;;Total ram usage:        2 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    7
  3873 ;; This function calls:
  3874 ;;		_strstr
  3875 ;; This function is called by:
  3876 ;;		_SigfoxTask
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text22
  3881  001444                     __ptext22:
  3882                           	opt stack 0
  3883  001444                     _SigfoxResponseParser:
  3884                           	opt stack 20
  3885                           
  3886                           ;eusart2.c: 168: char * dumyPtr;
  3887                           ;eusart2.c: 169: dumyPtr = strstr(SigfoxRXBuffer,"OK");
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;incstack = 0
  3891  001444  0E7D               	movlw	low _SigfoxRXBuffer
  3892  001446  0100               	movlb	0	; () banked
  3893  001448  6FD4               	movwf	strstr@s1& (0+255),b
  3894  00144A  0E01               	movlw	high _SigfoxRXBuffer
  3895  00144C  6FD5               	movwf	(strstr@s1+1)& (0+255),b
  3896  00144E  0E53               	movlw	low STR_1
  3897  001450  6FD6               	movwf	strstr@s2& (0+255),b
  3898  001452  0E06               	movlw	high STR_1
  3899  001454  6FD7               	movwf	(strstr@s2+1)& (0+255),b
  3900  001456  EC24  F007         	call	_strstr	;wreg free
  3901  00145A  C0D4  F0D8         	movff	?_strstr,SigfoxResponseParser@dumyPtr
  3902  00145E  C0D5  F0D9         	movff	?_strstr+1,SigfoxResponseParser@dumyPtr+1
  3903                           
  3904                           ; BSR set to: 0
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;eusart2.c: 171: return(1);
  3908  001462  0C01               	retlw	1	;funcret
  3909  001464                     __end_of_SigfoxResponseParser:
  3910                           	opt stack 0
  3911                           tosu	equ	0xFFF
  3912                           tosh	equ	0xFFE
  3913                           tosl	equ	0xFFD
  3914                           pclath	equ	0xFFA
  3915                           tblptru	equ	0xFF8
  3916                           tblptrh	equ	0xFF7
  3917                           tblptrl	equ	0xFF6
  3918                           tablat	equ	0xFF5
  3919                           prodh	equ	0xFF4
  3920                           prodl	equ	0xFF3
  3921                           intcon	equ	0xFF2
  3922                           intcon2	equ	0xFF1
  3923                           postinc0	equ	0xFEE
  3924                           wreg	equ	0xFE8
  3925                           indf1	equ	0xFE7
  3926                           postdec1	equ	0xFE5
  3927                           fsr1h	equ	0xFE2
  3928                           fsr1l	equ	0xFE1
  3929                           indf2	equ	0xFDF
  3930                           postinc2	equ	0xFDE
  3931                           plusw2	equ	0xFDB
  3932                           fsr2h	equ	0xFDA
  3933                           fsr2l	equ	0xFD9
  3934                           status	equ	0xFD8
  3935                           
  3936 ;; *************** function _strstr *****************
  3937 ;; Defined at:
  3938 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/strstr.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  s1              2   16[BANK0 ] PTR const unsigned char 
  3941 ;;		 -> NULL(0), gprsRxBuffer(100), SigfoxRXBuffer(22), 
  3942 ;;  s2              2   18[BANK0 ] PTR const unsigned char 
  3943 ;;		 -> STR_2(3), STR_1(3), 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;		None
  3946 ;; Return value:  Size  Location     Type
  3947 ;;                  2   16[BANK0 ] PTR unsigned char 
  3948 ;; Registers used:
  3949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3950 ;; Tracked objects:
  3951 ;;		On entry : 3F/0
  3952 ;;		On exit  : 3F/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3955 ;;      Params:         0       4       0       0       0       0       0
  3956 ;;      Locals:         0       0       0       0       0       0       0
  3957 ;;      Temps:          0       0       0       0       0       0       0
  3958 ;;      Totals:         0       4       0       0       0       0       0
  3959 ;;Total ram usage:        4 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    6
  3962 ;; This function calls:
  3963 ;;		_strchr
  3964 ;;		_strlen
  3965 ;;		_strncmp
  3966 ;; This function is called by:
  3967 ;;		_SigfoxResponseParser
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           	psect	text23
  3972  000E48                     __ptext23:
  3973                           	opt stack 0
  3974  000E48                     _strstr:
  3975                           	opt stack 20
  3976                           
  3977                           ; BSR set to: 0
  3978                           ;incstack = 0
  3979  000E48  D030               	goto	l2867
  3980  000E4A                     l2859:
  3981                           
  3982                           ; BSR set to: 0
  3983  000E4A  C0D4  F0CD         	movff	strstr@s1,strncmp@s1
  3984  000E4E  C0D5  F0CE         	movff	strstr@s1+1,strncmp@s1+1
  3985  000E52  C0D6  F0CF         	movff	strstr@s2,strncmp@s2
  3986  000E56  C0D7  F0D0         	movff	strstr@s2+1,strncmp@s2+1
  3987  000E5A  C0D6  F0C9         	movff	strstr@s2,strlen@s
  3988  000E5E  C0D7  F0CA         	movff	strstr@s2+1,strlen@s+1
  3989  000E62  EC65  F009         	call	_strlen	;wreg free
  3990  000E66  C0C9  F0D1         	movff	?_strlen,strncmp@len
  3991  000E6A  C0CA  F0D2         	movff	?_strlen+1,strncmp@len+1
  3992  000E6E  ECD4  F007         	call	_strncmp	;wreg free
  3993  000E72  51CD               	movf	?_strncmp& (0+255),w,b
  3994  000E74  11CE               	iorwf	(?_strncmp+1)& (0+255),w,b
  3995  000E76  E105               	bnz	l2865
  3996                           
  3997                           ; BSR set to: 0
  3998  000E78  C0D4  F0D4         	movff	strstr@s1,?_strstr
  3999  000E7C  C0D5  F0D5         	movff	strstr@s1+1,?_strstr+1
  4000  000E80  0012               	return	
  4001  000E82                     l2865:
  4002                           
  4003                           ; BSR set to: 0
  4004  000E82  29D4               	incf	strstr@s1& (0+255),w,b
  4005  000E84  6FC9               	movwf	strchr@ptr& (0+255),b
  4006  000E86  0E00               	movlw	0
  4007  000E88  21D5               	addwfc	(strstr@s1+1)& (0+255),w,b
  4008  000E8A  6FCA               	movwf	(strchr@ptr+1)& (0+255),b
  4009  000E8C  C0D6  FFF6         	movff	strstr@s2,tblptrl
  4010  000E90  C0D7  FFF7         	movff	strstr@s2+1,tblptrh
  4011  000E94                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4012  000E94  6AF8               	clrf	tblptru,c
  4013  000E96                     	endif
  4014  000E96                     	if	0	;tblptru may be non-zero
  4015  000E96                     	endif
  4016  000E96  0008               	tblrd		*
  4017  000E98  50F5               	movf	tablat,w,c
  4018  000E9A  6FCB               	movwf	strchr@chr& (0+255),b
  4019  000E9C  6BCC               	clrf	(strchr@chr+1)& (0+255),b
  4020  000E9E  EC7D  F009         	call	_strchr	;wreg free
  4021  000EA2  C0C9  F0D4         	movff	?_strchr,strstr@s1
  4022  000EA6  C0CA  F0D5         	movff	?_strchr+1,strstr@s1+1
  4023  000EAA                     l2867:
  4024  000EAA  0100               	movlb	0	; () banked
  4025  000EAC  51D4               	movf	strstr@s1& (0+255),w,b
  4026  000EAE  11D5               	iorwf	(strstr@s1+1)& (0+255),w,b
  4027  000EB0  E006               	bz	l1621
  4028                           
  4029                           ; BSR set to: 0
  4030  000EB2  C0D4  FFD9         	movff	strstr@s1,fsr2l
  4031  000EB6  C0D5  FFDA         	movff	strstr@s1+1,fsr2h
  4032  000EBA  50DF               	movf	indf2,w,c
  4033  000EBC  E1C6               	bnz	l2859
  4034  000EBE                     l1621:
  4035                           
  4036                           ; BSR set to: 0
  4037  000EBE  6BD4               	clrf	?_strstr& (0+255),b
  4038  000EC0  6BD5               	clrf	(?_strstr+1)& (0+255),b
  4039                           
  4040                           ; BSR set to: 0
  4041  000EC2  0012               	return		;funcret
  4042  000EC4                     __end_of_strstr:
  4043                           	opt stack 0
  4044                           tosu	equ	0xFFF
  4045                           tosh	equ	0xFFE
  4046                           tosl	equ	0xFFD
  4047                           pclath	equ	0xFFA
  4048                           tblptru	equ	0xFF8
  4049                           tblptrh	equ	0xFF7
  4050                           tblptrl	equ	0xFF6
  4051                           tablat	equ	0xFF5
  4052                           prodh	equ	0xFF4
  4053                           prodl	equ	0xFF3
  4054                           intcon	equ	0xFF2
  4055                           intcon2	equ	0xFF1
  4056                           postinc0	equ	0xFEE
  4057                           wreg	equ	0xFE8
  4058                           indf1	equ	0xFE7
  4059                           postdec1	equ	0xFE5
  4060                           fsr1h	equ	0xFE2
  4061                           fsr1l	equ	0xFE1
  4062                           indf2	equ	0xFDF
  4063                           postinc2	equ	0xFDE
  4064                           plusw2	equ	0xFDB
  4065                           fsr2h	equ	0xFDA
  4066                           fsr2l	equ	0xFD9
  4067                           status	equ	0xFD8
  4068                           
  4069 ;; *************** function _strncmp *****************
  4070 ;; Defined at:
  4071 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/strncmp.c"
  4072 ;; Parameters:    Size  Location     Type
  4073 ;;  s1              2    9[BANK0 ] PTR const unsigned char 
  4074 ;;		 -> NULL(0), gprsRxBuffer(100), SigfoxRXBuffer(22), 
  4075 ;;  s2              2   11[BANK0 ] PTR const unsigned char 
  4076 ;;		 -> STR_2(3), STR_1(3), 
  4077 ;;  len             2   13[BANK0 ] unsigned int 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;		None
  4080 ;; Return value:  Size  Location     Type
  4081 ;;                  2    9[BANK0 ] int 
  4082 ;; Registers used:
  4083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4084 ;; Tracked objects:
  4085 ;;		On entry : 3F/0
  4086 ;;		On exit  : 3F/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4089 ;;      Params:         0       6       0       0       0       0       0
  4090 ;;      Locals:         0       0       0       0       0       0       0
  4091 ;;      Temps:          0       1       0       0       0       0       0
  4092 ;;      Totals:         0       7       0       0       0       0       0
  4093 ;;Total ram usage:        7 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:    5
  4096 ;; This function calls:
  4097 ;;		Nothing
  4098 ;; This function is called by:
  4099 ;;		_strstr
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           	psect	text24
  4104  000FA8                     __ptext24:
  4105                           	opt stack 0
  4106  000FA8                     _strncmp:
  4107                           	opt stack 20
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;incstack = 0
  4111  000FA8  D018               	goto	l2847
  4112  000FAA                     l2837:
  4113                           
  4114                           ; BSR set to: 0
  4115  000FAA  C0CD  FFD9         	movff	strncmp@s1,fsr2l
  4116  000FAE  C0CE  FFDA         	movff	strncmp@s1+1,fsr2h
  4117  000FB2  50DF               	movf	indf2,w,c
  4118  000FB4  E005               	bz	l2841
  4119                           
  4120                           ; BSR set to: 0
  4121  000FB6  C0CD  FFD9         	movff	strncmp@s1,fsr2l
  4122  000FBA  D81A               	call	PL45	;call to abstracted procedure
  4123  000FBC  19D3               	xorwf	??_strncmp& (0+255),w,b
  4124  000FBE  E009               	bz	l2845
  4125  000FC0                     l2841:
  4126                           
  4127                           ; BSR set to: 0
  4128  000FC0  C0CD  FFD9         	movff	strncmp@s1,fsr2l
  4129  000FC4  D815               	call	PL45	;call to abstracted procedure
  4130  000FC6  5DD3               	subwf	??_strncmp& (0+255),w,b
  4131  000FC8  6FCD               	movwf	?_strncmp& (0+255),b
  4132  000FCA  6BCE               	clrf	(?_strncmp+1)& (0+255),b
  4133  000FCC  A0D8               	btfss	status,0,c
  4134  000FCE  07CE               	decf	(?_strncmp+1)& (0+255),f,b
  4135  000FD0  0012               	return	
  4136  000FD2                     l2845:
  4137                           
  4138                           ; BSR set to: 0
  4139  000FD2  4BCD               	infsnz	strncmp@s1& (0+255),f,b
  4140  000FD4  2BCE               	incf	(strncmp@s1+1)& (0+255),f,b
  4141  000FD6  4BCF               	infsnz	strncmp@s2& (0+255),f,b
  4142  000FD8  2BD0               	incf	(strncmp@s2+1)& (0+255),f,b
  4143  000FDA                     l2847:
  4144  000FDA  0100               	movlb	0	; () banked
  4145  000FDC  07D1               	decf	strncmp@len& (0+255),f,b
  4146  000FDE  A0D8               	btfss	status,0,c
  4147  000FE0  07D2               	decf	(strncmp@len+1)& (0+255),f,b
  4148  000FE2  29D1               	incf	strncmp@len& (0+255),w,b
  4149  000FE4  E1E2               	bnz	l2837
  4150  000FE6  29D2               	incf	(strncmp@len+1)& (0+255),w,b
  4151  000FE8  E1E0               	bnz	l2837
  4152                           
  4153                           ; BSR set to: 0
  4154  000FEA  6BCD               	clrf	?_strncmp& (0+255),b
  4155  000FEC  6BCE               	clrf	(?_strncmp+1)& (0+255),b
  4156                           
  4157                           ; BSR set to: 0
  4158  000FEE  0012               	return		;funcret
  4159  000FF0                     __end_of_strncmp:
  4160                           	opt stack 0
  4161  000FF0                     PL45:
  4162                           	opt stack 20
  4163  000FF0  C0CE  FFDA         	movff	strncmp@s1+1,fsr2h
  4164  000FF4  50DF               	movf	indf2,w,c
  4165  000FF6  6FD3               	movwf	??_strncmp& (0+255),b
  4166  000FF8  C0CF  FFF6         	movff	strncmp@s2,tblptrl
  4167  000FFC  C0D0  FFF7         	movff	strncmp@s2+1,tblptrh
  4168  001000                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4169  001000  6AF8               	clrf	tblptru,c
  4170  001002                     	endif
  4171  001002                     	if	0	;tblptru may be non-zero
  4172  001002                     	endif
  4173  001002  0008               	tblrd		*
  4174  001004  50F5               	movf	tablat,w,c
  4175  001006  0012               	return	
  4176  001008                     __end_ofPL45:
  4177                           	opt stack 0
  4178                           tosu	equ	0xFFF
  4179                           tosh	equ	0xFFE
  4180                           tosl	equ	0xFFD
  4181                           pclath	equ	0xFFA
  4182                           tblptru	equ	0xFF8
  4183                           tblptrh	equ	0xFF7
  4184                           tblptrl	equ	0xFF6
  4185                           tablat	equ	0xFF5
  4186                           prodh	equ	0xFF4
  4187                           prodl	equ	0xFF3
  4188                           intcon	equ	0xFF2
  4189                           intcon2	equ	0xFF1
  4190                           postinc0	equ	0xFEE
  4191                           wreg	equ	0xFE8
  4192                           indf1	equ	0xFE7
  4193                           postdec1	equ	0xFE5
  4194                           fsr1h	equ	0xFE2
  4195                           fsr1l	equ	0xFE1
  4196                           indf2	equ	0xFDF
  4197                           postinc2	equ	0xFDE
  4198                           plusw2	equ	0xFDB
  4199                           fsr2h	equ	0xFDA
  4200                           fsr2l	equ	0xFD9
  4201                           status	equ	0xFD8
  4202                           
  4203 ;; *************** function _strlen *****************
  4204 ;; Defined at:
  4205 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/strlen.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;  s               2    5[BANK0 ] PTR const unsigned char 
  4208 ;;		 -> STR_2(3), STR_1(3), 
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;  cp              2    7[BANK0 ] PTR const unsigned char 
  4211 ;;		 -> STR_2(3), STR_1(3), 
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  2    5[BANK0 ] unsigned int 
  4214 ;; Registers used:
  4215 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 3F/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4221 ;;      Params:         0       2       0       0       0       0       0
  4222 ;;      Locals:         0       2       0       0       0       0       0
  4223 ;;      Temps:          0       0       0       0       0       0       0
  4224 ;;      Totals:         0       4       0       0       0       0       0
  4225 ;;Total ram usage:        4 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    5
  4228 ;; This function calls:
  4229 ;;		Nothing
  4230 ;; This function is called by:
  4231 ;;		_strstr
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           	psect	text25
  4236  0012CA                     __ptext25:
  4237                           	opt stack 0
  4238  0012CA                     _strlen:
  4239                           	opt stack 20
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;incstack = 0
  4243  0012CA  C0C9  F0CB         	movff	strlen@s,strlen@cp
  4244  0012CE  C0CA  F0CC         	movff	strlen@s+1,strlen@cp+1
  4245  0012D2  D003               	goto	l2829
  4246  0012D4                     l2827:
  4247  0012D4  0100               	movlb	0	; () banked
  4248  0012D6  4BCB               	infsnz	strlen@cp& (0+255),f,b
  4249  0012D8  2BCC               	incf	(strlen@cp+1)& (0+255),f,b
  4250  0012DA                     l2829:
  4251  0012DA  C0CB  FFF6         	movff	strlen@cp,tblptrl
  4252  0012DE  C0CC  FFF7         	movff	strlen@cp+1,tblptrh
  4253  0012E2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4254  0012E2  6AF8               	clrf	tblptru,c
  4255  0012E4                     	endif
  4256  0012E4                     	if	0	;tblptru may be non-zero
  4257  0012E4                     	endif
  4258  0012E4  0008               	tblrd		*
  4259  0012E6  50F5               	movf	tablat,w,c
  4260  0012E8  E1F5               	bnz	l2827
  4261  0012EA  0100               	movlb	0	; () banked
  4262  0012EC  51C9               	movf	strlen@s& (0+255),w,b
  4263  0012EE  5DCB               	subwf	strlen@cp& (0+255),w,b
  4264  0012F0  6FC9               	movwf	?_strlen& (0+255),b
  4265  0012F2  51CA               	movf	(strlen@s+1)& (0+255),w,b
  4266  0012F4  59CC               	subwfb	(strlen@cp+1)& (0+255),w,b
  4267  0012F6  6FCA               	movwf	(?_strlen+1)& (0+255),b
  4268                           
  4269                           ; BSR set to: 0
  4270  0012F8  0012               	return		;funcret
  4271  0012FA                     __end_of_strlen:
  4272                           	opt stack 0
  4273                           tosu	equ	0xFFF
  4274                           tosh	equ	0xFFE
  4275                           tosl	equ	0xFFD
  4276                           pclath	equ	0xFFA
  4277                           tblptru	equ	0xFF8
  4278                           tblptrh	equ	0xFF7
  4279                           tblptrl	equ	0xFF6
  4280                           tablat	equ	0xFF5
  4281                           prodh	equ	0xFF4
  4282                           prodl	equ	0xFF3
  4283                           intcon	equ	0xFF2
  4284                           intcon2	equ	0xFF1
  4285                           postinc0	equ	0xFEE
  4286                           wreg	equ	0xFE8
  4287                           indf1	equ	0xFE7
  4288                           postdec1	equ	0xFE5
  4289                           fsr1h	equ	0xFE2
  4290                           fsr1l	equ	0xFE1
  4291                           indf2	equ	0xFDF
  4292                           postinc2	equ	0xFDE
  4293                           plusw2	equ	0xFDB
  4294                           fsr2h	equ	0xFDA
  4295                           fsr2l	equ	0xFD9
  4296                           status	equ	0xFD8
  4297                           
  4298 ;; *************** function _strchr *****************
  4299 ;; Defined at:
  4300 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/strchr.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;  ptr             2    5[BANK0 ] PTR const unsigned char 
  4303 ;;		 -> NULL(0), gprsRxBuffer(100), SigfoxRXBuffer(22), 
  4304 ;;  chr             2    7[BANK0 ] int 
  4305 ;; Auto vars:     Size  Location     Type
  4306 ;;		None
  4307 ;; Return value:  Size  Location     Type
  4308 ;;                  2    5[BANK0 ] PTR unsigned char 
  4309 ;; Registers used:
  4310 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4311 ;; Tracked objects:
  4312 ;;		On entry : 3F/0
  4313 ;;		On exit  : 3F/0
  4314 ;;		Unchanged: 0/0
  4315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4316 ;;      Params:         0       4       0       0       0       0       0
  4317 ;;      Locals:         0       0       0       0       0       0       0
  4318 ;;      Temps:          0       1       0       0       0       0       0
  4319 ;;      Totals:         0       5       0       0       0       0       0
  4320 ;;Total ram usage:        5 bytes
  4321 ;; Hardware stack levels used:    1
  4322 ;; Hardware stack levels required when called:    5
  4323 ;; This function calls:
  4324 ;;		Nothing
  4325 ;; This function is called by:
  4326 ;;		_strstr
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           	psect	text26
  4331  0012FA                     __ptext26:
  4332                           	opt stack 0
  4333  0012FA                     _strchr:
  4334                           	opt stack 20
  4335  0012FA  D811               	call	PL49	;call to abstracted procedure
  4336  0012FC  0100               	movlb	0	; () banked
  4337  0012FE  51CB               	movf	strchr@chr& (0+255),w,b
  4338  001300  18DE               	xorwf	postinc2,w,c
  4339  001302  E105               	bnz	l2855
  4340                           
  4341                           ; BSR set to: 0
  4342  001304  C0C9  F0C9         	movff	strchr@ptr,?_strchr
  4343  001308  C0CA  F0CA         	movff	strchr@ptr+1,?_strchr+1
  4344  00130C  0012               	return	
  4345  00130E                     l2855:
  4346                           
  4347                           ; BSR set to: 0
  4348  00130E  D807               	call	PL49	;call to abstracted procedure
  4349  001310  4BC9               	infsnz	strchr@ptr& (0+255),f,b
  4350  001312  2BCA               	incf	(strchr@ptr+1)& (0+255),f,b
  4351  001314  50DF               	movf	indf2,w,c
  4352  001316  E1F1               	bnz	l2849
  4353                           
  4354                           ; BSR set to: 0
  4355  001318  6BC9               	clrf	?_strchr& (0+255),b
  4356  00131A  6BCA               	clrf	(?_strchr+1)& (0+255),b
  4357                           
  4358                           ; BSR set to: 0
  4359  00131C  0012               	return		;funcret
  4360  00131E                     __end_of_strchr:
  4361                           	opt stack 0
  4362  00131E                     PL49:
  4363                           	opt stack 20
  4364  00131E  C0C9  FFD9         	movff	strchr@ptr,fsr2l
  4365  001322  C0CA  FFDA         	movff	strchr@ptr+1,fsr2h
  4366  001326  0012               	return	
  4367  001328                     __end_ofPL49:
  4368                           	opt stack 0
  4369                           tosu	equ	0xFFF
  4370                           tosh	equ	0xFFE
  4371                           tosl	equ	0xFFD
  4372                           pclath	equ	0xFFA
  4373                           tblptru	equ	0xFF8
  4374                           tblptrh	equ	0xFF7
  4375                           tblptrl	equ	0xFF6
  4376                           tablat	equ	0xFF5
  4377                           prodh	equ	0xFF4
  4378                           prodl	equ	0xFF3
  4379                           intcon	equ	0xFF2
  4380                           intcon2	equ	0xFF1
  4381                           postinc0	equ	0xFEE
  4382                           wreg	equ	0xFE8
  4383                           indf1	equ	0xFE7
  4384                           postdec1	equ	0xFE5
  4385                           fsr1h	equ	0xFE2
  4386                           fsr1l	equ	0xFE1
  4387                           indf2	equ	0xFDF
  4388                           postinc2	equ	0xFDE
  4389                           plusw2	equ	0xFDB
  4390                           fsr2h	equ	0xFDA
  4391                           fsr2l	equ	0xFD9
  4392                           status	equ	0xFD8
  4393                           
  4394 ;; *************** function _SigfoxCommManager *****************
  4395 ;; Defined at:
  4396 ;;		line 249 in file "mcc_generated_files/eusart2.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;  SigfoxComman    1    wreg     enum E6708
  4399 ;; Auto vars:     Size  Location     Type
  4400 ;;  SigfoxComman    1   20[BANK0 ] enum E6708
  4401 ;; Return value:  Size  Location     Type
  4402 ;;                  1    wreg      enum E6663
  4403 ;; Registers used:
  4404 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4405 ;; Tracked objects:
  4406 ;;		On entry : 0/0
  4407 ;;		On exit  : 3F/0
  4408 ;;		Unchanged: 0/0
  4409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4410 ;;      Params:         0       0       0       0       0       0       0
  4411 ;;      Locals:         0       1       0       0       0       0       0
  4412 ;;      Temps:          0       0       0       0       0       0       0
  4413 ;;      Totals:         0       1       0       0       0       0       0
  4414 ;;Total ram usage:        1 bytes
  4415 ;; Hardware stack levels used:    1
  4416 ;; Hardware stack levels required when called:    7
  4417 ;; This function calls:
  4418 ;;		_SigfoxCommandSelector
  4419 ;;		_SigfoxTXReady
  4420 ;;		_SigfoxTransmit
  4421 ;;		_SigfoxVerifyTransactionStatus
  4422 ;; This function is called by:
  4423 ;;		_SigfoxTask
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           	psect	text27
  4428  001008                     __ptext27:
  4429                           	opt stack 0
  4430  001008                     _SigfoxCommManager:
  4431                           	opt stack 20
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;incstack = 0
  4435                           ;SigfoxCommManager@SigfoxCommand stored from wreg
  4436  001008  0100               	movlb	0	; () banked
  4437  00100A  6FD8               	movwf	SigfoxCommManager@SigfoxCommand& (0+255),b
  4438                           
  4439                           ;eusart2.c: 251: SigfoxTransactionResult = TASK_ON_COURSE;
  4440  00100C  0E01               	movlw	1
  4441  00100E  6FF1               	movwf	_SigfoxTransactionResult& (0+255),b
  4442                           
  4443                           ;eusart2.c: 252: switch(SigfoxCommManagerState){
  4444  001010  D01C               	goto	l2935
  4445  001012                     l2907:
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;eusart2.c: 254: if(SigfoxTXReady()){
  4449  001012  EC82  F00A         	call	_SigfoxTXReady	;wreg free
  4450  001016  0900               	iorlw	0
  4451  001018  E01D               	bz	l2937
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;eusart2.c: 255: SigfoxCommandSelector(SigfoxCommand);
  4455  00101A  51D8               	movf	SigfoxCommManager@SigfoxCommand& (0+255),w,b
  4456  00101C  EC27  F005         	call	_SigfoxCommandSelector
  4457                           
  4458                           ;eusart2.c: 256: SigfoxCommManagerState = TASK_DETECT_TRANSACTION_END_SM;
  4459  001020  0E01               	movlw	1
  4460  001022  0100               	movlb	0	; () banked
  4461  001024  6F91               	movwf	_SigfoxCommManagerState& (0+255),b
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;eusart2.c: 257: SigfoxTransmit();
  4465  001026  EC9F  F00A         	call	_SigfoxTransmit	;wreg free
  4466  00102A  0C01               	retlw	1
  4467  00102C                     l2915:
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;eusart2.c: 261: if(SigfoxTimeOutTimer == 0){
  4471  00102C  5187               	movf	_SigfoxTimeOutTimer& (0+255),w,b
  4472  00102E  E104               	bnz	l2923
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;eusart2.c: 262: PIE3bits.TX2IE = 0;
  4476  001030  98A3               	bcf	4003,4,c	;volatile
  4477                           
  4478                           ;eusart2.c: 263: PIE3bits.RC2IE = 0;
  4479  001032  9AA3               	bcf	4003,5,c	;volatile
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;eusart2.c: 264: return(SigfoxVerifyTransactionStatus());
  4483  001034  EFAA  F009         	goto	_SigfoxVerifyTransactionStatus	;wreg free
  4484  001038                     l2923:
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;eusart2.c: 265: }
  4488                           ;eusart2.c: 266: if(SigfoxMsgReceivedFlag){
  4489  001038  5190               	movf	_SigfoxMsgReceivedFlag& (0+255),w,b
  4490  00103A  E00C               	bz	l2937
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;eusart2.c: 267: SigfoxTimeOutTimer = 0;
  4494  00103C  6B87               	clrf	_SigfoxTimeOutTimer& (0+255),b
  4495                           
  4496                           ; BSR set to: 0
  4497                           ;eusart2.c: 268: return(SigfoxVerifyTransactionStatus());
  4498  00103E  EFAA  F009         	goto	_SigfoxVerifyTransactionStatus	;wreg free
  4499  001042                     l300:
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;eusart2.c: 272: SigfoxCommManagerState = TASK_SEND_COMMAND_SM;
  4503  001042  6B91               	clrf	_SigfoxCommManagerState& (0+255),b
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;eusart2.c: 273: SigfoxTxDelay = 2;
  4507  001044  0E02               	movlw	2
  4508  001046  6F86               	movwf	_SigfoxTxDelay& (0+255),b
  4509                           
  4510                           ;eusart2.c: 274: break;
  4511  001048  0C01               	retlw	1
  4512  00104A                     l2935:
  4513                           
  4514                           ; BSR set to: 0
  4515  00104A  5191               	movf	_SigfoxCommManagerState& (0+255),w,b
  4516                           
  4517                           ; Switch size 1, requested type "space"
  4518                           ; Number of cases is 2, Range of values is 0 to 1
  4519                           ; switch strategies available:
  4520                           ; Name         Instructions Cycles
  4521                           ; simple_byte            7     4 (average)
  4522                           ;	Chosen strategy is simple_byte
  4523  00104C  E0E2               	bz	l2907
  4524  00104E  0A01               	xorlw	1	; case 1
  4525  001050  E0ED               	bz	l2915
  4526  001052  D7F7               	goto	l300
  4527  001054                     l2937:
  4528                           
  4529                           ; BSR set to: 0
  4530                           
  4531                           ; BSR set to: 0
  4532                           ;eusart2.c: 276: return(TASK_ON_COURSE);
  4533  001054  0C01               	retlw	1	;funcret
  4534  001056                     __end_of_SigfoxCommManager:
  4535                           	opt stack 0
  4536                           tosu	equ	0xFFF
  4537                           tosh	equ	0xFFE
  4538                           tosl	equ	0xFFD
  4539                           pclath	equ	0xFFA
  4540                           tblptru	equ	0xFF8
  4541                           tblptrh	equ	0xFF7
  4542                           tblptrl	equ	0xFF6
  4543                           tablat	equ	0xFF5
  4544                           prodh	equ	0xFF4
  4545                           prodl	equ	0xFF3
  4546                           intcon	equ	0xFF2
  4547                           intcon2	equ	0xFF1
  4548                           postinc0	equ	0xFEE
  4549                           wreg	equ	0xFE8
  4550                           indf1	equ	0xFE7
  4551                           postdec1	equ	0xFE5
  4552                           fsr1h	equ	0xFE2
  4553                           fsr1l	equ	0xFE1
  4554                           indf2	equ	0xFDF
  4555                           postinc2	equ	0xFDE
  4556                           plusw2	equ	0xFDB
  4557                           fsr2h	equ	0xFDA
  4558                           fsr2l	equ	0xFD9
  4559                           status	equ	0xFD8
  4560                           
  4561 ;; *************** function _SigfoxVerifyTransactionStatus *****************
  4562 ;; Defined at:
  4563 ;;		line 229 in file "mcc_generated_files/eusart2.c"
  4564 ;; Parameters:    Size  Location     Type
  4565 ;;		None
  4566 ;; Auto vars:     Size  Location     Type
  4567 ;;		None
  4568 ;; Return value:  Size  Location     Type
  4569 ;;                  1    wreg      enum E6663
  4570 ;; Registers used:
  4571 ;;		wreg, status,2, status,0
  4572 ;; Tracked objects:
  4573 ;;		On entry : 3F/0
  4574 ;;		On exit  : 3F/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4577 ;;      Params:         0       0       0       0       0       0       0
  4578 ;;      Locals:         0       0       0       0       0       0       0
  4579 ;;      Temps:          0       0       0       0       0       0       0
  4580 ;;      Totals:         0       0       0       0       0       0       0
  4581 ;;Total ram usage:        0 bytes
  4582 ;; Hardware stack levels used:    1
  4583 ;; Hardware stack levels required when called:    5
  4584 ;; This function calls:
  4585 ;;		Nothing
  4586 ;; This function is called by:
  4587 ;;		_SigfoxCommManager
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           	psect	text28
  4592  001354                     __ptext28:
  4593                           	opt stack 0
  4594  001354                     _SigfoxVerifyTransactionStatus:
  4595                           	opt stack 21
  4596                           
  4597                           ;eusart2.c: 231: SigfoxTxDelay = 2;
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;incstack = 0
  4601  001354  0E02               	movlw	2
  4602  001356  0100               	movlb	0	; () banked
  4603  001358  6F86               	movwf	_SigfoxTxDelay& (0+255),b
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;eusart2.c: 232: SigfoxCommManagerState = TASK_SEND_COMMAND_SM;
  4607  00135A  6B91               	clrf	_SigfoxCommManagerState& (0+255),b
  4608                           
  4609                           ;eusart2.c: 233: if(SigfoxMsgReceivedFlag){
  4610  00135C  5190               	movf	_SigfoxMsgReceivedFlag& (0+255),w,b
  4611  00135E  E004               	bz	l1847
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;eusart2.c: 234: SigfoxTransactionResult = TASK_DATA_READY;
  4615  001360  0E02               	movlw	2
  4616  001362  6FF1               	movwf	_SigfoxTransactionResult& (0+255),b
  4617                           
  4618                           ; BSR set to: 0
  4619                           ;eusart2.c: 235: SigfoxMsgReceivedFlag = 0;
  4620  001364  6B90               	clrf	_SigfoxMsgReceivedFlag& (0+255),b
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;eusart2.c: 236: return(TASK_DATA_READY);
  4624  001366  0C02               	retlw	2
  4625  001368                     l1847:
  4626                           
  4627                           ; BSR set to: 0
  4628                           ;eusart2.c: 237: }
  4629                           ;eusart2.c: 238: if(SigfoxTransactionAttemps){
  4630  001368  518A               	movf	_SigfoxTransactionAttemps& (0+255),w,b
  4631  00136A  E001               	bz	l1851
  4632                           
  4633                           ; BSR set to: 0
  4634                           ;eusart2.c: 239: SigfoxTransactionAttemps--;
  4635  00136C  078A               	decf	_SigfoxTransactionAttemps& (0+255),f,b
  4636  00136E                     l1851:
  4637                           
  4638                           ; BSR set to: 0
  4639                           ;eusart2.c: 240: }
  4640                           ;eusart2.c: 241: if(SigfoxTransactionAttemps == 0){
  4641  00136E  518A               	movf	_SigfoxTransactionAttemps& (0+255),w,b
  4642  001370  E104               	bnz	l1861
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;eusart2.c: 242: SFX_STATE = TASK_RESET_TASK;
  4646  001372  0E01               	movlw	1
  4647  001374  6FF2               	movwf	_SFX_STATE& (0+255),b
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;eusart2.c: 243: SigfoxTransactionResult = TASK_NO_SENSOR_FOUND;
  4651  001376  6BF1               	clrf	_SigfoxTransactionResult& (0+255),b
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;eusart2.c: 244: return(TASK_NO_SENSOR_FOUND);
  4655  001378  0C00               	retlw	0
  4656  00137A                     l1861:
  4657                           
  4658                           ; BSR set to: 0
  4659                           ;eusart2.c: 245: }
  4660                           ;eusart2.c: 246: SigfoxTransactionResult = TASK_ON_COURSE;
  4661  00137A  0E01               	movlw	1
  4662  00137C  6FF1               	movwf	_SigfoxTransactionResult& (0+255),b
  4663                           
  4664                           ; BSR set to: 0
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;eusart2.c: 247: return(TASK_ON_COURSE);
  4668  00137E  0C01               	retlw	1	;funcret
  4669  001380                     __end_of_SigfoxVerifyTransactionStatus:
  4670                           	opt stack 0
  4671                           tosu	equ	0xFFF
  4672                           tosh	equ	0xFFE
  4673                           tosl	equ	0xFFD
  4674                           pclath	equ	0xFFA
  4675                           tblptru	equ	0xFF8
  4676                           tblptrh	equ	0xFF7
  4677                           tblptrl	equ	0xFF6
  4678                           tablat	equ	0xFF5
  4679                           prodh	equ	0xFF4
  4680                           prodl	equ	0xFF3
  4681                           intcon	equ	0xFF2
  4682                           intcon2	equ	0xFF1
  4683                           postinc0	equ	0xFEE
  4684                           wreg	equ	0xFE8
  4685                           indf1	equ	0xFE7
  4686                           postdec1	equ	0xFE5
  4687                           fsr1h	equ	0xFE2
  4688                           fsr1l	equ	0xFE1
  4689                           indf2	equ	0xFDF
  4690                           postinc2	equ	0xFDE
  4691                           plusw2	equ	0xFDB
  4692                           fsr2h	equ	0xFDA
  4693                           fsr2l	equ	0xFD9
  4694                           status	equ	0xFD8
  4695                           
  4696 ;; *************** function _SigfoxTransmit *****************
  4697 ;; Defined at:
  4698 ;;		line 211 in file "mcc_generated_files/eusart2.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;		None
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;		None
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  1    wreg      void 
  4705 ;; Registers used:
  4706 ;;		None
  4707 ;; Tracked objects:
  4708 ;;		On entry : 3F/0
  4709 ;;		On exit  : 3F/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4712 ;;      Params:         0       0       0       0       0       0       0
  4713 ;;      Locals:         0       0       0       0       0       0       0
  4714 ;;      Temps:          0       0       0       0       0       0       0
  4715 ;;      Totals:         0       0       0       0       0       0       0
  4716 ;;Total ram usage:        0 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    5
  4719 ;; This function calls:
  4720 ;;		Nothing
  4721 ;; This function is called by:
  4722 ;;		_SigfoxCommManager
  4723 ;; This function uses a non-reentrant model
  4724 ;;
  4725                           
  4726                           	psect	text29
  4727  00153E                     __ptext29:
  4728                           	opt stack 0
  4729  00153E                     _SigfoxTransmit:
  4730                           	opt stack 21
  4731                           
  4732                           ;eusart2.c: 213: SigfoxTXBufferPtr = 0;
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;incstack = 0
  4736  00153E  0100               	movlb	0	; () banked
  4737  001540  6B89               	clrf	_SigfoxTXBufferPtr& (0+255),b
  4738                           
  4739                           ;eusart2.c: 214: PIE3bits.TX2IE = 1;
  4740  001542  88A3               	bsf	4003,4,c	;volatile
  4741                           
  4742                           ; BSR set to: 0
  4743  001544  0012               	return		;funcret
  4744  001546                     __end_of_SigfoxTransmit:
  4745                           	opt stack 0
  4746                           tosu	equ	0xFFF
  4747                           tosh	equ	0xFFE
  4748                           tosl	equ	0xFFD
  4749                           pclath	equ	0xFFA
  4750                           tblptru	equ	0xFF8
  4751                           tblptrh	equ	0xFF7
  4752                           tblptrl	equ	0xFF6
  4753                           tablat	equ	0xFF5
  4754                           prodh	equ	0xFF4
  4755                           prodl	equ	0xFF3
  4756                           intcon	equ	0xFF2
  4757                           intcon2	equ	0xFF1
  4758                           postinc0	equ	0xFEE
  4759                           wreg	equ	0xFE8
  4760                           indf1	equ	0xFE7
  4761                           postdec1	equ	0xFE5
  4762                           fsr1h	equ	0xFE2
  4763                           fsr1l	equ	0xFE1
  4764                           indf2	equ	0xFDF
  4765                           postinc2	equ	0xFDE
  4766                           plusw2	equ	0xFDB
  4767                           fsr2h	equ	0xFDA
  4768                           fsr2l	equ	0xFD9
  4769                           status	equ	0xFD8
  4770                           
  4771 ;; *************** function _SigfoxTXReady *****************
  4772 ;; Defined at:
  4773 ;;		line 218 in file "mcc_generated_files/eusart2.c"
  4774 ;; Parameters:    Size  Location     Type
  4775 ;;		None
  4776 ;; Auto vars:     Size  Location     Type
  4777 ;;		None
  4778 ;; Return value:  Size  Location     Type
  4779 ;;                  1    wreg      unsigned char 
  4780 ;; Registers used:
  4781 ;;		wreg, status,2
  4782 ;; Tracked objects:
  4783 ;;		On entry : 0/0
  4784 ;;		On exit  : 3F/0
  4785 ;;		Unchanged: 0/0
  4786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4787 ;;      Params:         0       0       0       0       0       0       0
  4788 ;;      Locals:         0       0       0       0       0       0       0
  4789 ;;      Temps:          0       0       0       0       0       0       0
  4790 ;;      Totals:         0       0       0       0       0       0       0
  4791 ;;Total ram usage:        0 bytes
  4792 ;; Hardware stack levels used:    1
  4793 ;; Hardware stack levels required when called:    5
  4794 ;; This function calls:
  4795 ;;		Nothing
  4796 ;; This function is called by:
  4797 ;;		_SigfoxCommManager
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801                           	psect	text30
  4802  001504                     __ptext30:
  4803                           	opt stack 0
  4804  001504                     _SigfoxTXReady:
  4805                           	opt stack 21
  4806                           
  4807                           ;eusart2.c: 219: if(!SigfoxTxDelay){
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;incstack = 0
  4811  001504  0100               	movlb	0	; () banked
  4812  001506  5186               	movf	_SigfoxTxDelay& (0+255),w,b
  4813  001508  E103               	bnz	l1831
  4814                           
  4815                           ; BSR set to: 0
  4816                           ;eusart2.c: 221: return(!PIE3bits.TX2IE);
  4817  00150A  A8A3               	btfss	4003,4,c	;volatile
  4818  00150C  0C01               	retlw	1
  4819  00150E  0C00               	retlw	0
  4820  001510                     l1831:
  4821                           
  4822                           ; BSR set to: 0
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;eusart2.c: 222: }
  4826                           ;eusart2.c: 223: return(0);
  4827  001510  0C00               	retlw	0	;funcret
  4828  001512                     __end_of_SigfoxTXReady:
  4829                           	opt stack 0
  4830                           tosu	equ	0xFFF
  4831                           tosh	equ	0xFFE
  4832                           tosl	equ	0xFFD
  4833                           pclath	equ	0xFFA
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           intcon	equ	0xFF2
  4841                           intcon2	equ	0xFF1
  4842                           postinc0	equ	0xFEE
  4843                           wreg	equ	0xFE8
  4844                           indf1	equ	0xFE7
  4845                           postdec1	equ	0xFE5
  4846                           fsr1h	equ	0xFE2
  4847                           fsr1l	equ	0xFE1
  4848                           indf2	equ	0xFDF
  4849                           postinc2	equ	0xFDE
  4850                           plusw2	equ	0xFDB
  4851                           fsr2h	equ	0xFDA
  4852                           fsr2l	equ	0xFD9
  4853                           status	equ	0xFD8
  4854                           
  4855 ;; *************** function _SigfoxCommandSelector *****************
  4856 ;; Defined at:
  4857 ;;		line 173 in file "mcc_generated_files/eusart2.c"
  4858 ;; Parameters:    Size  Location     Type
  4859 ;;  SigfoxComman    1    wreg     enum E6708
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;  SigfoxComman    1   19[BANK0 ] enum E6708
  4862 ;;  SFX_COMMAND_    4   11[BANK0 ] const unsigned char [4]
  4863 ;;  SigfoxRomCom    2   17[BANK0 ] PTR const unsigned char 
  4864 ;;		 -> SigfoxCommandsDefinitions(60), 
  4865 ;;  SFX_COMMAND_    2   15[BANK0 ] const unsigned char [2]
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  1    wreg      void 
  4868 ;; Registers used:
  4869 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4870 ;; Tracked objects:
  4871 ;;		On entry : 3F/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4875 ;;      Params:         0       0       0       0       0       0       0
  4876 ;;      Locals:         0       9       0       0       0       0       0
  4877 ;;      Temps:          0       0       0       0       0       0       0
  4878 ;;      Totals:         0       9       0       0       0       0       0
  4879 ;;Total ram usage:        9 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; Hardware stack levels required when called:    6
  4882 ;; This function calls:
  4883 ;;		_strcat
  4884 ;;		_strcpy
  4885 ;; This function is called by:
  4886 ;;		_SigfoxCommManager
  4887 ;; This function uses a non-reentrant model
  4888 ;;
  4889                           
  4890                           	psect	text31
  4891  000A4E                     __ptext31:
  4892                           	opt stack 0
  4893  000A4E                     _SigfoxCommandSelector:
  4894                           	opt stack 20
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;incstack = 0
  4898                           ;SigfoxCommandSelector@SigfoxCommand stored from wreg
  4899  000A4E  0100               	movlb	0	; () banked
  4900  000A50  6FD7               	movwf	SigfoxCommandSelector@SigfoxCommand& (0+255),b
  4901                           
  4902                           ;eusart2.c: 175: const char *SigfoxRomCommandStrPtr;
  4903                           ;eusart2.c: 176: const char SFX_COMMAND_TAIL_STR[] = {0x0d, 0};
  4904  000A52  0E08               	movlw	low SigfoxCommandSelector@F6860
  4905  000A54  6EF6               	movwf	tblptrl,c
  4906  000A56                     	if	1	;There is more than 1 active tblptr byte
  4907  000A56  0E06               	movlw	high SigfoxCommandSelector@F6860
  4908  000A58  6EF7               	movwf	tblptrh,c
  4909  000A5A                     	endif
  4910  000A5A                     	if	1	;There are 3 active tblptr bytes
  4911  000A5A  0E00               	movlw	low (SigfoxCommandSelector@F6860 shr (0+16))
  4912  000A5C  6EF8               	movwf	tblptru,c
  4913  000A5E                     	endif
  4914  000A5E  0009               	tblrd		*+
  4915  000A60  CFF5 F0D3          	movff	tablat,SigfoxCommandSelector@SFX_COMMAND_TAIL_STR
  4916  000A64  000A               	tblrd		*-
  4917  000A66  CFF5 F0D4          	movff	tablat,SigfoxCommandSelector@SFX_COMMAND_TAIL_STR+1
  4918                           
  4919                           ;eusart2.c: 177: const char SFX_COMMAND_TAIL_ACK_STR[] = {',','1',0x0d, 0};
  4920  000A6A  0E01               	movlw	low SigfoxCommandSelector@F6862
  4921  000A6C  6EF6               	movwf	tblptrl,c
  4922  000A6E                     	if	1	;There is more than 1 active tblptr byte
  4923  000A6E  0E06               	movlw	high SigfoxCommandSelector@F6862
  4924  000A70  6EF7               	movwf	tblptrh,c
  4925  000A72                     	endif
  4926  000A72                     	if	1	;There are 3 active tblptr bytes
  4927  000A72  0E00               	movlw	low (SigfoxCommandSelector@F6862 shr (0+16))
  4928  000A74  6EF8               	movwf	tblptru,c
  4929  000A76                     	endif
  4930  000A76  0009               	tblrd		*+
  4931  000A78  CFF5 F0CF          	movff	tablat,SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR
  4932  000A7C  0009               	tblrd		*+
  4933  000A7E  CFF5 F0D0          	movff	tablat,SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR+1
  4934  000A82  0009               	tblrd		*+
  4935  000A84  CFF5 F0D1          	movff	tablat,SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR+2
  4936  000A88  000A               	tblrd		*-
  4937  000A8A  CFF5 F0D2          	movff	tablat,SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR+3
  4938                           
  4939                           ;eusart2.c: 179: SigfoxTimeOutTimer = 5;
  4940  000A8E  0E05               	movlw	5
  4941  000A90  6F87               	movwf	_SigfoxTimeOutTimer& (0+255),b
  4942                           
  4943                           ; BSR set to: 0
  4944                           ;eusart2.c: 180: SigfoxRomCommandStrPtr = SigfoxCommandsDefinitions[SigfoxCommand];
  4945  000A92  51D7               	movf	SigfoxCommandSelector@SigfoxCommand& (0+255),w,b
  4946  000A94  0D0A               	mullw	10
  4947  000A96  0E0A               	movlw	low _SigfoxCommandsDefinitions
  4948  000A98  24F3               	addwf	prodl,w,c
  4949  000A9A  6FD5               	movwf	SigfoxCommandSelector@SigfoxRomCommandStrPtr& (0+255),b
  4950  000A9C  0E06               	movlw	high _SigfoxCommandsDefinitions
  4951  000A9E  20F4               	addwfc	prodh,w,c
  4952  000AA0  6FD6               	movwf	(SigfoxCommandSelector@SigfoxRomCommandStrPtr+1)& (0+255),b
  4953                           
  4954                           ;eusart2.c: 181: switch(SigfoxCommand){
  4955  000AA2  D019               	goto	l2891
  4956  000AA4                     l2877:
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;eusart2.c: 183: strcpy(SigfoxTXBuffer,SigfoxRomCommandStrPtr);
  4960  000AA4  D838               	call	PL6	;call to abstracted procedure
  4961  000AA6  ECF7  F008         	call	_strcpy	;wreg free
  4962  000AAA  0012               	return	
  4963  000AAC                     l2881:
  4964                           
  4965                           ; BSR set to: 0
  4966                           ;eusart2.c: 186: case SFX_CMD_SEND_STATUS:
  4967                           ;eusart2.c: 187: case SFX_CMD_ADJ_PWR:
  4968                           ;eusart2.c: 188: strcpy(SigfoxTXBuffer,SigfoxRomCommandStrPtr);
  4969  000AAC  D834               	call	PL6	;call to abstracted procedure
  4970  000AAE  ECF7  F008         	call	_strcpy	;wreg free
  4971                           
  4972                           ;eusart2.c: 189: break;
  4973  000AB2  D01D               	goto	l2893
  4974  000AB4                     l2883:
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;eusart2.c: 191: case SFX_CMD_SEND_MSG_WAIT_ACK:
  4978                           ;eusart2.c: 192: SigfoxTimeOutTimer = 30;
  4979  000AB4  0E1E               	movlw	30
  4980  000AB6  6F87               	movwf	_SigfoxTimeOutTimer& (0+255),b
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;eusart2.c: 193: strcpy(SigfoxTXBuffer,SigfoxRomCommandStrPtr);
  4984  000AB8  D82E               	call	PL6	;call to abstracted procedure
  4985  000ABA  ECF7  F008         	call	_strcpy	;wreg free
  4986                           
  4987                           ;eusart2.c: 194: strcat(SigfoxTXBuffer,SigfoxPayloadBuffer);
  4988  000ABE  0E95               	movlw	low _SigfoxTXBuffer
  4989  000AC0  0100               	movlb	0	; () banked
  4990  000AC2  6FC9               	movwf	strcat@to& (0+255),b
  4991  000AC4  0E00               	movlw	high _SigfoxTXBuffer
  4992  000AC6  6FCA               	movwf	(strcat@to+1)& (0+255),b
  4993  000AC8  0E64               	movlw	low _SigfoxPayloadBuffer
  4994  000ACA  6FCB               	movwf	strcat@from& (0+255),b
  4995  000ACC  0E01               	movlw	high _SigfoxPayloadBuffer
  4996  000ACE  6FCC               	movwf	(strcat@from+1)& (0+255),b
  4997  000AD0  EC2B  F008         	call	_strcat	;wreg free
  4998                           
  4999                           ;eusart2.c: 195: break;
  5000  000AD4  D00C               	goto	l2893
  5001  000AD6                     l2891:
  5002                           
  5003                           ; BSR set to: 0
  5004  000AD6  51D7               	movf	SigfoxCommandSelector@SigfoxCommand& (0+255),w,b
  5005                           
  5006                           ; Switch size 1, requested type "space"
  5007                           ; Number of cases is 6, Range of values is 0 to 6
  5008                           ; switch strategies available:
  5009                           ; Name         Instructions Cycles
  5010                           ; simple_byte           19    10 (average)
  5011                           ;	Chosen strategy is simple_byte
  5012  000AD8  E0E5               	bz	l2877
  5013  000ADA  0A01               	xorlw	1	; case 1
  5014  000ADC  E0EB               	bz	l2883
  5015  000ADE  0A03               	xorlw	3	; case 2
  5016  000AE0  E0E9               	bz	l2883
  5017  000AE2  0A01               	xorlw	1	; case 3
  5018  000AE4  E0E3               	bz	l2881
  5019  000AE6  0A07               	xorlw	7	; case 4
  5020  000AE8  E0E1               	bz	l2881
  5021  000AEA  0A02               	xorlw	2	; case 6
  5022  000AEC  E0DF               	bz	l2881
  5023  000AEE                     l2893:
  5024                           
  5025                           ;eusart2.c: 197: if(SigfoxCommand == SFX_CMD_SEND_MSG_WAIT_ACK){
  5026  000AEE  0E02               	movlw	2
  5027  000AF0  0100               	movlb	0	; () banked
  5028  000AF2  19D7               	xorwf	SigfoxCommandSelector@SigfoxCommand& (0+255),w,b
  5029  000AF4  E108               	bnz	l2897
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;eusart2.c: 198: strcat(SigfoxTXBuffer,SFX_COMMAND_TAIL_ACK_STR);
  5033  000AF6  D818               	call	PL32	;call to abstracted procedure
  5034  000AF8  0ECF               	movlw	low SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR
  5035  000AFA  6FCB               	movwf	strcat@from& (0+255),b
  5036  000AFC  0E00               	movlw	high SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR
  5037  000AFE  6FCC               	movwf	(strcat@from+1)& (0+255),b
  5038  000B00  EC2B  F008         	call	_strcat	;wreg free
  5039                           
  5040                           ;eusart2.c: 199: }
  5041  000B04  0012               	return	
  5042  000B06                     l2897:
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;eusart2.c: 200: else
  5046                           ;eusart2.c: 201: {
  5047                           ;eusart2.c: 202: strcat(SigfoxTXBuffer,SFX_COMMAND_TAIL_STR);
  5048  000B06  D810               	call	PL32	;call to abstracted procedure
  5049  000B08  0ED3               	movlw	low SigfoxCommandSelector@SFX_COMMAND_TAIL_STR
  5050  000B0A  6FCB               	movwf	strcat@from& (0+255),b
  5051  000B0C  0E00               	movlw	high SigfoxCommandSelector@SFX_COMMAND_TAIL_STR
  5052  000B0E  6FCC               	movwf	(strcat@from+1)& (0+255),b
  5053  000B10  EC2B  F008         	call	_strcat	;wreg free
  5054  000B14  0012               	return		;funcret
  5055  000B16                     __end_of_SigfoxCommandSelector:
  5056                           	opt stack 0
  5057  000B16                     PL6:
  5058                           	opt stack 20
  5059  000B16  0E95               	movlw	low _SigfoxTXBuffer
  5060  000B18  6FC9               	movwf	strcpy@to& (0+255),b
  5061  000B1A  0E00               	movlw	high _SigfoxTXBuffer
  5062  000B1C  6FCA               	movwf	(strcpy@to+1)& (0+255),b
  5063  000B1E  C0D5  F0CB         	movff	SigfoxCommandSelector@SigfoxRomCommandStrPtr,strcpy@from
  5064  000B22  C0D6  F0CC         	movff	SigfoxCommandSelector@SigfoxRomCommandStrPtr+1,strcpy@from+1
  5065  000B26  0012               	return	
  5066  000B28                     __end_ofPL6:
  5067                           	opt stack 0
  5068  000B28                     PL32:
  5069                           	opt stack 20
  5070  000B28  0E95               	movlw	low _SigfoxTXBuffer
  5071  000B2A  6FC9               	movwf	strcat@to& (0+255),b
  5072  000B2C  0E00               	movlw	high _SigfoxTXBuffer
  5073  000B2E  6FCA               	movwf	(strcat@to+1)& (0+255),b
  5074  000B30  0012               	return	
  5075  000B32                     __end_ofPL32:
  5076                           	opt stack 0
  5077                           tosu	equ	0xFFF
  5078                           tosh	equ	0xFFE
  5079                           tosl	equ	0xFFD
  5080                           pclath	equ	0xFFA
  5081                           tblptru	equ	0xFF8
  5082                           tblptrh	equ	0xFF7
  5083                           tblptrl	equ	0xFF6
  5084                           tablat	equ	0xFF5
  5085                           prodh	equ	0xFF4
  5086                           prodl	equ	0xFF3
  5087                           intcon	equ	0xFF2
  5088                           intcon2	equ	0xFF1
  5089                           postinc0	equ	0xFEE
  5090                           wreg	equ	0xFE8
  5091                           indf1	equ	0xFE7
  5092                           postdec1	equ	0xFE5
  5093                           fsr1h	equ	0xFE2
  5094                           fsr1l	equ	0xFE1
  5095                           indf2	equ	0xFDF
  5096                           postinc2	equ	0xFDE
  5097                           plusw2	equ	0xFDB
  5098                           fsr2h	equ	0xFDA
  5099                           fsr2l	equ	0xFD9
  5100                           status	equ	0xFD8
  5101                           
  5102 ;; *************** function _strcpy *****************
  5103 ;; Defined at:
  5104 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/strcpy.c"
  5105 ;; Parameters:    Size  Location     Type
  5106 ;;  to              2    5[BANK0 ] PTR unsigned char 
  5107 ;;		 -> SigfoxTXBuffer(35), 
  5108 ;;  from            2    7[BANK0 ] PTR const unsigned char 
  5109 ;;		 -> SigfoxCommandsDefinitions(60), 
  5110 ;; Auto vars:     Size  Location     Type
  5111 ;;  cp              2    9[BANK0 ] PTR unsigned char 
  5112 ;;		 -> SigfoxTXBuffer(35), 
  5113 ;; Return value:  Size  Location     Type
  5114 ;;                  2    5[BANK0 ] PTR unsigned char 
  5115 ;; Registers used:
  5116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5117 ;; Tracked objects:
  5118 ;;		On entry : 3F/0
  5119 ;;		On exit  : 0/0
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5122 ;;      Params:         0       4       0       0       0       0       0
  5123 ;;      Locals:         0       2       0       0       0       0       0
  5124 ;;      Temps:          0       0       0       0       0       0       0
  5125 ;;      Totals:         0       6       0       0       0       0       0
  5126 ;;Total ram usage:        6 bytes
  5127 ;; Hardware stack levels used:    1
  5128 ;; Hardware stack levels required when called:    5
  5129 ;; This function calls:
  5130 ;;		Nothing
  5131 ;; This function is called by:
  5132 ;;		_SigfoxCommandSelector
  5133 ;; This function uses a non-reentrant model
  5134 ;;
  5135                           
  5136                           	psect	text32
  5137  0011EE                     __ptext32:
  5138                           	opt stack 0
  5139  0011EE                     _strcpy:
  5140                           	opt stack 20
  5141                           
  5142                           ;incstack = 0
  5143  0011EE  C0C9  F0CD         	movff	strcpy@to,strcpy@cp
  5144  0011F2  C0CA  F0CE         	movff	strcpy@to+1,strcpy@cp+1
  5145  0011F6  D005               	goto	l2805
  5146  0011F8                     l2803:
  5147  0011F8  0100               	movlb	0	; () banked
  5148  0011FA  4BCD               	infsnz	strcpy@cp& (0+255),f,b
  5149  0011FC  2BCE               	incf	(strcpy@cp+1)& (0+255),f,b
  5150  0011FE  4BCB               	infsnz	strcpy@from& (0+255),f,b
  5151  001200  2BCC               	incf	(strcpy@from+1)& (0+255),f,b
  5152  001202                     l2805:
  5153  001202  C0CB  FFF6         	movff	strcpy@from,tblptrl
  5154  001206  C0CC  FFF7         	movff	strcpy@from+1,tblptrh
  5155  00120A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5156  00120A  6AF8               	clrf	tblptru,c
  5157  00120C                     	endif
  5158  00120C                     	if	0	;tblptru may be non-zero
  5159  00120C                     	endif
  5160  00120C  C0CD  FFD9         	movff	strcpy@cp,fsr2l
  5161  001210  C0CE  FFDA         	movff	strcpy@cp+1,fsr2h
  5162  001214  0008               	tblrd		*
  5163  001216  CFF5 FFDF          	movff	tablat,indf2
  5164  00121A  50DF               	movf	indf2,w,c
  5165  00121C  E1ED               	bnz	l2803
  5166  00121E  C0C9  F0C9         	movff	strcpy@to,?_strcpy
  5167  001222  C0CA  F0CA         	movff	strcpy@to+1,?_strcpy+1
  5168  001226  0012               	return		;funcret
  5169  001228                     __end_of_strcpy:
  5170                           	opt stack 0
  5171                           tosu	equ	0xFFF
  5172                           tosh	equ	0xFFE
  5173                           tosl	equ	0xFFD
  5174                           pclath	equ	0xFFA
  5175                           tblptru	equ	0xFF8
  5176                           tblptrh	equ	0xFF7
  5177                           tblptrl	equ	0xFF6
  5178                           tablat	equ	0xFF5
  5179                           prodh	equ	0xFF4
  5180                           prodl	equ	0xFF3
  5181                           intcon	equ	0xFF2
  5182                           intcon2	equ	0xFF1
  5183                           postinc0	equ	0xFEE
  5184                           wreg	equ	0xFE8
  5185                           indf1	equ	0xFE7
  5186                           postdec1	equ	0xFE5
  5187                           fsr1h	equ	0xFE2
  5188                           fsr1l	equ	0xFE1
  5189                           indf2	equ	0xFDF
  5190                           postinc2	equ	0xFDE
  5191                           plusw2	equ	0xFDB
  5192                           fsr2h	equ	0xFDA
  5193                           fsr2l	equ	0xFD9
  5194                           status	equ	0xFD8
  5195                           
  5196 ;; *************** function _strcat *****************
  5197 ;; Defined at:
  5198 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/strcat.c"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;  to              2    5[BANK0 ] PTR unsigned char 
  5201 ;;		 -> SigfoxTXBuffer(35), 
  5202 ;;  from            2    7[BANK0 ] PTR const unsigned char 
  5203 ;;		 -> SigfoxPayloadBuffer(25), SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR(4), SigfoxCommandSelector@SFX_COMMAND_TA
      +IL_STR(2), 
  5204 ;; Auto vars:     Size  Location     Type
  5205 ;;  cp              2    9[BANK0 ] PTR unsigned char 
  5206 ;;		 -> SigfoxTXBuffer(35), 
  5207 ;; Return value:  Size  Location     Type
  5208 ;;                  2    5[BANK0 ] PTR unsigned char 
  5209 ;; Registers used:
  5210 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5211 ;; Tracked objects:
  5212 ;;		On entry : 3F/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5216 ;;      Params:         0       4       0       0       0       0       0
  5217 ;;      Locals:         0       2       0       0       0       0       0
  5218 ;;      Temps:          0       0       0       0       0       0       0
  5219 ;;      Totals:         0       6       0       0       0       0       0
  5220 ;;Total ram usage:        6 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:    5
  5223 ;; This function calls:
  5224 ;;		Nothing
  5225 ;; This function is called by:
  5226 ;;		_SigfoxCommandSelector
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text33
  5231  001056                     __ptext33:
  5232                           	opt stack 0
  5233  001056                     _strcat:
  5234                           	opt stack 20
  5235                           
  5236                           ;incstack = 0
  5237  001056  C0C9  F0CD         	movff	strcat@to,strcat@cp
  5238  00105A  C0CA  F0CE         	movff	strcat@to+1,strcat@cp+1
  5239  00105E  D003               	goto	l2815
  5240  001060                     l2813:
  5241  001060  0100               	movlb	0	; () banked
  5242  001062  4BCD               	infsnz	strcat@cp& (0+255),f,b
  5243  001064  2BCE               	incf	(strcat@cp+1)& (0+255),f,b
  5244  001066                     l2815:
  5245  001066  C0CD  FFD9         	movff	strcat@cp,fsr2l
  5246  00106A  C0CE  FFDA         	movff	strcat@cp+1,fsr2h
  5247  00106E  50DF               	movf	indf2,w,c
  5248  001070  E006               	bz	l2819
  5249  001072  D7F6               	goto	l2813
  5250  001074                     l2817:
  5251  001074  0100               	movlb	0	; () banked
  5252  001076  4BCD               	infsnz	strcat@cp& (0+255),f,b
  5253  001078  2BCE               	incf	(strcat@cp+1)& (0+255),f,b
  5254  00107A  4BCB               	infsnz	strcat@from& (0+255),f,b
  5255  00107C  2BCC               	incf	(strcat@from+1)& (0+255),f,b
  5256  00107E                     l2819:
  5257  00107E  C0CB  FFD9         	movff	strcat@from,fsr2l
  5258  001082  C0CC  FFDA         	movff	strcat@from+1,fsr2h
  5259  001086  C0CD  FFE1         	movff	strcat@cp,fsr1l
  5260  00108A  C0CE  FFE2         	movff	strcat@cp+1,fsr1h
  5261  00108E  CFDF FFE7          	movff	indf2,indf1
  5262  001092  50E7               	movf	indf1,w,c
  5263  001094  E1EF               	bnz	l2817
  5264  001096  C0C9  F0C9         	movff	strcat@to,?_strcat
  5265  00109A  C0CA  F0CA         	movff	strcat@to+1,?_strcat+1
  5266  00109E  0012               	return		;funcret
  5267  0010A0                     __end_of_strcat:
  5268                           	opt stack 0
  5269                           tosu	equ	0xFFF
  5270                           tosh	equ	0xFFE
  5271                           tosl	equ	0xFFD
  5272                           pclath	equ	0xFFA
  5273                           tblptru	equ	0xFF8
  5274                           tblptrh	equ	0xFF7
  5275                           tblptrl	equ	0xFF6
  5276                           tablat	equ	0xFF5
  5277                           prodh	equ	0xFF4
  5278                           prodl	equ	0xFF3
  5279                           intcon	equ	0xFF2
  5280                           intcon2	equ	0xFF1
  5281                           postinc0	equ	0xFEE
  5282                           wreg	equ	0xFE8
  5283                           indf1	equ	0xFE7
  5284                           postdec1	equ	0xFE5
  5285                           fsr1h	equ	0xFE2
  5286                           fsr1l	equ	0xFE1
  5287                           indf2	equ	0xFDF
  5288                           postinc2	equ	0xFDE
  5289                           plusw2	equ	0xFDB
  5290                           fsr2h	equ	0xFDA
  5291                           fsr2l	equ	0xFD9
  5292                           status	equ	0xFD8
  5293                           
  5294 ;; *************** function _ProtocolTaskBuildFrame *****************
  5295 ;; Defined at:
  5296 ;;		line 95 in file "sfxProtocoll.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;  EVENT           1    wreg     enum E6697
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;  EVENT           1   28[BANK0 ] enum E6697
  5301 ;;  dataField       4   29[BANK0 ] unsigned long 
  5302 ;;  protFrameDes    2   36[BANK0 ] PTR const unsigned char 
  5303 ;;		 -> SIT_FRAME_POWERUP_SF_DESC(5), SIT_FRAME_TRACKER_SF_ID_DESC(8), 
  5304 ;;  totalBits       2   33[BANK0 ] int 
  5305 ;;  dataSize        1   35[BANK0 ] unsigned char 
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  1    wreg      unsigned char 
  5308 ;; Registers used:
  5309 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5310 ;; Tracked objects:
  5311 ;;		On entry : 3F/0
  5312 ;;		On exit  : 3E/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5315 ;;      Params:         0       0       0       0       0       0       0
  5316 ;;      Locals:         0      10       0       0       0       0       0
  5317 ;;      Temps:          0       2       0       0       0       0       0
  5318 ;;      Totals:         0      12       0       0       0       0       0
  5319 ;;Total ram usage:       12 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    7
  5322 ;; This function calls:
  5323 ;;		_ProtocolAddFrameData
  5324 ;;		_ProtocolGetValidity
  5325 ;;		_SigfoxTaskLoadPayloadBuffer
  5326 ;; This function is called by:
  5327 ;;		_ProtocolTask
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           	psect	text34
  5332  000658                     __ptext34:
  5333                           	opt stack 0
  5334  000658                     _ProtocolTaskBuildFrame:
  5335                           	opt stack 22
  5336                           
  5337                           ;incstack = 0
  5338                           ;ProtocolTaskBuildFrame@EVENT stored from wreg
  5339  000658  0100               	movlb	0	; () banked
  5340  00065A  6FE0               	movwf	ProtocolTaskBuildFrame@EVENT& (0+255),b
  5341                           
  5342                           ;sfxProtocoll.c: 97: int totalBits = 12 * 8;
  5343  00065C  6BE6               	clrf	(ProtocolTaskBuildFrame@totalBits+1)& (0+255),b
  5344  00065E  0E60               	movlw	96
  5345  000660  6FE5               	movwf	ProtocolTaskBuildFrame@totalBits& (0+255),b
  5346                           
  5347                           ;sfxProtocoll.c: 98: unsigned long dataField;
  5348                           ;sfxProtocoll.c: 99: uint8_t dataSize;
  5349                           ;sfxProtocoll.c: 100: const uint8_t *protFrameDescPtr;
  5350                           ;sfxProtocoll.c: 102: switch(EVENT){
  5351  000662  D009               	goto	l3271
  5352  000664                     l3261:
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;sfxProtocoll.c: 104: protFrameDescPtr = SIT_FRAME_TRACKER_SF_ID_DESC;
  5356  000664  0E46               	movlw	low _SIT_FRAME_TRACKER_SF_ID_DESC
  5357  000666  6FE8               	movwf	ProtocolTaskBuildFrame@protFrameDescPtr& (0+255),b
  5358  000668  0E06               	movlw	high _SIT_FRAME_TRACKER_SF_ID_DESC
  5359  00066A  D003               	goto	L6
  5360  00066C                     l3263:
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;sfxProtocoll.c: 107: protFrameDescPtr = SIT_FRAME_POWERUP_SF_DESC;
  5364  00066C  0E4E               	movlw	low _SIT_FRAME_POWERUP_SF_DESC
  5365  00066E  6FE8               	movwf	ProtocolTaskBuildFrame@protFrameDescPtr& (0+255),b
  5366  000670  0E06               	movlw	high _SIT_FRAME_POWERUP_SF_DESC
  5367  000672                     L6:
  5368  000672  6FE9               	movwf	(ProtocolTaskBuildFrame@protFrameDescPtr+1)& (0+255),b
  5369                           
  5370                           ;sfxProtocoll.c: 108: break;
  5371  000674  D00F               	goto	l3273
  5372  000676                     l3271:
  5373                           
  5374                           ; BSR set to: 0
  5375  000676  51E0               	movf	ProtocolTaskBuildFrame@EVENT& (0+255),w,b
  5376                           
  5377                           ; Switch size 1, requested type "space"
  5378                           ; Number of cases is 6, Range of values is 1 to 6
  5379                           ; switch strategies available:
  5380                           ; Name         Instructions Cycles
  5381                           ; simple_byte           19    10 (average)
  5382                           ;	Chosen strategy is simple_byte
  5383  000678  0A01               	xorlw	1	; case 1
  5384  00067A  E0F4               	bz	l3261
  5385  00067C  0A03               	xorlw	3	; case 2
  5386  00067E  E0F6               	bz	l3263
  5387  000680  0A01               	xorlw	1	; case 3
  5388  000682  B4D8               	btfsc	status,2,c
  5389  000684  0C00               	retlw	0
  5390  000686  0A07               	xorlw	7	; case 4
  5391  000688  B4D8               	btfsc	status,2,c
  5392  00068A  0C00               	retlw	0
  5393  00068C  0A01               	xorlw	1	; case 5
  5394  00068E  A4D8               	btfss	status,2,c
  5395  000690  0A03               	xorlw	3	; case 6
  5396  000692  0C00               	retlw	0
  5397  000694                     l3273:
  5398                           
  5399                           ; BSR set to: 0
  5400                           ;sfxProtocoll.c: 116: ProtocolAddFrameData(EVENT, 3);
  5401  000694  51E0               	movf	ProtocolTaskBuildFrame@EVENT& (0+255),w,b
  5402  000696  D8A7               	call	PL26	;call to abstracted procedure
  5403  000698  0E03               	movlw	3
  5404  00069A  6FCD               	movwf	ProtocolAddFrameData@DataRepSize& (0+255),b
  5405  00069C  EC92  F004         	call	_ProtocolAddFrameData	;wreg free
  5406                           
  5407                           ; BSR set to: 0
  5408                           ;sfxProtocoll.c: 117: totalBits -= 3;
  5409  0006A0  0EFD               	movlw	253
  5410  0006A2  27E5               	addwf	ProtocolTaskBuildFrame@totalBits& (0+255),f,b
  5411  0006A4  0EFF               	movlw	255
  5412  0006A6  23E6               	addwfc	(ProtocolTaskBuildFrame@totalBits+1)& (0+255),f,b
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;sfxProtocoll.c: 118: ProtocolAddFrameData(protFrameDescPtr[0], 05);
  5416  0006A8  D891               	call	PL12	;call to abstracted procedure
  5417  0006AA  D89D               	call	PL26	;call to abstracted procedure
  5418  0006AC  0E05               	movlw	5
  5419  0006AE  6FCD               	movwf	ProtocolAddFrameData@DataRepSize& (0+255),b
  5420  0006B0  EC92  F004         	call	_ProtocolAddFrameData	;wreg free
  5421                           
  5422                           ; BSR set to: 0
  5423                           ;sfxProtocoll.c: 119: totalBits -= 05;
  5424  0006B4  0EFB               	movlw	251
  5425  0006B6  27E5               	addwf	ProtocolTaskBuildFrame@totalBits& (0+255),f,b
  5426  0006B8  0EFF               	movlw	255
  5427  0006BA  23E6               	addwfc	(ProtocolTaskBuildFrame@totalBits+1)& (0+255),f,b
  5428                           
  5429                           ; BSR set to: 0
  5430                           ;sfxProtocoll.c: 120: protFrameDescPtr++;
  5431  0006BC  4BE8               	infsnz	ProtocolTaskBuildFrame@protFrameDescPtr& (0+255),f,b
  5432  0006BE  2BE9               	incf	(ProtocolTaskBuildFrame@protFrameDescPtr+1)& (0+255),f,b
  5433  0006C0  D049               	goto	l3309
  5434  0006C2                     l3283:
  5435                           
  5436                           ; BSR set to: 0
  5437                           ;sfxProtocoll.c: 124: dataField = (unsigned long) ProtocolGetValidity(protFrameDescPtr[1
      +                          ]);
  5438  0006C2  29E8               	incf	ProtocolTaskBuildFrame@protFrameDescPtr& (0+255),w,b
  5439  0006C4  6FDE               	movwf	??_ProtocolTaskBuildFrame& (0+255),b
  5440  0006C6  0E00               	movlw	0
  5441  0006C8  21E9               	addwfc	(ProtocolTaskBuildFrame@protFrameDescPtr+1)& (0+255),w,b
  5442  0006CA  6FDF               	movwf	(??_ProtocolTaskBuildFrame+1)& (0+255),b
  5443  0006CC  C0DE  FFF6         	movff	??_ProtocolTaskBuildFrame,tblptrl
  5444  0006D0  C0DF  FFF7         	movff	??_ProtocolTaskBuildFrame+1,tblptrh
  5445  0006D4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5446  0006D4  6AF8               	clrf	tblptru,c
  5447  0006D6                     	endif
  5448  0006D6                     	if	0	;tblptru may be non-zero
  5449  0006D6                     	endif
  5450  0006D6  0008               	tblrd		*
  5451  0006D8  50F5               	movf	tablat,w,c
  5452  0006DA  ECC0  F009         	call	_ProtocolGetValidity
  5453  0006DE  D87E               	call	PL24	;call to abstracted procedure
  5454                           
  5455                           ; BSR set to: 0
  5456                           ;sfxProtocoll.c: 125: dataSize = 2;
  5457  0006E0  0E02               	movlw	2
  5458  0006E2  D011               	goto	L9
  5459  0006E4                     l3287:
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;sfxProtocoll.c: 128: dataField = (unsigned long)sysVarBattery;
  5463  0006E4  51F3               	movf	_sysVarBattery& (0+255),w,b
  5464  0006E6  D87A               	call	PL24	;call to abstracted procedure
  5465                           
  5466                           ;sfxProtocoll.c: 129: dataSize = 6;
  5467  0006E8  0E06               	movlw	6
  5468  0006EA  D00D               	goto	L9
  5469  0006EC                     l3289:
  5470                           
  5471                           ; BSR set to: 0
  5472                           ;sfxProtocoll.c: 132: dataField = (unsigned long)sysVarMainInput;
  5473  0006EC  5193               	movf	_sysVarMainInput& (0+255),w,b
  5474  0006EE  D876               	call	PL24	;call to abstracted procedure
  5475                           
  5476                           ;sfxProtocoll.c: 133: dataSize = 1;
  5477  0006F0  0E01               	movlw	1
  5478  0006F2  D009               	goto	L9
  5479  0006F4                     l714:
  5480                           
  5481                           ; BSR set to: 0
  5482                           ;sfxProtocoll.c: 136: dataField = (unsigned long)sysVarGpsLat;
  5483  0006F4  C070  F0E1         	movff	_sysVarGpsLat,ProtocolTaskBuildFrame@dataField
  5484  0006F8  C071  F0E2         	movff	_sysVarGpsLat+1,ProtocolTaskBuildFrame@dataField+1
  5485  0006FC  C072  F0E3         	movff	_sysVarGpsLat+2,ProtocolTaskBuildFrame@dataField+2
  5486  000700  C073  F0E4         	movff	_sysVarGpsLat+3,ProtocolTaskBuildFrame@dataField+3
  5487  000704  D00A               	goto	l3293
  5488  000706                     L9:
  5489  000706  6FE7               	movwf	ProtocolTaskBuildFrame@dataSize& (0+255),b
  5490                           
  5491                           ;sfxProtocoll.c: 138: break;
  5492  000708  D036               	goto	l3311
  5493  00070A                     l715:
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;sfxProtocoll.c: 140: dataField = (unsigned long)sysVarGpsLong;
  5497  00070A  C06C  F0E1         	movff	_sysVarGpsLong,ProtocolTaskBuildFrame@dataField
  5498  00070E  C06D  F0E2         	movff	_sysVarGpsLong+1,ProtocolTaskBuildFrame@dataField+1
  5499  000712  C06E  F0E3         	movff	_sysVarGpsLong+2,ProtocolTaskBuildFrame@dataField+2
  5500  000716  C06F  F0E4         	movff	_sysVarGpsLong+3,ProtocolTaskBuildFrame@dataField+3
  5501  00071A                     l3293:
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;sfxProtocoll.c: 141: dataSize = 28;
  5505  00071A  0E1C               	movlw	28
  5506  00071C  D7F4               	goto	L9
  5507  00071E                     l3295:
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;sfxProtocoll.c: 144: dataField = (unsigned long)sysVarGpsSpeed;
  5511  00071E  C07C  F0E1         	movff	_sysVarGpsSpeed,ProtocolTaskBuildFrame@dataField
  5512  000722  C07D  F0E2         	movff	_sysVarGpsSpeed+1,ProtocolTaskBuildFrame@dataField+1
  5513  000726  6BE3               	clrf	(ProtocolTaskBuildFrame@dataField+2)& (0+255),b
  5514  000728  6BE4               	clrf	(ProtocolTaskBuildFrame@dataField+3)& (0+255),b
  5515                           
  5516                           ; BSR set to: 0
  5517                           ;sfxProtocoll.c: 145: dataSize = 8;
  5518  00072A  0E08               	movlw	8
  5519  00072C  D7EC               	goto	L9
  5520  00072E                     l3299:
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;sfxProtocoll.c: 148: dataField = (unsigned long)sysVarGpsCourse;
  5524  00072E  C07A  F0E1         	movff	_sysVarGpsCourse,ProtocolTaskBuildFrame@dataField
  5525  000732  C07B  F0E2         	movff	_sysVarGpsCourse+1,ProtocolTaskBuildFrame@dataField+1
  5526  000736  0E00               	movlw	0
  5527  000738  BFE2               	btfsc	(ProtocolTaskBuildFrame@dataField+1)& (0+255),7,b
  5528  00073A  0EFF               	movlw	-1
  5529  00073C  6FE3               	movwf	(ProtocolTaskBuildFrame@dataField+2)& (0+255),b
  5530  00073E  6FE4               	movwf	(ProtocolTaskBuildFrame@dataField+3)& (0+255),b
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;sfxProtocoll.c: 149: dataSize = 9;
  5534  000740  0E09               	movlw	9
  5535  000742  D7E1               	goto	L9
  5536  000744                     l3303:
  5537                           
  5538                           ; BSR set to: 0
  5539                           ;sfxProtocoll.c: 152: dataField = (unsigned long)sysVarGpsOdometer;
  5540  000744  C078  F0E1         	movff	_sysVarGpsOdometer,ProtocolTaskBuildFrame@dataField
  5541  000748  C079  F0E2         	movff	_sysVarGpsOdometer+1,ProtocolTaskBuildFrame@dataField+1
  5542  00074C  6BE3               	clrf	(ProtocolTaskBuildFrame@dataField+2)& (0+255),b
  5543  00074E  6BE4               	clrf	(ProtocolTaskBuildFrame@dataField+3)& (0+255),b
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;sfxProtocoll.c: 153: dataSize = 16;
  5547  000750  0E10               	movlw	16
  5548  000752  D7D9               	goto	L9
  5549  000754                     l3309:
  5550                           
  5551                           ; BSR set to: 0
  5552  000754  D83B               	call	PL12	;call to abstracted procedure
  5553                           
  5554                           ; Switch size 1, requested type "space"
  5555                           ; Number of cases is 8, Range of values is 11 to 127
  5556                           ; switch strategies available:
  5557                           ; Name         Instructions Cycles
  5558                           ; simple_byte           25    13 (average)
  5559                           ;	Chosen strategy is simple_byte
  5560  000756  0A0B               	xorlw	11	; case 11
  5561  000758  E0C5               	bz	l3287
  5562  00075A  0A1D               	xorlw	29	; case 22
  5563  00075C  E0CB               	bz	l714
  5564  00075E  0A0E               	xorlw	14	; case 24
  5565  000760  E0D4               	bz	l715
  5566  000762  0A02               	xorlw	2	; case 26
  5567  000764  E0DC               	bz	l3295
  5568  000766  0A01               	xorlw	1	; case 27
  5569  000768  E0E2               	bz	l3299
  5570  00076A  0A3B               	xorlw	59	; case 32
  5571  00076C  E0EB               	bz	l3303
  5572  00076E  0A5E               	xorlw	94	; case 126
  5573  000770  E0BD               	bz	l3289
  5574  000772  0A01               	xorlw	1	; case 127
  5575  000774  E0A6               	bz	l3283
  5576  000776                     l3311:
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;sfxProtocoll.c: 156: ProtocolAddFrameData(dataField,dataSize);
  5580  000776  C0E1  F0C9         	movff	ProtocolTaskBuildFrame@dataField,ProtocolAddFrameData@Data
  5581  00077A  C0E2  F0CA         	movff	ProtocolTaskBuildFrame@dataField+1,ProtocolAddFrameData@Data+1
  5582  00077E  C0E3  F0CB         	movff	ProtocolTaskBuildFrame@dataField+2,ProtocolAddFrameData@Data+2
  5583  000782  C0E4  F0CC         	movff	ProtocolTaskBuildFrame@dataField+3,ProtocolAddFrameData@Data+3
  5584  000786  C0E7  F0CD         	movff	ProtocolTaskBuildFrame@dataSize,ProtocolAddFrameData@DataRepSize
  5585  00078A  EC92  F004         	call	_ProtocolAddFrameData	;wreg free
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;sfxProtocoll.c: 157: totalBits -= dataSize;
  5589  00078E  51E7               	movf	ProtocolTaskBuildFrame@dataSize& (0+255),w,b
  5590  000790  5FE5               	subwf	ProtocolTaskBuildFrame@totalBits& (0+255),f,b
  5591  000792  0E00               	movlw	0
  5592  000794  5BE6               	subwfb	(ProtocolTaskBuildFrame@totalBits+1)& (0+255),f,b
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;sfxProtocoll.c: 158: if(totalBits < 0){
  5596  000796  BFE6               	btfsc	(ProtocolTaskBuildFrame@totalBits+1)& (0+255),7,b
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;sfxProtocoll.c: 159: return(0);
  5600  000798  0C00               	retlw	0
  5601                           
  5602                           ; BSR set to: 0
  5603                           ;sfxProtocoll.c: 160: }
  5604                           ;sfxProtocoll.c: 161: protFrameDescPtr++;
  5605  00079A  4BE8               	infsnz	ProtocolTaskBuildFrame@protFrameDescPtr& (0+255),f,b
  5606  00079C  2BE9               	incf	(ProtocolTaskBuildFrame@protFrameDescPtr+1)& (0+255),f,b
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;sfxProtocoll.c: 162: }while(*protFrameDescPtr != 0);
  5610  00079E  D816               	call	PL12	;call to abstracted procedure
  5611  0007A0  E1D9               	bnz	l3309
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;sfxProtocoll.c: 163: if(totalBits>0){
  5615  0007A2  BFE6               	btfsc	(ProtocolTaskBuildFrame@totalBits+1)& (0+255),7,b
  5616  0007A4  D00C               	goto	l3329
  5617  0007A6  51E6               	movf	(ProtocolTaskBuildFrame@totalBits+1)& (0+255),w,b
  5618  0007A8  E102               	bnz	u1920
  5619  0007AA  05E5               	decf	ProtocolTaskBuildFrame@totalBits& (0+255),w,b
  5620  0007AC  E308               	bnc	l3329
  5621  0007AE                     u1920:
  5622                           
  5623                           ; BSR set to: 0
  5624                           ;sfxProtocoll.c: 164: ProtocolAddFrameData(0,totalBits);
  5625  0007AE  6BC9               	clrf	ProtocolAddFrameData@Data& (0+255),b
  5626  0007B0  6BCA               	clrf	(ProtocolAddFrameData@Data+1)& (0+255),b
  5627  0007B2  6BCB               	clrf	(ProtocolAddFrameData@Data+2)& (0+255),b
  5628  0007B4  6BCC               	clrf	(ProtocolAddFrameData@Data+3)& (0+255),b
  5629  0007B6  C0E5  F0CD         	movff	ProtocolTaskBuildFrame@totalBits,ProtocolAddFrameData@DataRepSize
  5630  0007BA  EC92  F004         	call	_ProtocolAddFrameData	;wreg free
  5631  0007BE                     l3329:
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;sfxProtocoll.c: 165: }
  5635                           ;sfxProtocoll.c: 181: SigfoxTaskLoadPayloadBuffer(protDataShifter);
  5636  0007BE  0EB8               	movlw	low _protDataShifter
  5637  0007C0  6FC9               	movwf	SigfoxTaskLoadPayloadBuffer@rawData& (0+255),b
  5638  0007C2  0E00               	movlw	high _protDataShifter
  5639  0007C4  6FCA               	movwf	(SigfoxTaskLoadPayloadBuffer@rawData+1)& (0+255),b
  5640  0007C6  EC9B  F006         	call	_SigfoxTaskLoadPayloadBuffer	;wreg free
  5641                           
  5642                           ; BSR set to: 1
  5643                           ;sfxProtocoll.c: 183: return(1);
  5644  0007CA  0C01               	retlw	1	;funcret
  5645  0007CC                     __end_of_ProtocolTaskBuildFrame:
  5646                           	opt stack 0
  5647  0007CC                     PL12:
  5648                           	opt stack 22
  5649  0007CC  C0E8  FFF6         	movff	ProtocolTaskBuildFrame@protFrameDescPtr,tblptrl
  5650  0007D0  C0E9  FFF7         	movff	ProtocolTaskBuildFrame@protFrameDescPtr+1,tblptrh
  5651  0007D4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5652  0007D4  6AF8               	clrf	tblptru,c
  5653  0007D6                     	endif
  5654  0007D6                     	if	0	;tblptru may be non-zero
  5655  0007D6                     	endif
  5656  0007D6  0008               	tblrd		*
  5657  0007D8  50F5               	movf	tablat,w,c
  5658  0007DA  0012               	return	
  5659  0007DC                     __end_ofPL12:
  5660                           	opt stack 0
  5661  0007DC                     PL24:
  5662                           	opt stack 22
  5663  0007DC  6FE1               	movwf	ProtocolTaskBuildFrame@dataField& (0+255),b
  5664  0007DE  6BE2               	clrf	(ProtocolTaskBuildFrame@dataField+1)& (0+255),b
  5665  0007E0  6BE3               	clrf	(ProtocolTaskBuildFrame@dataField+2)& (0+255),b
  5666  0007E2  6BE4               	clrf	(ProtocolTaskBuildFrame@dataField+3)& (0+255),b
  5667  0007E4  0012               	return	
  5668  0007E6                     __end_ofPL24:
  5669                           	opt stack 0
  5670  0007E6                     PL26:
  5671                           	opt stack 22
  5672  0007E6  6FC9               	movwf	ProtocolAddFrameData@Data& (0+255),b
  5673  0007E8  6BCA               	clrf	(ProtocolAddFrameData@Data+1)& (0+255),b
  5674  0007EA  6BCB               	clrf	(ProtocolAddFrameData@Data+2)& (0+255),b
  5675  0007EC  6BCC               	clrf	(ProtocolAddFrameData@Data+3)& (0+255),b
  5676  0007EE  0012               	return	
  5677  0007F0                     __end_ofPL26:
  5678                           	opt stack 0
  5679                           tosu	equ	0xFFF
  5680                           tosh	equ	0xFFE
  5681                           tosl	equ	0xFFD
  5682                           pclath	equ	0xFFA
  5683                           tblptru	equ	0xFF8
  5684                           tblptrh	equ	0xFF7
  5685                           tblptrl	equ	0xFF6
  5686                           tablat	equ	0xFF5
  5687                           prodh	equ	0xFF4
  5688                           prodl	equ	0xFF3
  5689                           intcon	equ	0xFF2
  5690                           intcon2	equ	0xFF1
  5691                           postinc0	equ	0xFEE
  5692                           wreg	equ	0xFE8
  5693                           indf1	equ	0xFE7
  5694                           postdec1	equ	0xFE5
  5695                           fsr1h	equ	0xFE2
  5696                           fsr1l	equ	0xFE1
  5697                           indf2	equ	0xFDF
  5698                           postinc2	equ	0xFDE
  5699                           plusw2	equ	0xFDB
  5700                           fsr2h	equ	0xFDA
  5701                           fsr2l	equ	0xFD9
  5702                           status	equ	0xFD8
  5703                           
  5704 ;; *************** function _SigfoxTaskLoadPayloadBuffer *****************
  5705 ;; Defined at:
  5706 ;;		line 420 in file "mcc_generated_files/eusart2.c"
  5707 ;; Parameters:    Size  Location     Type
  5708 ;;  rawData         2    5[BANK0 ] PTR unsigned char 
  5709 ;;		 -> protDataShifter(12), 
  5710 ;; Auto vars:     Size  Location     Type
  5711 ;;  buffer          1   14[BANK0 ] unsigned char 
  5712 ;;  payloadBuffe    1   13[BANK0 ] unsigned char 
  5713 ;; Return value:  Size  Location     Type
  5714 ;;                  1    wreg      void 
  5715 ;; Registers used:
  5716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5717 ;; Tracked objects:
  5718 ;;		On entry : 3F/0
  5719 ;;		On exit  : 3F/1
  5720 ;;		Unchanged: 0/0
  5721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5722 ;;      Params:         0       2       0       0       0       0       0
  5723 ;;      Locals:         0       6       0       0       0       0       0
  5724 ;;      Temps:          0       2       0       0       0       0       0
  5725 ;;      Totals:         0      10       0       0       0       0       0
  5726 ;;Total ram usage:       10 bytes
  5727 ;; Hardware stack levels used:    1
  5728 ;; Hardware stack levels required when called:    5
  5729 ;; This function calls:
  5730 ;;		Nothing
  5731 ;; This function is called by:
  5732 ;;		_ProtocolTaskBuildFrame
  5733 ;; This function uses a non-reentrant model
  5734 ;;
  5735                           
  5736                           	psect	text35
  5737  000D36                     __ptext35:
  5738                           	opt stack 0
  5739  000D36                     _SigfoxTaskLoadPayloadBuffer:
  5740                           	opt stack 23
  5741                           
  5742                           ;eusart2.c: 421: uint8_t payloadBufferPtr, buffer;
  5743                           ;eusart2.c: 423: for(payloadBufferPtr = 0; payloadBufferPtr < 12; payloadBufferPtr++){
  5744                           
  5745                           ;incstack = 0
  5746  000D36  0100               	movlb	0	; () banked
  5747  000D38  6BD1               	clrf	SigfoxTaskLoadPayloadBuffer@payloadBufferPtr& (0+255),b
  5748  000D3A                     l3085:
  5749                           
  5750                           ; BSR set to: 0
  5751  000D3A  0E0B               	movlw	11
  5752  000D3C  65D1               	cpfsgt	SigfoxTaskLoadPayloadBuffer@payloadBufferPtr& (0+255),b
  5753  000D3E  D001               	goto	l3089
  5754  000D40  D038               	goto	l365
  5755  000D42                     l3089:
  5756                           
  5757                           ; BSR set to: 0
  5758                           ;eusart2.c: 424: buffer = (rawData[payloadBufferPtr] >> 4) & 0x0F;
  5759  000D42  D83A               	call	PL14	;call to abstracted procedure
  5760  000D44  6FCB               	movwf	??_SigfoxTaskLoadPayloadBuffer& (0+255),b
  5761  000D46  39CB               	swapf	??_SigfoxTaskLoadPayloadBuffer& (0+255),w,b
  5762  000D48  0B0F               	andlw	15
  5763  000D4A  6FD2               	movwf	SigfoxTaskLoadPayloadBuffer@buffer& (0+255),b
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;eusart2.c: 425: SigfoxPayloadBuffer[2 * payloadBufferPtr] = (buffer < 10)? (buffer + '0
      +                          '): (buffer - 10 + 'A');
  5767  000D4C  0E09               	movlw	9
  5768  000D4E  65D2               	cpfsgt	SigfoxTaskLoadPayloadBuffer@buffer& (0+255),b
  5769  000D50  D002               	goto	l3095
  5770                           
  5771                           ; BSR set to: 0
  5772  000D52  0E37               	movlw	55
  5773  000D54  D001               	goto	L10
  5774  000D56                     l3095:
  5775                           
  5776                           ; BSR set to: 0
  5777  000D56  0E30               	movlw	48
  5778  000D58                     L10:
  5779  000D58  25D2               	addwf	SigfoxTaskLoadPayloadBuffer@buffer& (0+255),w,b
  5780  000D5A  6FCD               	movwf	_SigfoxTaskLoadPayloadBuffer$805& (0+255),b
  5781  000D5C  6BCE               	clrf	(_SigfoxTaskLoadPayloadBuffer$805+1)& (0+255),b
  5782  000D5E  0E00               	movlw	0
  5783  000D60  23CE               	addwfc	(_SigfoxTaskLoadPayloadBuffer$805+1)& (0+255),f,b
  5784                           
  5785                           ; BSR set to: 0
  5786  000D62  51D1               	movf	SigfoxTaskLoadPayloadBuffer@payloadBufferPtr& (0+255),w,b
  5787  000D64  6FCB               	movwf	??_SigfoxTaskLoadPayloadBuffer& (0+255),b
  5788  000D66  6BCC               	clrf	(??_SigfoxTaskLoadPayloadBuffer+1)& (0+255),b
  5789  000D68  90D8               	bcf	status,0,c
  5790  000D6A  37CB               	rlcf	??_SigfoxTaskLoadPayloadBuffer& (0+255),f,b
  5791  000D6C  37CC               	rlcf	(??_SigfoxTaskLoadPayloadBuffer+1)& (0+255),f,b
  5792  000D6E  0E64               	movlw	low _SigfoxPayloadBuffer
  5793  000D70  25CB               	addwf	??_SigfoxTaskLoadPayloadBuffer& (0+255),w,b
  5794  000D72  6ED9               	movwf	fsr2l,c
  5795  000D74  0E01               	movlw	high _SigfoxPayloadBuffer
  5796  000D76  21CC               	addwfc	(??_SigfoxTaskLoadPayloadBuffer+1)& (0+255),w,b
  5797  000D78  6EDA               	movwf	fsr2h,c
  5798  000D7A  C0CD  FFDF         	movff	_SigfoxTaskLoadPayloadBuffer$805,indf2
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;eusart2.c: 426: buffer = rawData[payloadBufferPtr] & 0x0F;
  5802  000D7E  D81C               	call	PL14	;call to abstracted procedure
  5803  000D80  0B0F               	andlw	15
  5804  000D82  6FD2               	movwf	SigfoxTaskLoadPayloadBuffer@buffer& (0+255),b
  5805                           
  5806                           ;eusart2.c: 427: SigfoxPayloadBuffer[2 * payloadBufferPtr + 1] = (buffer < 10)? (buffer 
      +                          + '0'): (buffer - 10 + 'A');
  5807  000D84  0E09               	movlw	9
  5808  000D86  65D2               	cpfsgt	SigfoxTaskLoadPayloadBuffer@buffer& (0+255),b
  5809  000D88  D002               	goto	l3103
  5810                           
  5811                           ; BSR set to: 0
  5812  000D8A  0E37               	movlw	55
  5813  000D8C  D001               	goto	L11
  5814  000D8E                     l3103:
  5815                           
  5816                           ; BSR set to: 0
  5817  000D8E  0E30               	movlw	48
  5818  000D90                     L11:
  5819  000D90  25D2               	addwf	SigfoxTaskLoadPayloadBuffer@buffer& (0+255),w,b
  5820  000D92  6FCF               	movwf	_SigfoxTaskLoadPayloadBuffer$806& (0+255),b
  5821  000D94  6BD0               	clrf	(_SigfoxTaskLoadPayloadBuffer$806+1)& (0+255),b
  5822  000D96  0E00               	movlw	0
  5823  000D98  23D0               	addwfc	(_SigfoxTaskLoadPayloadBuffer$806+1)& (0+255),f,b
  5824                           
  5825                           ; BSR set to: 0
  5826  000D9A  51D1               	movf	SigfoxTaskLoadPayloadBuffer@payloadBufferPtr& (0+255),w,b
  5827  000D9C  0D02               	mullw	2
  5828  000D9E  0E65               	movlw	low (_SigfoxPayloadBuffer+1)
  5829  000DA0  24F3               	addwf	prodl,w,c
  5830  000DA2  6ED9               	movwf	fsr2l,c
  5831  000DA4  0E01               	movlw	high (_SigfoxPayloadBuffer+1)
  5832  000DA6  20F4               	addwfc	prodh,w,c
  5833  000DA8  6EDA               	movwf	fsr2h,c
  5834  000DAA  C0CF  FFDF         	movff	_SigfoxTaskLoadPayloadBuffer$806,indf2
  5835                           
  5836                           ; BSR set to: 0
  5837  000DAE  2BD1               	incf	SigfoxTaskLoadPayloadBuffer@payloadBufferPtr& (0+255),f,b
  5838  000DB0  D7C4               	goto	l3085
  5839  000DB2                     l365:
  5840                           
  5841                           ; BSR set to: 0
  5842                           ;eusart2.c: 428: }
  5843                           ;eusart2.c: 429: SigfoxPayloadBuffer[24] = 0;
  5844  000DB2  0101               	movlb	1	; () banked
  5845  000DB4  6B7C               	clrf	(_SigfoxPayloadBuffer+24)& (0+255),b
  5846                           
  5847                           ; BSR set to: 1
  5848  000DB6  0012               	return		;funcret
  5849  000DB8                     __end_of_SigfoxTaskLoadPayloadBuffer:
  5850                           	opt stack 0
  5851  000DB8                     PL14:
  5852                           	opt stack 23
  5853  000DB8  51D1               	movf	SigfoxTaskLoadPayloadBuffer@payloadBufferPtr& (0+255),w,b
  5854  000DBA  25C9               	addwf	SigfoxTaskLoadPayloadBuffer@rawData& (0+255),w,b
  5855  000DBC  6ED9               	movwf	fsr2l,c
  5856  000DBE  0E00               	movlw	0
  5857  000DC0  21CA               	addwfc	(SigfoxTaskLoadPayloadBuffer@rawData+1)& (0+255),w,b
  5858  000DC2  6EDA               	movwf	fsr2h,c
  5859  000DC4  50DF               	movf	indf2,w,c
  5860  000DC6  0012               	return	
  5861  000DC8                     __end_ofPL14:
  5862                           	opt stack 0
  5863                           tosu	equ	0xFFF
  5864                           tosh	equ	0xFFE
  5865                           tosl	equ	0xFFD
  5866                           pclath	equ	0xFFA
  5867                           tblptru	equ	0xFF8
  5868                           tblptrh	equ	0xFF7
  5869                           tblptrl	equ	0xFF6
  5870                           tablat	equ	0xFF5
  5871                           prodh	equ	0xFF4
  5872                           prodl	equ	0xFF3
  5873                           intcon	equ	0xFF2
  5874                           intcon2	equ	0xFF1
  5875                           postinc0	equ	0xFEE
  5876                           wreg	equ	0xFE8
  5877                           indf1	equ	0xFE7
  5878                           postdec1	equ	0xFE5
  5879                           fsr1h	equ	0xFE2
  5880                           fsr1l	equ	0xFE1
  5881                           indf2	equ	0xFDF
  5882                           postinc2	equ	0xFDE
  5883                           plusw2	equ	0xFDB
  5884                           fsr2h	equ	0xFDA
  5885                           fsr2l	equ	0xFD9
  5886                           status	equ	0xFD8
  5887                           
  5888 ;; *************** function _ProtocolGetValidity *****************
  5889 ;; Defined at:
  5890 ;;		line 52 in file "sfxProtocoll.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;  variableID      1    wreg     unsigned char 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  variableID      1    6[BANK0 ] unsigned char 
  5895 ;;  taskResponse    1    7[BANK0 ] enum E6686
  5896 ;; Return value:  Size  Location     Type
  5897 ;;                  1    wreg      enum E6686
  5898 ;; Registers used:
  5899 ;;		wreg, status,2, status,0, cstack
  5900 ;; Tracked objects:
  5901 ;;		On entry : 3F/0
  5902 ;;		On exit  : 3F/0
  5903 ;;		Unchanged: 0/0
  5904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5905 ;;      Params:         0       0       0       0       0       0       0
  5906 ;;      Locals:         0       2       0       0       0       0       0
  5907 ;;      Temps:          0       0       0       0       0       0       0
  5908 ;;      Totals:         0       2       0       0       0       0       0
  5909 ;;Total ram usage:        2 bytes
  5910 ;; Hardware stack levels used:    1
  5911 ;; Hardware stack levels required when called:    6
  5912 ;; This function calls:
  5913 ;;		_gpsTaskGetVarValidity
  5914 ;;		_powerTaskGetVarValidity
  5915 ;; This function is called by:
  5916 ;;		_ProtocolTaskBuildFrame
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           	psect	text36
  5921  001380                     __ptext36:
  5922                           	opt stack 0
  5923  001380                     _ProtocolGetValidity:
  5924                           	opt stack 22
  5925                           
  5926                           ; BSR set to: 1
  5927                           ;incstack = 0
  5928                           ;ProtocolGetValidity@variableID stored from wreg
  5929  001380  0100               	movlb	0	; () banked
  5930  001382  6FCA               	movwf	ProtocolGetValidity@variableID& (0+255),b
  5931                           
  5932                           ;sfxProtocoll.c: 53: dataQualifier_t taskResponse;
  5933                           ;sfxProtocoll.c: 54: taskResponse = gpsTaskGetVarValidity(variableID);
  5934  001384  51CA               	movf	ProtocolGetValidity@variableID& (0+255),w,b
  5935  001386  ECA6  F00A         	call	_gpsTaskGetVarValidity
  5936  00138A  0100               	movlb	0	; () banked
  5937  00138C  6FCB               	movwf	ProtocolGetValidity@taskResponse& (0+255),b
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;sfxProtocoll.c: 55: if(taskResponse != UNKNOWN_SENSOR){
  5941  00138E  0E04               	movlw	4
  5942  001390  19CB               	xorwf	ProtocolGetValidity@taskResponse& (0+255),w,b
  5943  001392  E002               	bz	l2175
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;sfxProtocoll.c: 56: return(taskResponse);
  5947  001394  51CB               	movf	ProtocolGetValidity@taskResponse& (0+255),w,b
  5948  001396  0012               	return	
  5949  001398                     l2175:
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;sfxProtocoll.c: 57: }
  5953                           ;sfxProtocoll.c: 58: taskResponse = powerTaskGetVarValidity(variableID);
  5954  001398  51CA               	movf	ProtocolGetValidity@variableID& (0+255),w,b
  5955  00139A  EC89  F00A         	call	_powerTaskGetVarValidity
  5956  00139E  6FCB               	movwf	ProtocolGetValidity@taskResponse& (0+255),b
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;sfxProtocoll.c: 59: if(taskResponse != UNKNOWN_SENSOR){
  5960  0013A0  0E04               	movlw	4
  5961  0013A2  19CB               	xorwf	ProtocolGetValidity@taskResponse& (0+255),w,b
  5962  0013A4  E002               	bz	l2183
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;sfxProtocoll.c: 60: return(taskResponse);
  5966  0013A6  51CB               	movf	ProtocolGetValidity@taskResponse& (0+255),w,b
  5967  0013A8  0012               	return	
  5968  0013AA                     l2183:
  5969                           
  5970                           ; BSR set to: 0
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;sfxProtocoll.c: 61: }
  5974                           ;sfxProtocoll.c: 62: return(UNKNOWN_SENSOR);
  5975  0013AA  0C04               	retlw	4	;funcret
  5976  0013AC                     __end_of_ProtocolGetValidity:
  5977                           	opt stack 0
  5978                           tosu	equ	0xFFF
  5979                           tosh	equ	0xFFE
  5980                           tosl	equ	0xFFD
  5981                           pclath	equ	0xFFA
  5982                           tblptru	equ	0xFF8
  5983                           tblptrh	equ	0xFF7
  5984                           tblptrl	equ	0xFF6
  5985                           tablat	equ	0xFF5
  5986                           prodh	equ	0xFF4
  5987                           prodl	equ	0xFF3
  5988                           intcon	equ	0xFF2
  5989                           intcon2	equ	0xFF1
  5990                           postinc0	equ	0xFEE
  5991                           wreg	equ	0xFE8
  5992                           indf1	equ	0xFE7
  5993                           postdec1	equ	0xFE5
  5994                           fsr1h	equ	0xFE2
  5995                           fsr1l	equ	0xFE1
  5996                           indf2	equ	0xFDF
  5997                           postinc2	equ	0xFDE
  5998                           plusw2	equ	0xFDB
  5999                           fsr2h	equ	0xFDA
  6000                           fsr2l	equ	0xFD9
  6001                           status	equ	0xFD8
  6002                           
  6003 ;; *************** function _powerTaskGetVarValidity *****************
  6004 ;; Defined at:
  6005 ;;		line 137 in file "powerTask.c"
  6006 ;; Parameters:    Size  Location     Type
  6007 ;;  variableID      1    wreg     unsigned char 
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;  variableID      1    5[BANK0 ] unsigned char 
  6010 ;; Return value:  Size  Location     Type
  6011 ;;                  1    wreg      enum E6686
  6012 ;; Registers used:
  6013 ;;		wreg, status,2, status,0
  6014 ;; Tracked objects:
  6015 ;;		On entry : 3F/0
  6016 ;;		On exit  : 3F/0
  6017 ;;		Unchanged: 0/0
  6018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6019 ;;      Params:         0       0       0       0       0       0       0
  6020 ;;      Locals:         0       1       0       0       0       0       0
  6021 ;;      Temps:          0       0       0       0       0       0       0
  6022 ;;      Totals:         0       1       0       0       0       0       0
  6023 ;;Total ram usage:        1 bytes
  6024 ;; Hardware stack levels used:    1
  6025 ;; Hardware stack levels required when called:    5
  6026 ;; This function calls:
  6027 ;;		Nothing
  6028 ;; This function is called by:
  6029 ;;		_ProtocolGetValidity
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           	psect	text37
  6034  001512                     __ptext37:
  6035                           	opt stack 0
  6036  001512                     _powerTaskGetVarValidity:
  6037                           	opt stack 22
  6038                           
  6039                           ; BSR set to: 0
  6040                           ;incstack = 0
  6041                           ;powerTaskGetVarValidity@variableID stored from wreg
  6042  001512  0100               	movlb	0	; () banked
  6043  001514  6FC9               	movwf	powerTaskGetVarValidity@variableID& (0+255),b
  6044                           
  6045                           ;powerTask.c: 138: if(variableID == 0x0B){
  6046  001516  0E0B               	movlw	11
  6047  001518  19C9               	xorwf	powerTaskGetVarValidity@variableID& (0+255),w,b
  6048  00151A  E101               	bnz	l1971
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;powerTask.c: 139: return(SENSOR_READ);
  6052  00151C  0C00               	retlw	0
  6053  00151E                     l1971:
  6054                           
  6055                           ; BSR set to: 0
  6056                           
  6057                           ; BSR set to: 0
  6058                           ;powerTask.c: 140: }
  6059                           ;powerTask.c: 141: return(UNKNOWN_SENSOR);
  6060  00151E  0C04               	retlw	4	;funcret
  6061  001520                     __end_of_powerTaskGetVarValidity:
  6062                           	opt stack 0
  6063                           tosu	equ	0xFFF
  6064                           tosh	equ	0xFFE
  6065                           tosl	equ	0xFFD
  6066                           pclath	equ	0xFFA
  6067                           tblptru	equ	0xFF8
  6068                           tblptrh	equ	0xFF7
  6069                           tblptrl	equ	0xFF6
  6070                           tablat	equ	0xFF5
  6071                           prodh	equ	0xFF4
  6072                           prodl	equ	0xFF3
  6073                           intcon	equ	0xFF2
  6074                           intcon2	equ	0xFF1
  6075                           postinc0	equ	0xFEE
  6076                           wreg	equ	0xFE8
  6077                           indf1	equ	0xFE7
  6078                           postdec1	equ	0xFE5
  6079                           fsr1h	equ	0xFE2
  6080                           fsr1l	equ	0xFE1
  6081                           indf2	equ	0xFDF
  6082                           postinc2	equ	0xFDE
  6083                           plusw2	equ	0xFDB
  6084                           fsr2h	equ	0xFDA
  6085                           fsr2l	equ	0xFD9
  6086                           status	equ	0xFD8
  6087                           
  6088 ;; *************** function _gpsTaskGetVarValidity *****************
  6089 ;; Defined at:
  6090 ;;		line 728 in file "mcc_generated_files/eusart1.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;  variableID      1    wreg     unsigned char 
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;  variableID      1    5[BANK0 ] unsigned char 
  6095 ;; Return value:  Size  Location     Type
  6096 ;;                  1    wreg      enum E6670
  6097 ;; Registers used:
  6098 ;;		wreg
  6099 ;; Tracked objects:
  6100 ;;		On entry : 3F/0
  6101 ;;		On exit  : 0/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6104 ;;      Params:         0       0       0       0       0       0       0
  6105 ;;      Locals:         0       1       0       0       0       0       0
  6106 ;;      Temps:          0       0       0       0       0       0       0
  6107 ;;      Totals:         0       1       0       0       0       0       0
  6108 ;;Total ram usage:        1 bytes
  6109 ;; Hardware stack levels used:    1
  6110 ;; Hardware stack levels required when called:    5
  6111 ;; This function calls:
  6112 ;;		Nothing
  6113 ;; This function is called by:
  6114 ;;		_ProtocolGetValidity
  6115 ;; This function uses a non-reentrant model
  6116 ;;
  6117                           
  6118                           	psect	text38
  6119  00154C                     __ptext38:
  6120                           	opt stack 0
  6121  00154C                     _gpsTaskGetVarValidity:
  6122                           	opt stack 22
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;incstack = 0
  6126                           ;gpsTaskGetVarValidity@variableID stored from wreg
  6127  00154C  0100               	movlb	0	; () banked
  6128  00154E  6FC9               	movwf	gpsTaskGetVarValidity@variableID& (0+255),b
  6129                           
  6130                           ;eusart1.c: 730: return(UNKNOWN_SENSOR);
  6131  001550  0C04               	retlw	4	;funcret
  6132  001552                     __end_of_gpsTaskGetVarValidity:
  6133                           	opt stack 0
  6134                           tosu	equ	0xFFF
  6135                           tosh	equ	0xFFE
  6136                           tosl	equ	0xFFD
  6137                           pclath	equ	0xFFA
  6138                           tblptru	equ	0xFF8
  6139                           tblptrh	equ	0xFF7
  6140                           tblptrl	equ	0xFF6
  6141                           tablat	equ	0xFF5
  6142                           prodh	equ	0xFF4
  6143                           prodl	equ	0xFF3
  6144                           intcon	equ	0xFF2
  6145                           intcon2	equ	0xFF1
  6146                           postinc0	equ	0xFEE
  6147                           wreg	equ	0xFE8
  6148                           indf1	equ	0xFE7
  6149                           postdec1	equ	0xFE5
  6150                           fsr1h	equ	0xFE2
  6151                           fsr1l	equ	0xFE1
  6152                           indf2	equ	0xFDF
  6153                           postinc2	equ	0xFDE
  6154                           plusw2	equ	0xFDB
  6155                           fsr2h	equ	0xFDA
  6156                           fsr2l	equ	0xFD9
  6157                           status	equ	0xFD8
  6158                           
  6159 ;; *************** function _ProtocolAddFrameData *****************
  6160 ;; Defined at:
  6161 ;;		line 64 in file "sfxProtocoll.c"
  6162 ;; Parameters:    Size  Location     Type
  6163 ;;  Data            4    5[BANK0 ] unsigned long 
  6164 ;;  DataRepSize     1    9[BANK0 ] unsigned char 
  6165 ;; Auto vars:     Size  Location     Type
  6166 ;;  longMask        4   20[BANK0 ] unsigned long 
  6167 ;;  bytes           1   25[BANK0 ] unsigned char 
  6168 ;;  i               1   24[BANK0 ] unsigned char 
  6169 ;;  toLeft          1   19[BANK0 ] unsigned char 
  6170 ;; Return value:  Size  Location     Type
  6171 ;;                  1    wreg      void 
  6172 ;; Registers used:
  6173 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6174 ;; Tracked objects:
  6175 ;;		On entry : 0/0
  6176 ;;		On exit  : 3F/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6179 ;;      Params:         0       5       0       0       0       0       0
  6180 ;;      Locals:         0       7       0       0       0       0       0
  6181 ;;      Temps:          0       9       0       0       0       0       0
  6182 ;;      Totals:         0      21       0       0       0       0       0
  6183 ;;Total ram usage:       21 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:    5
  6186 ;; This function calls:
  6187 ;;		Nothing
  6188 ;; This function is called by:
  6189 ;;		_ProtocolTaskBuildFrame
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           	psect	text39
  6194  000924                     __ptext39:
  6195                           	opt stack 0
  6196  000924                     _ProtocolAddFrameData:
  6197                           	opt stack 23
  6198                           
  6199                           ;sfxProtocoll.c: 65: uint8_t toLeft, i, bytes;
  6200                           ;sfxProtocoll.c: 66: unsigned long longMask;
  6201                           ;sfxProtocoll.c: 68: toLeft = DataRepSize / 8;
  6202                           
  6203                           ;incstack = 0
  6204  000924  0100               	movlb	0	; () banked
  6205  000926  39CD               	swapf	ProtocolAddFrameData@DataRepSize& (0+255),w,b
  6206  000928  46E8               	rlncf	wreg,f,c
  6207  00092A  0B1F               	andlw	31
  6208  00092C  6FD7               	movwf	ProtocolAddFrameData@toLeft& (0+255),b
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;sfxProtocoll.c: 69: for(i = 0; i < toLeft; i++){
  6212  00092E  6BDC               	clrf	ProtocolAddFrameData@i& (0+255),b
  6213  000930  D013               	goto	l3129
  6214  000932                     l682:
  6215                           
  6216                           ; BSR set to: 0
  6217                           ;sfxProtocoll.c: 70: for(bytes = 0; bytes < 11; bytes++){
  6218  000932  6BDD               	clrf	ProtocolAddFrameData@bytes& (0+255),b
  6219  000934                     l3115:
  6220                           
  6221                           ; BSR set to: 0
  6222  000934  0E0A               	movlw	10
  6223  000936  65DD               	cpfsgt	ProtocolAddFrameData@bytes& (0+255),b
  6224  000938  D001               	goto	l3119
  6225  00093A  D00B               	goto	l3125
  6226  00093C                     l3119:
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;sfxProtocoll.c: 71: protDataShifter[bytes] = protDataShifter[bytes + 1];
  6230  00093C  D881               	call	PL20	;call to abstracted procedure
  6231  00093E  0EB8               	movlw	low _protDataShifter
  6232  000940  25DD               	addwf	ProtocolAddFrameData@bytes& (0+255),w,b
  6233  000942  6EE1               	movwf	fsr1l,c
  6234  000944  6AE2               	clrf	fsr1h,c
  6235  000946  0E00               	movlw	high _protDataShifter
  6236  000948  22E2               	addwfc	fsr1h,f,c
  6237  00094A  CFDF FFE7          	movff	indf2,indf1
  6238                           
  6239                           ; BSR set to: 0
  6240  00094E  2BDD               	incf	ProtocolAddFrameData@bytes& (0+255),f,b
  6241  000950  D7F1               	goto	l3115
  6242  000952                     l3125:
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;sfxProtocoll.c: 72: }
  6246                           ;sfxProtocoll.c: 73: protDataShifter[bytes] = 0;
  6247  000952  D86F               	call	PL4	;call to abstracted procedure
  6248  000954  6ADF               	clrf	indf2,c
  6249                           
  6250                           ; BSR set to: 0
  6251  000956  2BDC               	incf	ProtocolAddFrameData@i& (0+255),f,b
  6252  000958                     l3129:
  6253                           
  6254                           ; BSR set to: 0
  6255  000958  51D7               	movf	ProtocolAddFrameData@toLeft& (0+255),w,b
  6256  00095A  5DDC               	subwf	ProtocolAddFrameData@i& (0+255),w,b
  6257  00095C  E3EA               	bnc	l682
  6258                           
  6259                           ; BSR set to: 0
  6260                           ;sfxProtocoll.c: 74: }
  6261                           ;sfxProtocoll.c: 75: toLeft = DataRepSize % 8;
  6262  00095E  51CD               	movf	ProtocolAddFrameData@DataRepSize& (0+255),w,b
  6263  000960  0B07               	andlw	7
  6264  000962  6FD7               	movwf	ProtocolAddFrameData@toLeft& (0+255),b
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;sfxProtocoll.c: 76: for(i = 0; i < toLeft; i++){
  6268  000964  6BDC               	clrf	ProtocolAddFrameData@i& (0+255),b
  6269  000966  D01B               	goto	l3155
  6270  000968                     l687:
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;sfxProtocoll.c: 77: for(bytes = 0; bytes < 12; bytes++){
  6274  000968  6BDD               	clrf	ProtocolAddFrameData@bytes& (0+255),b
  6275  00096A                     l3135:
  6276                           
  6277                           ; BSR set to: 0
  6278  00096A  0E0B               	movlw	11
  6279  00096C  65DD               	cpfsgt	ProtocolAddFrameData@bytes& (0+255),b
  6280  00096E  D001               	goto	l3139
  6281  000970  D012               	goto	l3151
  6282  000972                     l3139:
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;sfxProtocoll.c: 78: protDataShifter[bytes] = (protDataShifter[bytes] * 2);
  6286  000972  D85F               	call	PL4	;call to abstracted procedure
  6287  000974  50DF               	movf	indf2,w,c
  6288  000976  0D02               	mullw	2
  6289  000978  D85C               	call	PL4	;call to abstracted procedure
  6290  00097A  CFF3 FFDF          	movff	prodl,indf2
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;sfxProtocoll.c: 79: if(protDataShifter[bytes + 1] & 0x80){
  6294  00097E  D860               	call	PL20	;call to abstracted procedure
  6295  000980  AEDF               	btfss	indf2,7,c
  6296  000982  D004               	goto	l3145
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;sfxProtocoll.c: 80: protDataShifter[bytes] |= 1;
  6300  000984  D856               	call	PL4	;call to abstracted procedure
  6301  000986  0E00               	movlw	0
  6302  000988  80DB               	bsf	plusw2,0,c
  6303                           
  6304                           ;sfxProtocoll.c: 81: }
  6305  00098A  D003               	goto	l3147
  6306  00098C                     l3145:
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;sfxProtocoll.c: 82: else{
  6310                           ;sfxProtocoll.c: 83: protDataShifter[bytes] &= 0xFE;
  6311  00098C  D852               	call	PL4	;call to abstracted procedure
  6312  00098E  0EFE               	movlw	254
  6313  000990  16DF               	andwf	indf2,f,c
  6314  000992                     l3147:
  6315                           
  6316                           ; BSR set to: 0
  6317  000992  2BDD               	incf	ProtocolAddFrameData@bytes& (0+255),f,b
  6318  000994  D7EA               	goto	l3135
  6319  000996                     l3151:
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;sfxProtocoll.c: 84: }
  6323                           ;sfxProtocoll.c: 85: }
  6324                           ;sfxProtocoll.c: 86: protDataShifter[bytes] &= 0xFE;
  6325  000996  D84D               	call	PL4	;call to abstracted procedure
  6326  000998  0EFE               	movlw	254
  6327  00099A  16DF               	andwf	indf2,f,c
  6328                           
  6329                           ; BSR set to: 0
  6330  00099C  2BDC               	incf	ProtocolAddFrameData@i& (0+255),f,b
  6331  00099E                     l3155:
  6332                           
  6333                           ; BSR set to: 0
  6334  00099E  51D7               	movf	ProtocolAddFrameData@toLeft& (0+255),w,b
  6335  0009A0  5DDC               	subwf	ProtocolAddFrameData@i& (0+255),w,b
  6336  0009A2  E3E2               	bnc	l687
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;sfxProtocoll.c: 87: }
  6340                           ;sfxProtocoll.c: 88: longMask = 1;
  6341  0009A4  0E01               	movlw	1
  6342  0009A6  6FD8               	movwf	ProtocolAddFrameData@longMask& (0+255),b
  6343  0009A8  6BD9               	clrf	(ProtocolAddFrameData@longMask+1)& (0+255),b
  6344  0009AA  6BDA               	clrf	(ProtocolAddFrameData@longMask+2)& (0+255),b
  6345  0009AC  6BDB               	clrf	(ProtocolAddFrameData@longMask+3)& (0+255),b
  6346                           
  6347                           ; BSR set to: 0
  6348                           ;sfxProtocoll.c: 89: longMask = ((longMask << DataRepSize) - 1) & Data;
  6349  0009AE  C0CD  F0CE         	movff	ProtocolAddFrameData@DataRepSize,??_ProtocolAddFrameData
  6350  0009B2  C0D8  F0CF         	movff	ProtocolAddFrameData@longMask,??_ProtocolAddFrameData+1
  6351  0009B6  C0D9  F0D0         	movff	ProtocolAddFrameData@longMask+1,??_ProtocolAddFrameData+2
  6352  0009BA  C0DA  F0D1         	movff	ProtocolAddFrameData@longMask+2,??_ProtocolAddFrameData+3
  6353  0009BE  C0DB  F0D2         	movff	ProtocolAddFrameData@longMask+3,??_ProtocolAddFrameData+4
  6354  0009C2  2BCE               	incf	??_ProtocolAddFrameData& (0+255),f,b
  6355  0009C4  D005               	goto	u1750
  6356  0009C6                     u1755:
  6357  0009C6  90D8               	bcf	status,0,c
  6358  0009C8  37CF               	rlcf	(??_ProtocolAddFrameData+1)& (0+255),f,b
  6359  0009CA  37D0               	rlcf	(??_ProtocolAddFrameData+2)& (0+255),f,b
  6360  0009CC  37D1               	rlcf	(??_ProtocolAddFrameData+3)& (0+255),f,b
  6361  0009CE  37D2               	rlcf	(??_ProtocolAddFrameData+4)& (0+255),f,b
  6362  0009D0                     u1750:
  6363  0009D0  2FCE               	decfsz	??_ProtocolAddFrameData& (0+255),f,b
  6364  0009D2  D7F9               	goto	u1755
  6365  0009D4  0EFF               	movlw	255
  6366  0009D6  25CF               	addwf	(??_ProtocolAddFrameData+1)& (0+255),w,b
  6367  0009D8  6FD3               	movwf	(??_ProtocolAddFrameData+5)& (0+255),b
  6368  0009DA  0EFF               	movlw	255
  6369  0009DC  21D0               	addwfc	(??_ProtocolAddFrameData+2)& (0+255),w,b
  6370  0009DE  6FD4               	movwf	(??_ProtocolAddFrameData+6)& (0+255),b
  6371  0009E0  0EFF               	movlw	255
  6372  0009E2  21D1               	addwfc	(??_ProtocolAddFrameData+3)& (0+255),w,b
  6373  0009E4  6FD5               	movwf	(??_ProtocolAddFrameData+7)& (0+255),b
  6374  0009E6  0EFF               	movlw	255
  6375  0009E8  21D2               	addwfc	(??_ProtocolAddFrameData+4)& (0+255),w,b
  6376  0009EA  6FD6               	movwf	(??_ProtocolAddFrameData+8)& (0+255),b
  6377  0009EC  51C9               	movf	ProtocolAddFrameData@Data& (0+255),w,b
  6378  0009EE  15D3               	andwf	(??_ProtocolAddFrameData+5)& (0+255),w,b
  6379  0009F0  6FD8               	movwf	ProtocolAddFrameData@longMask& (0+255),b
  6380  0009F2  51CA               	movf	(ProtocolAddFrameData@Data+1)& (0+255),w,b
  6381  0009F4  15D4               	andwf	(??_ProtocolAddFrameData+6)& (0+255),w,b
  6382  0009F6  6FD9               	movwf	(ProtocolAddFrameData@longMask+1)& (0+255),b
  6383  0009F8  51CB               	movf	(ProtocolAddFrameData@Data+2)& (0+255),w,b
  6384  0009FA  15D5               	andwf	(??_ProtocolAddFrameData+7)& (0+255),w,b
  6385  0009FC  6FDA               	movwf	(ProtocolAddFrameData@longMask+2)& (0+255),b
  6386  0009FE  51CC               	movf	(ProtocolAddFrameData@Data+3)& (0+255),w,b
  6387  000A00  15D6               	andwf	(??_ProtocolAddFrameData+8)& (0+255),w,b
  6388  000A02  6FDB               	movwf	(ProtocolAddFrameData@longMask+3)& (0+255),b
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;sfxProtocoll.c: 90: for(i = 11; i > 7; i--){
  6392  000A04  0E0B               	movlw	11
  6393  000A06  6FDC               	movwf	ProtocolAddFrameData@i& (0+255),b
  6394  000A08  0E08               	movlw	8
  6395  000A0A  61DC               	cpfslt	ProtocolAddFrameData@i& (0+255),b
  6396  000A0C  D001               	goto	l3165
  6397  000A0E  0C08               	retlw	8
  6398  000A10                     l3165:
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;sfxProtocoll.c: 91: protDataShifter[i] |= (longMask & 0xFF);
  6402  000A10  0EB8               	movlw	low _protDataShifter
  6403  000A12  25DC               	addwf	ProtocolAddFrameData@i& (0+255),w,b
  6404  000A14  6ED9               	movwf	fsr2l,c
  6405  000A16  6ADA               	clrf	fsr2h,c
  6406  000A18  0E00               	movlw	high _protDataShifter
  6407  000A1A  22DA               	addwfc	fsr2h,f,c
  6408  000A1C  51D8               	movf	ProtocolAddFrameData@longMask& (0+255),w,b
  6409  000A1E  12DF               	iorwf	indf2,f,c
  6410                           
  6411                           ; BSR set to: 0
  6412                           ;sfxProtocoll.c: 92: longMask = (longMask>>8);
  6413  000A20  51D9               	movf	(ProtocolAddFrameData@longMask+1)& (0+255),w,b
  6414  000A22  6FD8               	movwf	ProtocolAddFrameData@longMask& (0+255),b
  6415  000A24  51DA               	movf	(ProtocolAddFrameData@longMask+2)& (0+255),w,b
  6416  000A26  6FD9               	movwf	(ProtocolAddFrameData@longMask+1)& (0+255),b
  6417  000A28  51DB               	movf	(ProtocolAddFrameData@longMask+3)& (0+255),w,b
  6418  000A2A  6FDA               	movwf	(ProtocolAddFrameData@longMask+2)& (0+255),b
  6419  000A2C  6BDB               	clrf	(ProtocolAddFrameData@longMask+3)& (0+255),b
  6420                           
  6421                           ; BSR set to: 0
  6422  000A2E  07DC               	decf	ProtocolAddFrameData@i& (0+255),f,b
  6423  000A30  D7EB               	goto	L12
  6424  000A32                     __end_of_ProtocolAddFrameData:
  6425                           	opt stack 0
  6426  000A32                     PL4:
  6427                           	opt stack 23
  6428  000A32  0EB8               	movlw	low _protDataShifter
  6429  000A34  25DD               	addwf	ProtocolAddFrameData@bytes& (0+255),w,b
  6430  000A36  6ED9               	movwf	fsr2l,c
  6431  000A38  6ADA               	clrf	fsr2h,c
  6432  000A3A  0E00               	movlw	high _protDataShifter
  6433  000A3C  22DA               	addwfc	fsr2h,f,c
  6434  000A3E  0012               	return	
  6435  000A40                     __end_ofPL4:
  6436                           	opt stack 0
  6437  000A40                     PL20:
  6438                           	opt stack 23
  6439  000A40  0EB9               	movlw	low (_protDataShifter+1)
  6440  000A42  25DD               	addwf	ProtocolAddFrameData@bytes& (0+255),w,b
  6441  000A44  6ED9               	movwf	fsr2l,c
  6442  000A46  6ADA               	clrf	fsr2h,c
  6443  000A48  0E00               	movlw	high (_protDataShifter+1)
  6444  000A4A  22DA               	addwfc	fsr2h,f,c
  6445  000A4C  0012               	return	
  6446  000A4E                     __end_ofPL20:
  6447                           	opt stack 0
  6448                           tosu	equ	0xFFF
  6449                           tosh	equ	0xFFE
  6450                           tosl	equ	0xFFD
  6451                           pclath	equ	0xFFA
  6452                           tblptru	equ	0xFF8
  6453                           tblptrh	equ	0xFF7
  6454                           tblptrl	equ	0xFF6
  6455                           tablat	equ	0xFF5
  6456                           prodh	equ	0xFF4
  6457                           prodl	equ	0xFF3
  6458                           intcon	equ	0xFF2
  6459                           intcon2	equ	0xFF1
  6460                           postinc0	equ	0xFEE
  6461                           wreg	equ	0xFE8
  6462                           indf1	equ	0xFE7
  6463                           postdec1	equ	0xFE5
  6464                           fsr1h	equ	0xFE2
  6465                           fsr1l	equ	0xFE1
  6466                           indf2	equ	0xFDF
  6467                           postinc2	equ	0xFDE
  6468                           plusw2	equ	0xFDB
  6469                           fsr2h	equ	0xFDA
  6470                           fsr2l	equ	0xFD9
  6471                           status	equ	0xFD8
  6472                           
  6473 ;; *************** function _ProtocolSetNextMeasTime *****************
  6474 ;; Defined at:
  6475 ;;		line 17 in file "sfxProtocoll.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;		None
  6478 ;; Auto vars:     Size  Location     Type
  6479 ;;		None
  6480 ;; Return value:  Size  Location     Type
  6481 ;;                  1    wreg      unsigned char 
  6482 ;; Registers used:
  6483 ;;		wreg, status,2, status,0, cstack
  6484 ;; Tracked objects:
  6485 ;;		On entry : 0/0
  6486 ;;		On exit  : 3F/0
  6487 ;;		Unchanged: 0/0
  6488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6489 ;;      Params:         0       0       0       0       0       0       0
  6490 ;;      Locals:         0       0       0       0       0       0       0
  6491 ;;      Temps:          0       0       0       0       0       0       0
  6492 ;;      Totals:         0       0       0       0       0       0       0
  6493 ;;Total ram usage:        0 bytes
  6494 ;; Hardware stack levels used:    1
  6495 ;; Hardware stack levels required when called:    6
  6496 ;; This function calls:
  6497 ;;		___almod
  6498 ;; This function is called by:
  6499 ;;		_ProtocolTask
  6500 ;; This function uses a non-reentrant model
  6501 ;;
  6502                           
  6503                           	psect	text40
  6504  000DC8                     __ptext40:
  6505                           	opt stack 0
  6506  000DC8                     _ProtocolSetNextMeasTime:
  6507                           	opt stack 23
  6508                           
  6509                           ;sfxProtocoll.c: 19: if(!protVarSystemSynchronizedFlag){
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;incstack = 0
  6513  000DC8  0100               	movlb	0	; () banked
  6514  000DCA  5183               	movf	_protVarSystemSynchronizedFlag& (0+255),w,b
  6515  000DCC  E10E               	bnz	l3225
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;sfxProtocoll.c: 20: if(sysVarGpsValidFlag){
  6519  000DCE  5194               	movf	_sysVarGpsValidFlag& (0+255),w,b
  6520  000DD0  E00C               	bz	l3225
  6521                           
  6522                           ; BSR set to: 0
  6523                           ;sfxProtocoll.c: 21: protVarSystemSynchronizedFlag = 1;
  6524  000DD2  0E01               	movlw	1
  6525  000DD4  6F83               	movwf	_protVarSystemSynchronizedFlag& (0+255),b
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;sfxProtocoll.c: 22: protVarMeasurementTimer = 600 - (sysVarGpsDayTime % 600);
  6529  000DD6  D81B               	call	PL2	;call to abstracted procedure
  6530  000DD8  EC00  F006         	call	___almod	;wreg free
  6531  000DDC  D828               	call	PL10	;call to abstracted procedure
  6532                           
  6533                           ; BSR set to: 0
  6534                           ;sfxProtocoll.c: 23: protVarCommunicationTimer = 600 - (sysVarGpsDayTime % 600);
  6535  000DDE  D817               	call	PL2	;call to abstracted procedure
  6536  000DE0  EC00  F006         	call	___almod	;wreg free
  6537  000DE4  EC24  F009         	call	PL8	;call to abstracted procedure
  6538                           
  6539                           ; BSR set to: 0
  6540                           ;sfxProtocoll.c: 24: return(0);
  6541  000DE8  0C00               	retlw	0
  6542  000DEA                     l3225:
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;sfxProtocoll.c: 25: }
  6546                           ;sfxProtocoll.c: 26: }
  6547                           ;sfxProtocoll.c: 27: if(protVarMeasurementTimer == 0){
  6548  000DEA  EC9A  F007         	call	PL34	;call to abstracted procedure
  6549  000DEE  E10E               	bnz	l3237
  6550                           
  6551                           ; BSR set to: 0
  6552                           ;sfxProtocoll.c: 28: if(!protVarSystemSynchronizedFlag){
  6553  000DF0  5183               	movf	_protVarSystemSynchronizedFlag& (0+255),w,b
  6554  000DF2  E107               	bnz	l3231
  6555                           
  6556                           ; BSR set to: 0
  6557                           ;sfxProtocoll.c: 29: protVarMeasurementTimer = 300;
  6558  000DF4  0E2C               	movlw	44
  6559  000DF6  6F64               	movwf	_protVarMeasurementTimer& (0+255),b
  6560  000DF8  0E01               	movlw	1
  6561  000DFA  6F65               	movwf	(_protVarMeasurementTimer+1)& (0+255),b
  6562  000DFC  6B66               	clrf	(_protVarMeasurementTimer+2)& (0+255),b
  6563  000DFE  6B67               	clrf	(_protVarMeasurementTimer+3)& (0+255),b
  6564                           
  6565                           ;sfxProtocoll.c: 30: }
  6566  000E00  0C01               	retlw	1
  6567  000E02                     l3231:
  6568                           
  6569                           ; BSR set to: 0
  6570                           ;sfxProtocoll.c: 31: else{
  6571                           ;sfxProtocoll.c: 32: protVarMeasurementTimer = 600 - (sysVarGpsDayTime % 600);
  6572  000E02  D805               	call	PL2	;call to abstracted procedure
  6573  000E04  EC00  F006         	call	___almod	;wreg free
  6574  000E08  D812               	call	PL10	;call to abstracted procedure
  6575                           
  6576                           ; BSR set to: 0
  6577                           ;sfxProtocoll.c: 33: }
  6578                           ;sfxProtocoll.c: 34: return(1);
  6579  000E0A  0C01               	retlw	1
  6580  000E0C                     l3237:
  6581                           
  6582                           ; BSR set to: 0
  6583                           
  6584                           ; BSR set to: 0
  6585                           ;sfxProtocoll.c: 35: }
  6586                           ;sfxProtocoll.c: 36: return(0);
  6587  000E0C  0C00               	retlw	0	;funcret
  6588  000E0E                     __end_of_ProtocolSetNextMeasTime:
  6589                           	opt stack 0
  6590  000E0E                     PL2:
  6591                           	opt stack 23
  6592  000E0E  C068  F0C9         	movff	_sysVarGpsDayTime,___almod@dividend
  6593  000E12  C069  F0CA         	movff	_sysVarGpsDayTime+1,___almod@dividend+1
  6594  000E16  C06A  F0CB         	movff	_sysVarGpsDayTime+2,___almod@dividend+2
  6595  000E1A  C06B  F0CC         	movff	_sysVarGpsDayTime+3,___almod@dividend+3
  6596  000E1E  0E58               	movlw	88
  6597  000E20  6FCD               	movwf	___almod@divisor& (0+255),b
  6598  000E22  0E02               	movlw	2
  6599  000E24  6FCE               	movwf	(___almod@divisor+1)& (0+255),b
  6600  000E26  0E00               	movlw	0
  6601  000E28  6FCF               	movwf	(___almod@divisor+2)& (0+255),b
  6602  000E2A  6FD0               	movwf	(___almod@divisor+3)& (0+255),b
  6603  000E2C  0C00               	retlw	0
  6604  000E2E                     __end_ofPL2:
  6605                           	opt stack 0
  6606  000E2E                     PL10:
  6607                           	opt stack 23
  6608  000E2E  51C9               	movf	?___almod& (0+255),w,b
  6609  000E30  0858               	sublw	88
  6610  000E32  6F64               	movwf	_protVarMeasurementTimer& (0+255),b
  6611  000E34  0E02               	movlw	2
  6612  000E36  55CA               	subfwb	(?___almod+1)& (0+255),w,b
  6613  000E38  6F65               	movwf	(_protVarMeasurementTimer+1)& (0+255),b
  6614  000E3A  0E00               	movlw	0
  6615  000E3C  55CB               	subfwb	(?___almod+2)& (0+255),w,b
  6616  000E3E  6F66               	movwf	(_protVarMeasurementTimer+2)& (0+255),b
  6617  000E40  0E00               	movlw	0
  6618  000E42  55CC               	subfwb	(?___almod+3)& (0+255),w,b
  6619  000E44  6F67               	movwf	(_protVarMeasurementTimer+3)& (0+255),b
  6620  000E46  0012               	return	
  6621  000E48                     __end_ofPL10:
  6622                           	opt stack 0
  6623                           tosu	equ	0xFFF
  6624                           tosh	equ	0xFFE
  6625                           tosl	equ	0xFFD
  6626                           pclath	equ	0xFFA
  6627                           tblptru	equ	0xFF8
  6628                           tblptrh	equ	0xFF7
  6629                           tblptrl	equ	0xFF6
  6630                           tablat	equ	0xFF5
  6631                           prodh	equ	0xFF4
  6632                           prodl	equ	0xFF3
  6633                           intcon	equ	0xFF2
  6634                           intcon2	equ	0xFF1
  6635                           postinc0	equ	0xFEE
  6636                           wreg	equ	0xFE8
  6637                           indf1	equ	0xFE7
  6638                           postdec1	equ	0xFE5
  6639                           fsr1h	equ	0xFE2
  6640                           fsr1l	equ	0xFE1
  6641                           indf2	equ	0xFDF
  6642                           postinc2	equ	0xFDE
  6643                           plusw2	equ	0xFDB
  6644                           fsr2h	equ	0xFDA
  6645                           fsr2l	equ	0xFD9
  6646                           status	equ	0xFD8
  6647                           
  6648 ;; *************** function _ProtocolSetNextCommTime *****************
  6649 ;; Defined at:
  6650 ;;		line 38 in file "sfxProtocoll.c"
  6651 ;; Parameters:    Size  Location     Type
  6652 ;;		None
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;		None
  6655 ;; Return value:  Size  Location     Type
  6656 ;;                  1    wreg      unsigned char 
  6657 ;; Registers used:
  6658 ;;		wreg, status,2, status,0, cstack
  6659 ;; Tracked objects:
  6660 ;;		On entry : 3F/0
  6661 ;;		On exit  : 3F/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6664 ;;      Params:         0       0       0       0       0       0       0
  6665 ;;      Locals:         0       0       0       0       0       0       0
  6666 ;;      Temps:          0       0       0       0       0       0       0
  6667 ;;      Totals:         0       0       0       0       0       0       0
  6668 ;;Total ram usage:        0 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; Hardware stack levels required when called:    6
  6671 ;; This function calls:
  6672 ;;		___almod
  6673 ;; This function is called by:
  6674 ;;		_ProtocolTask
  6675 ;; This function uses a non-reentrant model
  6676 ;;
  6677                           
  6678                           	psect	text41
  6679  001228                     __ptext41:
  6680                           	opt stack 0
  6681  001228                     _ProtocolSetNextCommTime:
  6682                           	opt stack 23
  6683                           
  6684                           ;sfxProtocoll.c: 40: protVarSystemSynchronizedFlag = 1;
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;incstack = 0
  6688  001228  0E01               	movlw	1
  6689  00122A  0100               	movlb	0	; () banked
  6690  00122C  6F83               	movwf	_protVarSystemSynchronizedFlag& (0+255),b
  6691                           
  6692                           ;sfxProtocoll.c: 42: if(!protVarSystemSynchronizedFlag){
  6693  00122E  5183               	movf	_protVarSystemSynchronizedFlag& (0+255),w,b
  6694  001230  E101               	bnz	l3247
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;sfxProtocoll.c: 43: return(0);
  6698  001232  0C00               	retlw	0
  6699  001234                     l3247:
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;sfxProtocoll.c: 44: }
  6703                           ;sfxProtocoll.c: 46: if(protVarCommunicationTimer == 0){
  6704  001234  EC95  F007         	call	PL30	;call to abstracted procedure
  6705  001238  E106               	bnz	l3255
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;sfxProtocoll.c: 47: protVarCommunicationTimer = 600 - (sysVarGpsDayTime % 600) ;
  6709  00123A  EC07  F007         	call	PL2	;call to abstracted procedure
  6710  00123E  EC00  F006         	call	___almod	;wreg free
  6711  001242  D802               	call	PL8	;call to abstracted procedure
  6712                           
  6713                           ; BSR set to: 0
  6714                           ;sfxProtocoll.c: 48: return(1);
  6715  001244  0C01               	retlw	1
  6716  001246                     l3255:
  6717                           
  6718                           ; BSR set to: 0
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;sfxProtocoll.c: 49: }
  6722                           ;sfxProtocoll.c: 50: return(0);
  6723  001246  0C00               	retlw	0	;funcret
  6724  001248                     __end_of_ProtocolSetNextCommTime:
  6725                           	opt stack 0
  6726  001248                     PL8:
  6727                           	opt stack 23
  6728  001248  51C9               	movf	?___almod& (0+255),w,b
  6729  00124A  0858               	sublw	88
  6730  00124C  6F60               	movwf	_protVarCommunicationTimer& (0+255),b
  6731  00124E  0E02               	movlw	2
  6732  001250  55CA               	subfwb	(?___almod+1)& (0+255),w,b
  6733  001252  6F61               	movwf	(_protVarCommunicationTimer+1)& (0+255),b
  6734  001254  0E00               	movlw	0
  6735  001256  55CB               	subfwb	(?___almod+2)& (0+255),w,b
  6736  001258  6F62               	movwf	(_protVarCommunicationTimer+2)& (0+255),b
  6737  00125A  0E00               	movlw	0
  6738  00125C  55CC               	subfwb	(?___almod+3)& (0+255),w,b
  6739  00125E  6F63               	movwf	(_protVarCommunicationTimer+3)& (0+255),b
  6740  001260  0012               	return	
  6741  001262                     __end_ofPL8:
  6742                           	opt stack 0
  6743                           tosu	equ	0xFFF
  6744                           tosh	equ	0xFFE
  6745                           tosl	equ	0xFFD
  6746                           pclath	equ	0xFFA
  6747                           tblptru	equ	0xFF8
  6748                           tblptrh	equ	0xFF7
  6749                           tblptrl	equ	0xFF6
  6750                           tablat	equ	0xFF5
  6751                           prodh	equ	0xFF4
  6752                           prodl	equ	0xFF3
  6753                           intcon	equ	0xFF2
  6754                           intcon2	equ	0xFF1
  6755                           postinc0	equ	0xFEE
  6756                           wreg	equ	0xFE8
  6757                           indf1	equ	0xFE7
  6758                           postdec1	equ	0xFE5
  6759                           fsr1h	equ	0xFE2
  6760                           fsr1l	equ	0xFE1
  6761                           indf2	equ	0xFDF
  6762                           postinc2	equ	0xFDE
  6763                           plusw2	equ	0xFDB
  6764                           fsr2h	equ	0xFDA
  6765                           fsr2l	equ	0xFD9
  6766                           status	equ	0xFD8
  6767                           
  6768 ;; *************** function ___almod *****************
  6769 ;; Defined at:
  6770 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/almod.c"
  6771 ;; Parameters:    Size  Location     Type
  6772 ;;  dividend        4    5[BANK0 ] long 
  6773 ;;  divisor         4    9[BANK0 ] long 
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;  sign            1   14[BANK0 ] unsigned char 
  6776 ;;  counter         1   13[BANK0 ] unsigned char 
  6777 ;; Return value:  Size  Location     Type
  6778 ;;                  4    5[BANK0 ] long 
  6779 ;; Registers used:
  6780 ;;		wreg, status,2, status,0
  6781 ;; Tracked objects:
  6782 ;;		On entry : 3F/0
  6783 ;;		On exit  : 3F/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6786 ;;      Params:         0       8       0       0       0       0       0
  6787 ;;      Locals:         0       2       0       0       0       0       0
  6788 ;;      Temps:          0       0       0       0       0       0       0
  6789 ;;      Totals:         0      10       0       0       0       0       0
  6790 ;;Total ram usage:       10 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; Hardware stack levels required when called:    5
  6793 ;; This function calls:
  6794 ;;		Nothing
  6795 ;; This function is called by:
  6796 ;;		_ProtocolSetNextMeasTime
  6797 ;;		_ProtocolSetNextCommTime
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           	psect	text42
  6802  000C00                     __ptext42:
  6803                           	opt stack 0
  6804  000C00                     ___almod:
  6805                           	opt stack 23
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;incstack = 0
  6809  000C00  0100               	movlb	0	; () banked
  6810  000C02  6BD2               	clrf	___almod@sign& (0+255),b
  6811                           
  6812                           ; BSR set to: 0
  6813  000C04  AFCC               	btfss	(___almod@dividend+3)& (0+255),7,b
  6814  000C06  D003               	goto	l3181
  6815                           
  6816                           ; BSR set to: 0
  6817  000C08  D840               	call	PL47	;call to abstracted procedure
  6818                           
  6819                           ; BSR set to: 0
  6820  000C0A  0E01               	movlw	1
  6821  000C0C  6FD2               	movwf	___almod@sign& (0+255),b
  6822  000C0E                     l3181:
  6823                           
  6824                           ; BSR set to: 0
  6825  000C0E  AFD0               	btfss	(___almod@divisor+3)& (0+255),7,b
  6826  000C10  D008               	goto	l3185
  6827                           
  6828                           ; BSR set to: 0
  6829  000C12  1FD0               	comf	(___almod@divisor+3)& (0+255),f,b
  6830  000C14  1FCF               	comf	(___almod@divisor+2)& (0+255),f,b
  6831  000C16  1FCE               	comf	(___almod@divisor+1)& (0+255),f,b
  6832  000C18  6DCD               	negf	___almod@divisor& (0+255),b
  6833  000C1A  0E00               	movlw	0
  6834  000C1C  23CE               	addwfc	(___almod@divisor+1)& (0+255),f,b
  6835  000C1E  23CF               	addwfc	(___almod@divisor+2)& (0+255),f,b
  6836  000C20  23D0               	addwfc	(___almod@divisor+3)& (0+255),f,b
  6837  000C22                     l3185:
  6838                           
  6839                           ; BSR set to: 0
  6840  000C22  51CD               	movf	___almod@divisor& (0+255),w,b
  6841  000C24  11CE               	iorwf	(___almod@divisor+1)& (0+255),w,b
  6842  000C26  11CF               	iorwf	(___almod@divisor+2)& (0+255),w,b
  6843  000C28  11D0               	iorwf	(___almod@divisor+3)& (0+255),w,b
  6844  000C2A  E023               	bz	l3201
  6845                           
  6846                           ; BSR set to: 0
  6847  000C2C  0E01               	movlw	1
  6848  000C2E  6FD1               	movwf	___almod@counter& (0+255),b
  6849  000C30  D006               	goto	l3191
  6850  000C32                     l3189:
  6851                           
  6852                           ; BSR set to: 0
  6853  000C32  90D8               	bcf	status,0,c
  6854  000C34  37CD               	rlcf	___almod@divisor& (0+255),f,b
  6855  000C36  37CE               	rlcf	(___almod@divisor+1)& (0+255),f,b
  6856  000C38  37CF               	rlcf	(___almod@divisor+2)& (0+255),f,b
  6857  000C3A  37D0               	rlcf	(___almod@divisor+3)& (0+255),f,b
  6858  000C3C  2BD1               	incf	___almod@counter& (0+255),f,b
  6859  000C3E                     l3191:
  6860                           
  6861                           ; BSR set to: 0
  6862  000C3E  AFD0               	btfss	(___almod@divisor+3)& (0+255),7,b
  6863  000C40  D7F8               	goto	l3189
  6864  000C42                     l3193:
  6865                           
  6866                           ; BSR set to: 0
  6867  000C42  51CD               	movf	___almod@divisor& (0+255),w,b
  6868  000C44  5DC9               	subwf	___almod@dividend& (0+255),w,b
  6869  000C46  51CE               	movf	(___almod@divisor+1)& (0+255),w,b
  6870  000C48  59CA               	subwfb	(___almod@dividend+1)& (0+255),w,b
  6871  000C4A  51CF               	movf	(___almod@divisor+2)& (0+255),w,b
  6872  000C4C  59CB               	subwfb	(___almod@dividend+2)& (0+255),w,b
  6873  000C4E  51D0               	movf	(___almod@divisor+3)& (0+255),w,b
  6874  000C50  59CC               	subwfb	(___almod@dividend+3)& (0+255),w,b
  6875  000C52  E308               	bnc	l3197
  6876                           
  6877                           ; BSR set to: 0
  6878  000C54  51CD               	movf	___almod@divisor& (0+255),w,b
  6879  000C56  5FC9               	subwf	___almod@dividend& (0+255),f,b
  6880  000C58  51CE               	movf	(___almod@divisor+1)& (0+255),w,b
  6881  000C5A  5BCA               	subwfb	(___almod@dividend+1)& (0+255),f,b
  6882  000C5C  51CF               	movf	(___almod@divisor+2)& (0+255),w,b
  6883  000C5E  5BCB               	subwfb	(___almod@dividend+2)& (0+255),f,b
  6884  000C60  51D0               	movf	(___almod@divisor+3)& (0+255),w,b
  6885  000C62  5BCC               	subwfb	(___almod@dividend+3)& (0+255),f,b
  6886  000C64                     l3197:
  6887                           
  6888                           ; BSR set to: 0
  6889  000C64  90D8               	bcf	status,0,c
  6890  000C66  33D0               	rrcf	(___almod@divisor+3)& (0+255),f,b
  6891  000C68  33CF               	rrcf	(___almod@divisor+2)& (0+255),f,b
  6892  000C6A  33CE               	rrcf	(___almod@divisor+1)& (0+255),f,b
  6893  000C6C  33CD               	rrcf	___almod@divisor& (0+255),f,b
  6894                           
  6895                           ; BSR set to: 0
  6896  000C6E  2FD1               	decfsz	___almod@counter& (0+255),f,b
  6897  000C70  D7E8               	goto	l3193
  6898  000C72                     l3201:
  6899                           
  6900                           ; BSR set to: 0
  6901  000C72  51D2               	movf	___almod@sign& (0+255),w,b
  6902  000C74  E001               	bz	l3205
  6903                           
  6904                           ; BSR set to: 0
  6905  000C76  D809               	call	PL47	;call to abstracted procedure
  6906  000C78                     l3205:
  6907                           
  6908                           ; BSR set to: 0
  6909  000C78  C0C9  F0C9         	movff	___almod@dividend,?___almod
  6910  000C7C  C0CA  F0CA         	movff	___almod@dividend+1,?___almod+1
  6911  000C80  C0CB  F0CB         	movff	___almod@dividend+2,?___almod+2
  6912  000C84  C0CC  F0CC         	movff	___almod@dividend+3,?___almod+3
  6913                           
  6914                           ; BSR set to: 0
  6915  000C88  0012               	return		;funcret
  6916  000C8A                     __end_of___almod:
  6917                           	opt stack 0
  6918  000C8A                     PL47:
  6919                           	opt stack 23
  6920  000C8A  1FCC               	comf	(___almod@dividend+3)& (0+255),f,b
  6921  000C8C  1FCB               	comf	(___almod@dividend+2)& (0+255),f,b
  6922  000C8E  1FCA               	comf	(___almod@dividend+1)& (0+255),f,b
  6923  000C90  6DC9               	negf	___almod@dividend& (0+255),b
  6924  000C92  0E00               	movlw	0
  6925  000C94  23CA               	addwfc	(___almod@dividend+1)& (0+255),f,b
  6926  000C96  23CB               	addwfc	(___almod@dividend+2)& (0+255),f,b
  6927  000C98  23CC               	addwfc	(___almod@dividend+3)& (0+255),f,b
  6928  000C9A  0C00               	retlw	0
  6929  000C9C                     __end_ofPL47:
  6930                           	opt stack 0
  6931                           tosu	equ	0xFFF
  6932                           tosh	equ	0xFFE
  6933                           tosl	equ	0xFFD
  6934                           pclath	equ	0xFFA
  6935                           tblptru	equ	0xFF8
  6936                           tblptrh	equ	0xFF7
  6937                           tblptrl	equ	0xFF6
  6938                           tablat	equ	0xFF5
  6939                           prodh	equ	0xFF4
  6940                           prodl	equ	0xFF3
  6941                           intcon	equ	0xFF2
  6942                           intcon2	equ	0xFF1
  6943                           postinc0	equ	0xFEE
  6944                           wreg	equ	0xFE8
  6945                           indf1	equ	0xFE7
  6946                           postdec1	equ	0xFE5
  6947                           fsr1h	equ	0xFE2
  6948                           fsr1l	equ	0xFE1
  6949                           indf2	equ	0xFDF
  6950                           postinc2	equ	0xFDE
  6951                           plusw2	equ	0xFDB
  6952                           fsr2h	equ	0xFDA
  6953                           fsr2l	equ	0xFD9
  6954                           status	equ	0xFD8
  6955                           
  6956 ;; *************** function _INTERRUPT_InterruptManager *****************
  6957 ;; Defined at:
  6958 ;;		line 64 in file "mcc_generated_files/interrupt_manager.c"
  6959 ;; Parameters:    Size  Location     Type
  6960 ;;		None
  6961 ;; Auto vars:     Size  Location     Type
  6962 ;;		None
  6963 ;; Return value:  Size  Location     Type
  6964 ;;                  1    wreg      void 
  6965 ;; Registers used:
  6966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6967 ;; Tracked objects:
  6968 ;;		On entry : 0/0
  6969 ;;		On exit  : 0/0
  6970 ;;		Unchanged: 0/0
  6971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6972 ;;      Params:         0       0       0       0       0       0       0
  6973 ;;      Locals:         0       0       0       0       0       0       0
  6974 ;;      Temps:          0       4       0       0       0       0       0
  6975 ;;      Totals:         0       4       0       0       0       0       0
  6976 ;;Total ram usage:        4 bytes
  6977 ;; Hardware stack levels used:    1
  6978 ;; Hardware stack levels required when called:    4
  6979 ;; This function calls:
  6980 ;;		_EUSART2_GPRS_Transmit_ISR
  6981 ;;		_EUSART2_Receive_ISR
  6982 ;;		_EUSART2_Transmit_ISR
  6983 ;;		_TMR0_ISR
  6984 ;; This function is called by:
  6985 ;;		Interrupt level 2
  6986 ;; This function uses a non-reentrant model
  6987 ;;
  6988                           
  6989                           	psect	intcode
  6990  000008                     __pintcode:
  6991                           	opt stack 0
  6992  000008                     _INTERRUPT_InterruptManager:
  6993                           	opt stack 20
  6994                           
  6995                           ; BSR set to: 0
  6996                           ;incstack = 0
  6997  000008  8201               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6998  00000A  CFFA F0C5          	movff	pclath,??_INTERRUPT_InterruptManager
  6999  00000E  CFFB F0C6          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7000  000012  CFD9 F0C7          	movff	fsr2l,??_INTERRUPT_InterruptManager+2
  7001  000016  CFDA F0C8          	movff	fsr2h,??_INTERRUPT_InterruptManager+3
  7002                           
  7003                           ;interrupt_manager.c: 67: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  7004  00001A  BAF2               	btfsc	intcon,5,c	;volatile
  7005  00001C  A4F2               	btfss	intcon,2,c	;volatile
  7006  00001E  D003               	goto	i2l91
  7007                           
  7008                           ;interrupt_manager.c: 68: {
  7009                           ;interrupt_manager.c: 69: TMR0_ISR();
  7010  000020  ECEB  F009         	call	_TMR0_ISR	;wreg free
  7011                           
  7012                           ;interrupt_manager.c: 70: }
  7013  000024  D014               	goto	i2l99
  7014  000026                     i2l91:
  7015                           
  7016                           ;interrupt_manager.c: 73: else if(INTCONbits.PEIE == 1 && PIE3bits.TX2IE == 1 && PIR3bit
      +                          s.TX2IF == 1)
  7017  000026  BCF2               	btfsc	intcon,6,c	;volatile
  7018  000028  A8A3               	btfss	4003,4,c	;volatile
  7019  00002A  D00B               	goto	i2l93
  7020  00002C  A8A4               	btfss	4004,4,c	;volatile
  7021  00002E  D009               	goto	i2l93
  7022                           
  7023                           ;interrupt_manager.c: 74: {
  7024                           ;interrupt_manager.c: 75: if(usartSemaphore == SFX_OWNER){
  7025  000030  0100               	movlb	0	; () banked
  7026  000032  0592               	decf	_usartSemaphore& (0+255),w,b
  7027  000034  E103               	bnz	i2l3479
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;interrupt_manager.c: 76: EUSART2_Transmit_ISR();
  7031  000036  ECD6  F009         	call	_EUSART2_Transmit_ISR	;wreg free
  7032                           
  7033                           ;interrupt_manager.c: 77: }
  7034  00003A  D009               	goto	i2l99
  7035  00003C                     i2l3479:
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;interrupt_manager.c: 78: else{
  7039                           ;interrupt_manager.c: 79: EUSART2_GPRS_Transmit_ISR();
  7040  00003C  ECAF  F00A         	call	_EUSART2_GPRS_Transmit_ISR	;wreg free
  7041  000040  D006               	goto	i2l99
  7042  000042                     i2l93:
  7043                           
  7044                           ;interrupt_manager.c: 83: else if(INTCONbits.PEIE == 1 && PIE3bits.RC2IE == 1 && PIR3bit
      +                          s.RC2IF == 1)
  7045  000042  BCF2               	btfsc	intcon,6,c	;volatile
  7046  000044  AAA3               	btfss	4003,5,c	;volatile
  7047  000046  D003               	goto	i2l99
  7048  000048  BAA4               	btfsc	4004,5,c	;volatile
  7049                           
  7050                           ;interrupt_manager.c: 84: {
  7051                           ;interrupt_manager.c: 85: EUSART2_Receive_ISR();
  7052  00004A  EC50  F008         	call	_EUSART2_Receive_ISR	;wreg free
  7053  00004E                     i2l99:
  7054  00004E  C0C8  FFDA         	movff	??_INTERRUPT_InterruptManager+3,fsr2h
  7055  000052  C0C7  FFD9         	movff	??_INTERRUPT_InterruptManager+2,fsr2l
  7056  000056  C0C6  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7057  00005A  C0C5  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7058  00005E  9201               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7059  000060  0011               	retfie		f
  7060  000062                     __end_of_INTERRUPT_InterruptManager:
  7061                           	opt stack 0
  7062                           tosu	equ	0xFFF
  7063                           tosh	equ	0xFFE
  7064                           tosl	equ	0xFFD
  7065                           pclatu	equ	0xFFB
  7066                           pclath	equ	0xFFA
  7067                           tblptru	equ	0xFF8
  7068                           tblptrh	equ	0xFF7
  7069                           tblptrl	equ	0xFF6
  7070                           tablat	equ	0xFF5
  7071                           prodh	equ	0xFF4
  7072                           prodl	equ	0xFF3
  7073                           intcon	equ	0xFF2
  7074                           intcon2	equ	0xFF1
  7075                           postinc0	equ	0xFEE
  7076                           wreg	equ	0xFE8
  7077                           indf1	equ	0xFE7
  7078                           postdec1	equ	0xFE5
  7079                           fsr1h	equ	0xFE2
  7080                           fsr1l	equ	0xFE1
  7081                           indf2	equ	0xFDF
  7082                           postinc2	equ	0xFDE
  7083                           plusw2	equ	0xFDB
  7084                           fsr2h	equ	0xFDA
  7085                           fsr2l	equ	0xFD9
  7086                           status	equ	0xFD8
  7087                           
  7088 ;; *************** function _TMR0_ISR *****************
  7089 ;; Defined at:
  7090 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  7091 ;; Parameters:    Size  Location     Type
  7092 ;;		None
  7093 ;; Auto vars:     Size  Location     Type
  7094 ;;		None
  7095 ;; Return value:  Size  Location     Type
  7096 ;;                  1    wreg      void 
  7097 ;; Registers used:
  7098 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  7099 ;; Tracked objects:
  7100 ;;		On entry : 0/0
  7101 ;;		On exit  : 0/0
  7102 ;;		Unchanged: 0/0
  7103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7104 ;;      Params:         0       0       0       0       0       0       0
  7105 ;;      Locals:         0       0       0       0       0       0       0
  7106 ;;      Temps:          0       0       0       0       0       0       0
  7107 ;;      Totals:         0       0       0       0       0       0       0
  7108 ;;Total ram usage:        0 bytes
  7109 ;; Hardware stack levels used:    1
  7110 ;; Hardware stack levels required when called:    3
  7111 ;; This function calls:
  7112 ;;		Absolute function
  7113 ;;		_systemMainTimer
  7114 ;; This function is called by:
  7115 ;;		_INTERRUPT_InterruptManager
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           	psect	text44
  7120  0013D6                     __ptext44:
  7121                           	opt stack 0
  7122  0013D6                     _TMR0_ISR:
  7123                           	opt stack 20
  7124                           
  7125                           ;tmr0.c: 105: INTCONbits.TMR0IF = 0;
  7126                           
  7127                           ;incstack = 0
  7128  0013D6  94F2               	bcf	intcon,2,c	;volatile
  7129                           
  7130                           ;tmr0.c: 109: TMR0H = timer0ReloadVal >> 8;
  7131  0013D8  C0EC  FFD7         	movff	_timer0ReloadVal+1,4055	;volatile
  7132                           
  7133                           ;tmr0.c: 110: TMR0L = (uint8_t) timer0ReloadVal;
  7134  0013DC  C0EB  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  7135                           
  7136                           ;tmr0.c: 112: if(TMR0_InterruptHandler)
  7137  0013E0  0100               	movlb	0	; () banked
  7138  0013E2  51ED               	movf	_TMR0_InterruptHandler& (0+255),w,b
  7139  0013E4  11EE               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  7140  0013E6  B4D8               	btfsc	status,2,c
  7141  0013E8  0012               	return	
  7142                           
  7143                           ; BSR set to: 0
  7144                           ;tmr0.c: 113: {
  7145                           ;tmr0.c: 114: TMR0_InterruptHandler();
  7146  0013EA  0005               	push	
  7147  0013EC  6EFA               	movwf	pclath,c
  7148  0013EE  51ED               	movf	_TMR0_InterruptHandler& (0+255),w,b
  7149  0013F0  6EFD               	movwf	tosl,c
  7150  0013F2  51EE               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  7151  0013F4  6EFE               	movwf	tosh,c
  7152  0013F6  6AFF               	clrf	tosu,c
  7153  0013F8  50FA               	movf	pclath,w,c
  7154  0013FA  0012               	return		;indir
  7155  0013FC                     __end_of_TMR0_ISR:
  7156                           	opt stack 0
  7157                           tosu	equ	0xFFF
  7158                           tosh	equ	0xFFE
  7159                           tosl	equ	0xFFD
  7160                           pclatu	equ	0xFFB
  7161                           pclath	equ	0xFFA
  7162                           tblptru	equ	0xFF8
  7163                           tblptrh	equ	0xFF7
  7164                           tblptrl	equ	0xFF6
  7165                           tablat	equ	0xFF5
  7166                           prodh	equ	0xFF4
  7167                           prodl	equ	0xFF3
  7168                           intcon	equ	0xFF2
  7169                           intcon2	equ	0xFF1
  7170                           postinc0	equ	0xFEE
  7171                           wreg	equ	0xFE8
  7172                           indf1	equ	0xFE7
  7173                           postdec1	equ	0xFE5
  7174                           fsr1h	equ	0xFE2
  7175                           fsr1l	equ	0xFE1
  7176                           indf2	equ	0xFDF
  7177                           postinc2	equ	0xFDE
  7178                           plusw2	equ	0xFDB
  7179                           fsr2h	equ	0xFDA
  7180                           fsr2l	equ	0xFD9
  7181                           status	equ	0xFD8
  7182                           
  7183 ;; *************** function _systemMainTimer *****************
  7184 ;; Defined at:
  7185 ;;		line 22 in file "main.c"
  7186 ;; Parameters:    Size  Location     Type
  7187 ;;		None
  7188 ;; Auto vars:     Size  Location     Type
  7189 ;;  secondMultip    1    0[BANK0 ] unsigned char 
  7190 ;; Return value:  Size  Location     Type
  7191 ;;                  1    wreg      void 
  7192 ;; Registers used:
  7193 ;;		wreg, status,2, status,0, cstack
  7194 ;; Tracked objects:
  7195 ;;		On entry : 3F/0
  7196 ;;		On exit  : 3F/0
  7197 ;;		Unchanged: 0/0
  7198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7199 ;;      Params:         0       0       0       0       0       0       0
  7200 ;;      Locals:         0       1       0       0       0       0       0
  7201 ;;      Temps:          0       0       0       0       0       0       0
  7202 ;;      Totals:         0       1       0       0       0       0       0
  7203 ;;Total ram usage:        1 bytes
  7204 ;; Hardware stack levels used:    1
  7205 ;; Hardware stack levels required when called:    2
  7206 ;; This function calls:
  7207 ;;		_ProtocolTaskTick
  7208 ;; This function is called by:
  7209 ;;		_main
  7210 ;;		_TMR0_ISR
  7211 ;; This function uses a non-reentrant model
  7212 ;;
  7213                           
  7214                           	psect	text45
  7215  001296                     __ptext45:
  7216                           	opt stack 0
  7217  001296                     _systemMainTimer:
  7218                           	opt stack 20
  7219                           
  7220                           ;main.c: 23: bool secondMultiplier;
  7221                           ;main.c: 24: ProtocolTaskTick();
  7222                           
  7223                           ;incstack = 0
  7224  001296  EC62  F007         	call	_ProtocolTaskTick	;wreg free
  7225                           
  7226                           ; BSR set to: 0
  7227                           ;main.c: 25: if(secondMultiplier){
  7228  00129A  51C4               	movf	systemMainTimer@secondMultiplier& (0+255),w,b
  7229  00129C  E006               	bz	i2l2429
  7230                           
  7231                           ; BSR set to: 0
  7232                           ;main.c: 26: if(sessionTO){
  7233  00129E  5176               	movf	_sessionTO& (0+255),w,b
  7234  0012A0  1177               	iorwf	(_sessionTO+1)& (0+255),w,b
  7235  0012A2  E003               	bz	i2l2429
  7236                           
  7237                           ; BSR set to: 0
  7238                           ;main.c: 27: sessionTO--;
  7239  0012A4  0776               	decf	_sessionTO& (0+255),f,b
  7240  0012A6  A0D8               	btfss	status,0,c
  7241  0012A8  0777               	decf	(_sessionTO+1)& (0+255),f,b
  7242  0012AA                     i2l2429:
  7243                           
  7244                           ; BSR set to: 0
  7245                           ;main.c: 28: }
  7246                           ;main.c: 29: }
  7247                           ;main.c: 30: secondMultiplier = !secondMultiplier;
  7248  0012AA  51C4               	movf	systemMainTimer@secondMultiplier& (0+255),w,b
  7249  0012AC  0E01               	movlw	1
  7250  0012AE  A4D8               	btfss	status,2,c
  7251  0012B0  0E00               	movlw	0
  7252  0012B2  6FC4               	movwf	systemMainTimer@secondMultiplier& (0+255),b
  7253                           
  7254                           ; BSR set to: 0
  7255                           ;main.c: 32: if(PORTAbits.RA2 == 0){
  7256  0012B4  B480               	btfsc	3968,2,c	;volatile
  7257  0012B6  D004               	goto	i2l2433
  7258                           
  7259                           ; BSR set to: 0
  7260                           
  7261                           ;main.c: 33: do { LATAbits.LATA2 = 1; } while(0);
  7262  0012B8  8489               	bsf	3977,2,c	;volatile
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;main.c: 34: ledTimer = statusIndTimer;
  7266  0012BA  C085  F084         	movff	_statusIndTimer,_ledTimer
  7267                           
  7268                           ;main.c: 35: }
  7269  0012BE  0012               	return	
  7270  0012C0                     i2l2433:
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;main.c: 36: else{
  7274                           ;main.c: 37: ledTimer--;
  7275  0012C0  0784               	decf	_ledTimer& (0+255),f,b
  7276                           
  7277                           ; BSR set to: 0
  7278                           ;main.c: 38: if(ledTimer == 0){
  7279  0012C2  5184               	movf	_ledTimer& (0+255),w,b
  7280  0012C4  B4D8               	btfsc	status,2,c
  7281                           
  7282                           ; BSR set to: 0
  7283                           
  7284                           ;main.c: 39: do { LATAbits.LATA2 = 0; } while(0);
  7285  0012C6  9489               	bcf	3977,2,c	;volatile
  7286                           
  7287                           ; BSR set to: 0
  7288  0012C8  0012               	return		;funcret
  7289  0012CA                     __end_of_systemMainTimer:
  7290                           	opt stack 0
  7291                           tosu	equ	0xFFF
  7292                           tosh	equ	0xFFE
  7293                           tosl	equ	0xFFD
  7294                           pclatu	equ	0xFFB
  7295                           pclath	equ	0xFFA
  7296                           tblptru	equ	0xFF8
  7297                           tblptrh	equ	0xFF7
  7298                           tblptrl	equ	0xFF6
  7299                           tablat	equ	0xFF5
  7300                           prodh	equ	0xFF4
  7301                           prodl	equ	0xFF3
  7302                           intcon	equ	0xFF2
  7303                           intcon2	equ	0xFF1
  7304                           postinc0	equ	0xFEE
  7305                           wreg	equ	0xFE8
  7306                           indf1	equ	0xFE7
  7307                           postdec1	equ	0xFE5
  7308                           fsr1h	equ	0xFE2
  7309                           fsr1l	equ	0xFE1
  7310                           indf2	equ	0xFDF
  7311                           postinc2	equ	0xFDE
  7312                           plusw2	equ	0xFDB
  7313                           fsr2h	equ	0xFDA
  7314                           fsr2l	equ	0xFD9
  7315                           status	equ	0xFD8
  7316                           
  7317 ;; *************** function _ProtocolTaskTick *****************
  7318 ;; Defined at:
  7319 ;;		line 186 in file "sfxProtocoll.c"
  7320 ;; Parameters:    Size  Location     Type
  7321 ;;		None
  7322 ;; Auto vars:     Size  Location     Type
  7323 ;;		None
  7324 ;; Return value:  Size  Location     Type
  7325 ;;                  1    wreg      void 
  7326 ;; Registers used:
  7327 ;;		wreg, status,2, status,0, cstack
  7328 ;; Tracked objects:
  7329 ;;		On entry : 0/0
  7330 ;;		On exit  : 3F/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7333 ;;      Params:         0       0       0       0       0       0       0
  7334 ;;      Locals:         0       0       0       0       0       0       0
  7335 ;;      Temps:          0       0       0       0       0       0       0
  7336 ;;      Totals:         0       0       0       0       0       0       0
  7337 ;;Total ram usage:        0 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; Hardware stack levels required when called:    1
  7340 ;; This function calls:
  7341 ;;		_SigfoxTaskTick
  7342 ;;		_powerTaskTick
  7343 ;; This function is called by:
  7344 ;;		_systemMainTimer
  7345 ;; This function uses a non-reentrant model
  7346 ;;
  7347                           
  7348                           	psect	text46
  7349  000EC4                     __ptext46:
  7350                           	opt stack 0
  7351  000EC4                     _ProtocolTaskTick:
  7352                           	opt stack 20
  7353                           
  7354                           ;sfxProtocoll.c: 187: static bool _500msToSecond;
  7355                           ;sfxProtocoll.c: 189: _500msToSecond = !_500msToSecond;
  7356                           
  7357                           ; BSR set to: 0
  7358                           ;incstack = 0
  7359  000EC4  0100               	movlb	0	; () banked
  7360  000EC6  5181               	movf	ProtocolTaskTick@_500msToSecond& (0+255),w,b
  7361  000EC8  0E01               	movlw	1
  7362  000ECA  A4D8               	btfss	status,2,c
  7363  000ECC  0E00               	movlw	0
  7364  000ECE  6F81               	movwf	ProtocolTaskTick@_500msToSecond& (0+255),b
  7365                           
  7366                           ;sfxProtocoll.c: 190: if(_500msToSecond){
  7367  000ED0  5181               	movf	ProtocolTaskTick@_500msToSecond& (0+255),w,b
  7368  000ED2  B4D8               	btfsc	status,2,c
  7369  000ED4  0012               	return	
  7370                           
  7371                           ; BSR set to: 0
  7372                           ;sfxProtocoll.c: 191: sysVarGpsDayTime++;
  7373  000ED6  2B68               	incf	_sysVarGpsDayTime& (0+255),f,b
  7374  000ED8  0E00               	movlw	0
  7375  000EDA  2369               	addwfc	(_sysVarGpsDayTime+1)& (0+255),f,b
  7376  000EDC  236A               	addwfc	(_sysVarGpsDayTime+2)& (0+255),f,b
  7377  000EDE  236B               	addwfc	(_sysVarGpsDayTime+3)& (0+255),f,b
  7378                           
  7379                           ;sfxProtocoll.c: 192: if(sysVarGpsDayTime >= 86400){
  7380  000EE0  BF6B               	btfsc	(_sysVarGpsDayTime+3)& (0+255),7,b
  7381  000EE2  D011               	goto	i2l727
  7382  000EE4  516B               	movf	(_sysVarGpsDayTime+3)& (0+255),w,b
  7383  000EE6  E107               	bnz	i2u53_40
  7384  000EE8  0E80               	movlw	128
  7385  000EEA  5D68               	subwf	_sysVarGpsDayTime& (0+255),w,b
  7386  000EEC  0E51               	movlw	81
  7387  000EEE  5969               	subwfb	(_sysVarGpsDayTime+1)& (0+255),w,b
  7388  000EF0  0E01               	movlw	1
  7389  000EF2  596A               	subwfb	(_sysVarGpsDayTime+2)& (0+255),w,b
  7390  000EF4  E308               	bnc	i2l727
  7391  000EF6                     i2u53_40:
  7392                           
  7393                           ; BSR set to: 0
  7394                           ;sfxProtocoll.c: 193: sysVarGpsDayTime -= 86400;
  7395  000EF6  0E80               	movlw	128
  7396  000EF8  2768               	addwf	_sysVarGpsDayTime& (0+255),f,b
  7397  000EFA  0EAE               	movlw	174
  7398  000EFC  2369               	addwfc	(_sysVarGpsDayTime+1)& (0+255),f,b
  7399  000EFE  0EFE               	movlw	254
  7400  000F00  236A               	addwfc	(_sysVarGpsDayTime+2)& (0+255),f,b
  7401  000F02  0EFF               	movlw	255
  7402  000F04  236B               	addwfc	(_sysVarGpsDayTime+3)& (0+255),f,b
  7403  000F06                     i2l727:
  7404                           
  7405                           ; BSR set to: 0
  7406                           ;sfxProtocoll.c: 194: }
  7407                           ;sfxProtocoll.c: 195: if(protVarMeasurementTimer){
  7408  000F06  D816               	call	PL34	;call to abstracted procedure
  7409  000F08  E005               	bz	i2l728
  7410                           
  7411                           ; BSR set to: 0
  7412                           ;sfxProtocoll.c: 196: protVarMeasurementTimer--;
  7413  000F0A  0764               	decf	_protVarMeasurementTimer& (0+255),f,b
  7414  000F0C  0E00               	movlw	0
  7415  000F0E  5B65               	subwfb	(_protVarMeasurementTimer+1)& (0+255),f,b
  7416  000F10  5B66               	subwfb	(_protVarMeasurementTimer+2)& (0+255),f,b
  7417  000F12  5B67               	subwfb	(_protVarMeasurementTimer+3)& (0+255),f,b
  7418  000F14                     i2l728:
  7419                           
  7420                           ; BSR set to: 0
  7421                           ;sfxProtocoll.c: 197: }
  7422                           ;sfxProtocoll.c: 198: if(protVarCommunicationTimer){
  7423  000F14  D80A               	call	PL30	;call to abstracted procedure
  7424  000F16  E005               	bz	i2l2163
  7425                           
  7426                           ; BSR set to: 0
  7427                           ;sfxProtocoll.c: 199: protVarCommunicationTimer--;
  7428  000F18  0760               	decf	_protVarCommunicationTimer& (0+255),f,b
  7429  000F1A  0E00               	movlw	0
  7430  000F1C  5B61               	subwfb	(_protVarCommunicationTimer+1)& (0+255),f,b
  7431  000F1E  5B62               	subwfb	(_protVarCommunicationTimer+2)& (0+255),f,b
  7432  000F20  5B63               	subwfb	(_protVarCommunicationTimer+3)& (0+255),f,b
  7433  000F22                     i2l2163:
  7434                           
  7435                           ; BSR set to: 0
  7436                           ;sfxProtocoll.c: 200: }
  7437                           ;sfxProtocoll.c: 202: powerTaskTick();
  7438  000F22  EC6A  F00A         	call	_powerTaskTick	;wreg free
  7439                           
  7440                           ; BSR set to: 0
  7441                           ;sfxProtocoll.c: 208: SigfoxTaskTick();
  7442  000F26  EF73  F00A         	goto	_SigfoxTaskTick	;wreg free
  7443  000F2A                     __end_of_ProtocolTaskTick:
  7444                           	opt stack 0
  7445  000F2A                     PL30:
  7446                           	opt stack 23
  7447  000F2A  5160               	movf	_protVarCommunicationTimer& (0+255),w,b
  7448  000F2C  1161               	iorwf	(_protVarCommunicationTimer+1)& (0+255),w,b
  7449  000F2E  1162               	iorwf	(_protVarCommunicationTimer+2)& (0+255),w,b
  7450  000F30  1163               	iorwf	(_protVarCommunicationTimer+3)& (0+255),w,b
  7451  000F32  0012               	return	
  7452  000F34                     __end_ofPL30:
  7453                           	opt stack 0
  7454  000F34                     PL34:
  7455                           	opt stack 23
  7456  000F34  5164               	movf	_protVarMeasurementTimer& (0+255),w,b
  7457  000F36  1165               	iorwf	(_protVarMeasurementTimer+1)& (0+255),w,b
  7458  000F38  1166               	iorwf	(_protVarMeasurementTimer+2)& (0+255),w,b
  7459  000F3A  1167               	iorwf	(_protVarMeasurementTimer+3)& (0+255),w,b
  7460  000F3C  0012               	return	
  7461  000F3E                     __end_ofPL34:
  7462                           	opt stack 0
  7463                           tosu	equ	0xFFF
  7464                           tosh	equ	0xFFE
  7465                           tosl	equ	0xFFD
  7466                           pclatu	equ	0xFFB
  7467                           pclath	equ	0xFFA
  7468                           tblptru	equ	0xFF8
  7469                           tblptrh	equ	0xFF7
  7470                           tblptrl	equ	0xFF6
  7471                           tablat	equ	0xFF5
  7472                           prodh	equ	0xFF4
  7473                           prodl	equ	0xFF3
  7474                           intcon	equ	0xFF2
  7475                           intcon2	equ	0xFF1
  7476                           postinc0	equ	0xFEE
  7477                           wreg	equ	0xFE8
  7478                           indf1	equ	0xFE7
  7479                           postdec1	equ	0xFE5
  7480                           fsr1h	equ	0xFE2
  7481                           fsr1l	equ	0xFE1
  7482                           indf2	equ	0xFDF
  7483                           postinc2	equ	0xFDE
  7484                           plusw2	equ	0xFDB
  7485                           fsr2h	equ	0xFDA
  7486                           fsr2l	equ	0xFD9
  7487                           status	equ	0xFD8
  7488                           
  7489 ;; *************** function _powerTaskTick *****************
  7490 ;; Defined at:
  7491 ;;		line 38 in file "powerTask.c"
  7492 ;; Parameters:    Size  Location     Type
  7493 ;;		None
  7494 ;; Auto vars:     Size  Location     Type
  7495 ;;		None
  7496 ;; Return value:  Size  Location     Type
  7497 ;;                  1    wreg      void 
  7498 ;; Registers used:
  7499 ;;		wreg, status,2, status,0
  7500 ;; Tracked objects:
  7501 ;;		On entry : 3F/0
  7502 ;;		On exit  : 3F/0
  7503 ;;		Unchanged: 0/0
  7504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7505 ;;      Params:         0       0       0       0       0       0       0
  7506 ;;      Locals:         0       0       0       0       0       0       0
  7507 ;;      Temps:          0       0       0       0       0       0       0
  7508 ;;      Totals:         0       0       0       0       0       0       0
  7509 ;;Total ram usage:        0 bytes
  7510 ;; Hardware stack levels used:    1
  7511 ;; This function calls:
  7512 ;;		Nothing
  7513 ;; This function is called by:
  7514 ;;		_ProtocolTaskTick
  7515 ;; This function uses a non-reentrant model
  7516 ;;
  7517                           
  7518                           	psect	text47
  7519  0014D4                     __ptext47:
  7520                           	opt stack 0
  7521  0014D4                     _powerTaskTick:
  7522                           	opt stack 20
  7523                           
  7524                           ;powerTask.c: 39: if(powerTaskPwrReadyTimer){
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;incstack = 0
  7528  0014D4  0100               	movlb	0	; () banked
  7529  0014D6  5174               	movf	_powerTaskPwrReadyTimer& (0+255),w,b
  7530  0014D8  1175               	iorwf	(_powerTaskPwrReadyTimer+1)& (0+255),w,b
  7531  0014DA  B4D8               	btfsc	status,2,c
  7532  0014DC  0012               	return	
  7533                           
  7534                           ; BSR set to: 0
  7535                           ;powerTask.c: 40: powerTaskPwrReadyTimer--;
  7536  0014DE  0774               	decf	_powerTaskPwrReadyTimer& (0+255),f,b
  7537  0014E0  A0D8               	btfss	status,0,c
  7538  0014E2  0775               	decf	(_powerTaskPwrReadyTimer+1)& (0+255),f,b
  7539                           
  7540                           ; BSR set to: 0
  7541  0014E4  0012               	return		;funcret
  7542  0014E6                     __end_of_powerTaskTick:
  7543                           	opt stack 0
  7544                           tosu	equ	0xFFF
  7545                           tosh	equ	0xFFE
  7546                           tosl	equ	0xFFD
  7547                           pclatu	equ	0xFFB
  7548                           pclath	equ	0xFFA
  7549                           tblptru	equ	0xFF8
  7550                           tblptrh	equ	0xFF7
  7551                           tblptrl	equ	0xFF6
  7552                           tablat	equ	0xFF5
  7553                           prodh	equ	0xFF4
  7554                           prodl	equ	0xFF3
  7555                           intcon	equ	0xFF2
  7556                           intcon2	equ	0xFF1
  7557                           postinc0	equ	0xFEE
  7558                           wreg	equ	0xFE8
  7559                           indf1	equ	0xFE7
  7560                           postdec1	equ	0xFE5
  7561                           fsr1h	equ	0xFE2
  7562                           fsr1l	equ	0xFE1
  7563                           indf2	equ	0xFDF
  7564                           postinc2	equ	0xFDE
  7565                           plusw2	equ	0xFDB
  7566                           fsr2h	equ	0xFDA
  7567                           fsr2l	equ	0xFD9
  7568                           status	equ	0xFD8
  7569                           
  7570 ;; *************** function _SigfoxTaskTick *****************
  7571 ;; Defined at:
  7572 ;;		line 282 in file "mcc_generated_files/eusart2.c"
  7573 ;; Parameters:    Size  Location     Type
  7574 ;;		None
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;		None
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  1    wreg      void 
  7579 ;; Registers used:
  7580 ;;		wreg, status,2, status,0
  7581 ;; Tracked objects:
  7582 ;;		On entry : 3F/0
  7583 ;;		On exit  : 3F/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7586 ;;      Params:         0       0       0       0       0       0       0
  7587 ;;      Locals:         0       0       0       0       0       0       0
  7588 ;;      Temps:          0       0       0       0       0       0       0
  7589 ;;      Totals:         0       0       0       0       0       0       0
  7590 ;;Total ram usage:        0 bytes
  7591 ;; Hardware stack levels used:    1
  7592 ;; This function calls:
  7593 ;;		Nothing
  7594 ;; This function is called by:
  7595 ;;		_ProtocolTaskTick
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           	psect	text48
  7600  0014E6                     __ptext48:
  7601                           	opt stack 0
  7602  0014E6                     _SigfoxTaskTick:
  7603                           	opt stack 20
  7604                           
  7605                           ;eusart2.c: 283: if(SigfoxTimeOutTimer){
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;incstack = 0
  7609  0014E6  0100               	movlb	0	; () banked
  7610  0014E8  5187               	movf	_SigfoxTimeOutTimer& (0+255),w,b
  7611  0014EA  E001               	bz	i2l1913
  7612                           
  7613                           ; BSR set to: 0
  7614                           ;eusart2.c: 284: SigfoxTimeOutTimer--;
  7615  0014EC  0787               	decf	_SigfoxTimeOutTimer& (0+255),f,b
  7616  0014EE                     i2l1913:
  7617                           
  7618                           ; BSR set to: 0
  7619                           ;eusart2.c: 285: }
  7620                           ;eusart2.c: 286: if(SigfoxTxDelay){
  7621  0014EE  5186               	movf	_SigfoxTxDelay& (0+255),w,b
  7622  0014F0  A4D8               	btfss	status,2,c
  7623                           
  7624                           ; BSR set to: 0
  7625                           ;eusart2.c: 287: SigfoxTxDelay--;
  7626  0014F2  0786               	decf	_SigfoxTxDelay& (0+255),f,b
  7627                           
  7628                           ; BSR set to: 0
  7629  0014F4  0012               	return		;funcret
  7630  0014F6                     __end_of_SigfoxTaskTick:
  7631                           	opt stack 0
  7632                           tosu	equ	0xFFF
  7633                           tosh	equ	0xFFE
  7634                           tosl	equ	0xFFD
  7635                           pclatu	equ	0xFFB
  7636                           pclath	equ	0xFFA
  7637                           tblptru	equ	0xFF8
  7638                           tblptrh	equ	0xFF7
  7639                           tblptrl	equ	0xFF6
  7640                           tablat	equ	0xFF5
  7641                           prodh	equ	0xFF4
  7642                           prodl	equ	0xFF3
  7643                           intcon	equ	0xFF2
  7644                           intcon2	equ	0xFF1
  7645                           postinc0	equ	0xFEE
  7646                           wreg	equ	0xFE8
  7647                           indf1	equ	0xFE7
  7648                           postdec1	equ	0xFE5
  7649                           fsr1h	equ	0xFE2
  7650                           fsr1l	equ	0xFE1
  7651                           indf2	equ	0xFDF
  7652                           postinc2	equ	0xFDE
  7653                           plusw2	equ	0xFDB
  7654                           fsr2h	equ	0xFDA
  7655                           fsr2l	equ	0xFD9
  7656                           status	equ	0xFD8
  7657                           
  7658 ;; *************** function _EUSART2_Transmit_ISR *****************
  7659 ;; Defined at:
  7660 ;;		line 98 in file "mcc_generated_files/eusart2.c"
  7661 ;; Parameters:    Size  Location     Type
  7662 ;;		None
  7663 ;; Auto vars:     Size  Location     Type
  7664 ;;		None
  7665 ;; Return value:  Size  Location     Type
  7666 ;;                  1    wreg      void 
  7667 ;; Registers used:
  7668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7669 ;; Tracked objects:
  7670 ;;		On entry : 3F/0
  7671 ;;		On exit  : 3F/0
  7672 ;;		Unchanged: 0/0
  7673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7674 ;;      Params:         0       0       0       0       0       0       0
  7675 ;;      Locals:         0       0       0       0       0       0       0
  7676 ;;      Temps:          0       0       0       0       0       0       0
  7677 ;;      Totals:         0       0       0       0       0       0       0
  7678 ;;Total ram usage:        0 bytes
  7679 ;; Hardware stack levels used:    1
  7680 ;; Hardware stack levels required when called:    1
  7681 ;; This function calls:
  7682 ;;		_SigfoxReceive
  7683 ;; This function is called by:
  7684 ;;		_INTERRUPT_InterruptManager
  7685 ;; This function uses a non-reentrant model
  7686 ;;
  7687                           
  7688                           	psect	text49
  7689  0013AC                     __ptext49:
  7690                           	opt stack 0
  7691  0013AC                     _EUSART2_Transmit_ISR:
  7692                           	opt stack 22
  7693                           
  7694                           ;eusart2.c: 99: if(SigfoxTXBuffer[SigfoxTXBufferPtr] == 0)
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;incstack = 0
  7698  0013AC  0E95               	movlw	low _SigfoxTXBuffer
  7699  0013AE  0100               	movlb	0	; () banked
  7700  0013B0  D80B               	call	PL22	;call to abstracted procedure
  7701  0013B2  E104               	bnz	i2l3357
  7702                           
  7703                           ; BSR set to: 0
  7704                           ;eusart2.c: 100: {
  7705                           ;eusart2.c: 101: PIE3bits.TX2IE = 0;
  7706  0013B4  98A3               	bcf	4003,4,c	;volatile
  7707                           
  7708                           ; BSR set to: 0
  7709                           ;eusart2.c: 102: SigfoxReceive();
  7710  0013B6  EC60  F00A         	call	_SigfoxReceive	;wreg free
  7711                           
  7712                           ;eusart2.c: 103: }
  7713  0013BA  D004               	goto	i2l3361
  7714  0013BC                     i2l3357:
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;eusart2.c: 104: else
  7718                           ;eusart2.c: 105: {
  7719                           ;eusart2.c: 106: TXREG2 = SigfoxTXBuffer[SigfoxTXBufferPtr];
  7720  0013BC  0E95               	movlw	low _SigfoxTXBuffer
  7721  0013BE  D804               	call	PL22	;call to abstracted procedure
  7722  0013C0  6E73               	movwf	3955,c	;volatile
  7723                           
  7724                           ; BSR set to: 0
  7725                           ;eusart2.c: 107: SigfoxTXBufferPtr++;
  7726  0013C2  2B89               	incf	_SigfoxTXBufferPtr& (0+255),f,b
  7727  0013C4                     i2l3361:
  7728                           
  7729                           ; BSR set to: 0
  7730                           ;eusart2.c: 108: }
  7731                           ;eusart2.c: 109: PIR3bits.TX2IF = 0;
  7732  0013C4  98A4               	bcf	4004,4,c	;volatile
  7733                           
  7734                           ; BSR set to: 0
  7735  0013C6  0012               	return		;funcret
  7736  0013C8                     __end_of_EUSART2_Transmit_ISR:
  7737                           	opt stack 0
  7738  0013C8                     PL22:
  7739                           	opt stack 22
  7740  0013C8  2589               	addwf	_SigfoxTXBufferPtr& (0+255),w,b
  7741  0013CA  6ED9               	movwf	fsr2l,c
  7742  0013CC  6ADA               	clrf	fsr2h,c
  7743  0013CE  0E00               	movlw	high _SigfoxTXBuffer
  7744  0013D0  22DA               	addwfc	fsr2h,f,c
  7745  0013D2  50DF               	movf	indf2,w,c
  7746  0013D4  0012               	return	
  7747  0013D6                     __end_ofPL22:
  7748                           	opt stack 0
  7749                           tosu	equ	0xFFF
  7750                           tosh	equ	0xFFE
  7751                           tosl	equ	0xFFD
  7752                           pclatu	equ	0xFFB
  7753                           pclath	equ	0xFFA
  7754                           tblptru	equ	0xFF8
  7755                           tblptrh	equ	0xFF7
  7756                           tblptrl	equ	0xFF6
  7757                           tablat	equ	0xFF5
  7758                           prodh	equ	0xFF4
  7759                           prodl	equ	0xFF3
  7760                           intcon	equ	0xFF2
  7761                           intcon2	equ	0xFF1
  7762                           postinc0	equ	0xFEE
  7763                           wreg	equ	0xFE8
  7764                           indf1	equ	0xFE7
  7765                           postdec1	equ	0xFE5
  7766                           fsr1h	equ	0xFE2
  7767                           fsr1l	equ	0xFE1
  7768                           indf2	equ	0xFDF
  7769                           postinc2	equ	0xFDE
  7770                           plusw2	equ	0xFDB
  7771                           fsr2h	equ	0xFDA
  7772                           fsr2l	equ	0xFD9
  7773                           status	equ	0xFD8
  7774                           
  7775 ;; *************** function _SigfoxReceive *****************
  7776 ;; Defined at:
  7777 ;;		line 61 in file "mcc_generated_files/eusart2.c"
  7778 ;; Parameters:    Size  Location     Type
  7779 ;;		None
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;		None
  7782 ;; Return value:  Size  Location     Type
  7783 ;;                  1    wreg      void 
  7784 ;; Registers used:
  7785 ;;		None
  7786 ;; Tracked objects:
  7787 ;;		On entry : 3F/0
  7788 ;;		On exit  : 3F/0
  7789 ;;		Unchanged: 0/0
  7790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7791 ;;      Params:         0       0       0       0       0       0       0
  7792 ;;      Locals:         0       0       0       0       0       0       0
  7793 ;;      Temps:          0       0       0       0       0       0       0
  7794 ;;      Totals:         0       0       0       0       0       0       0
  7795 ;;Total ram usage:        0 bytes
  7796 ;; Hardware stack levels used:    1
  7797 ;; This function calls:
  7798 ;;		Nothing
  7799 ;; This function is called by:
  7800 ;;		_EUSART2_Transmit_ISR
  7801 ;; This function uses a non-reentrant model
  7802 ;;
  7803                           
  7804                           	psect	text50
  7805  0014C0                     __ptext50:
  7806                           	opt stack 0
  7807  0014C0                     _SigfoxReceive:
  7808                           	opt stack 22
  7809                           
  7810                           ;eusart2.c: 63: RCSTA2bits.CREN = 0;
  7811                           
  7812                           ; BSR set to: 0
  7813                           ;incstack = 0
  7814  0014C0  9871               	bcf	3953,4,c	;volatile
  7815                           
  7816                           ;eusart2.c: 65: SigfoxRXBufferPtr = 0;
  7817  0014C2  0100               	movlb	0	; () banked
  7818  0014C4  6B88               	clrf	_SigfoxRXBufferPtr& (0+255),b
  7819                           
  7820                           ;eusart2.c: 66: SigfoxRXBuffer[0] = 0;
  7821  0014C6  0101               	movlb	1	; () banked
  7822  0014C8  6B7D               	clrf	_SigfoxRXBuffer& (0+255),b
  7823                           
  7824                           ;eusart2.c: 67: SigfoxMsgReceivedFlag = 0;
  7825  0014CA  0100               	movlb	0	; () banked
  7826  0014CC  6B90               	clrf	_SigfoxMsgReceivedFlag& (0+255),b
  7827                           
  7828                           ;eusart2.c: 69: RCSTA2bits.CREN = 1;
  7829  0014CE  8871               	bsf	3953,4,c	;volatile
  7830                           
  7831                           ;eusart2.c: 70: PIE3bits.RC2IE = 1;
  7832  0014D0  8AA3               	bsf	4003,5,c	;volatile
  7833                           
  7834                           ; BSR set to: 0
  7835  0014D2  0012               	return		;funcret
  7836  0014D4                     __end_of_SigfoxReceive:
  7837                           	opt stack 0
  7838                           tosu	equ	0xFFF
  7839                           tosh	equ	0xFFE
  7840                           tosl	equ	0xFFD
  7841                           pclatu	equ	0xFFB
  7842                           pclath	equ	0xFFA
  7843                           tblptru	equ	0xFF8
  7844                           tblptrh	equ	0xFF7
  7845                           tblptrl	equ	0xFF6
  7846                           tablat	equ	0xFF5
  7847                           prodh	equ	0xFF4
  7848                           prodl	equ	0xFF3
  7849                           intcon	equ	0xFF2
  7850                           intcon2	equ	0xFF1
  7851                           postinc0	equ	0xFEE
  7852                           wreg	equ	0xFE8
  7853                           indf1	equ	0xFE7
  7854                           postdec1	equ	0xFE5
  7855                           fsr1h	equ	0xFE2
  7856                           fsr1l	equ	0xFE1
  7857                           indf2	equ	0xFDF
  7858                           postinc2	equ	0xFDE
  7859                           plusw2	equ	0xFDB
  7860                           fsr2h	equ	0xFDA
  7861                           fsr2l	equ	0xFD9
  7862                           status	equ	0xFD8
  7863                           
  7864 ;; *************** function _EUSART2_Receive_ISR *****************
  7865 ;; Defined at:
  7866 ;;		line 120 in file "mcc_generated_files/eusart2.c"
  7867 ;; Parameters:    Size  Location     Type
  7868 ;;		None
  7869 ;; Auto vars:     Size  Location     Type
  7870 ;;  auxVar          1    0[BANK0 ] unsigned char 
  7871 ;; Return value:  Size  Location     Type
  7872 ;;                  1    wreg      void 
  7873 ;; Registers used:
  7874 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7875 ;; Tracked objects:
  7876 ;;		On entry : 0/0
  7877 ;;		On exit  : 3F/0
  7878 ;;		Unchanged: 0/0
  7879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7880 ;;      Params:         0       0       0       0       0       0       0
  7881 ;;      Locals:         0       1       0       0       0       0       0
  7882 ;;      Temps:          0       0       0       0       0       0       0
  7883 ;;      Totals:         0       1       0       0       0       0       0
  7884 ;;Total ram usage:        1 bytes
  7885 ;; Hardware stack levels used:    1
  7886 ;; This function calls:
  7887 ;;		Nothing
  7888 ;; This function is called by:
  7889 ;;		_INTERRUPT_InterruptManager
  7890 ;; This function uses a non-reentrant model
  7891 ;;
  7892                           
  7893                           	psect	text51
  7894  0010A0                     __ptext51:
  7895                           	opt stack 0
  7896  0010A0                     _EUSART2_Receive_ISR:
  7897                           	opt stack 23
  7898                           
  7899                           ;eusart2.c: 121: uint8_t auxVar;
  7900                           ;eusart2.c: 123: auxVar = RCREG2;
  7901                           
  7902                           ; BSR set to: 0
  7903                           ;incstack = 0
  7904  0010A0  CF74 F0C4          	movff	3956,EUSART2_Receive_ISR@auxVar	;volatile
  7905                           
  7906                           ;eusart2.c: 124: PIR3bits.RC2IF = 0;
  7907  0010A4  9AA4               	bcf	4004,5,c	;volatile
  7908                           
  7909                           ;eusart2.c: 125: if(1 == RCSTA2bits.OERR)
  7910  0010A6  A271               	btfss	3953,1,c	;volatile
  7911  0010A8  D005               	goto	i2l3367
  7912                           
  7913                           ;eusart2.c: 126: {
  7914                           ;eusart2.c: 127: RCSTA2bits.CREN = 0;
  7915  0010AA  9871               	bcf	3953,4,c	;volatile
  7916                           
  7917                           ;eusart2.c: 128: RCSTA2bits.CREN = 1;
  7918  0010AC  8871               	bsf	3953,4,c	;volatile
  7919                           
  7920                           ;eusart2.c: 129: SigfoxRXBufferPtr = 0;
  7921  0010AE  0100               	movlb	0	; () banked
  7922  0010B0  6B88               	clrf	_SigfoxRXBufferPtr& (0+255),b
  7923                           
  7924                           ;eusart2.c: 130: auxVar = 0;
  7925  0010B2  6BC4               	clrf	EUSART2_Receive_ISR@auxVar& (0+255),b
  7926  0010B4                     i2l3367:
  7927                           
  7928                           ;eusart2.c: 131: }
  7929                           ;eusart2.c: 132: if(SigfoxRXBufferPtr >= (22-1))
  7930  0010B4  0E14               	movlw	20
  7931  0010B6  0100               	movlb	0	; () banked
  7932  0010B8  6588               	cpfsgt	_SigfoxRXBufferPtr& (0+255),b
  7933  0010BA  D001               	goto	i2l3371
  7934                           
  7935                           ; BSR set to: 0
  7936                           ;eusart2.c: 133: {
  7937                           ;eusart2.c: 134: SigfoxRXBufferPtr = 0;
  7938  0010BC  6B88               	clrf	_SigfoxRXBufferPtr& (0+255),b
  7939  0010BE                     i2l3371:
  7940                           
  7941                           ; BSR set to: 0
  7942                           ;eusart2.c: 135: }
  7943                           ;eusart2.c: 137: if((auxVar == 0x0d)&&(SigfoxRXBufferPtr > 0)){
  7944  0010BE  0E0D               	movlw	13
  7945  0010C0  19C4               	xorwf	EUSART2_Receive_ISR@auxVar& (0+255),w,b
  7946  0010C2  E105               	bnz	i2l3379
  7947                           
  7948                           ; BSR set to: 0
  7949  0010C4  5188               	movf	_SigfoxRXBufferPtr& (0+255),w,b
  7950  0010C6  E003               	bz	i2l3379
  7951                           
  7952                           ; BSR set to: 0
  7953                           ;eusart2.c: 138: SigfoxMsgReceivedFlag = 1;
  7954  0010C8  0E01               	movlw	1
  7955  0010CA  6F90               	movwf	_SigfoxMsgReceivedFlag& (0+255),b
  7956                           
  7957                           ; BSR set to: 0
  7958                           ;eusart2.c: 139: PIE3bits.RC2IE = 0;
  7959  0010CC  9AA3               	bcf	4003,5,c	;volatile
  7960  0010CE                     i2l3379:
  7961                           
  7962                           ; BSR set to: 0
  7963                           ;eusart2.c: 140: }
  7964                           ;eusart2.c: 141: SigfoxRXBuffer[SigfoxRXBufferPtr++] = auxVar;
  7965  0010CE  D806               	call	PL18	;call to abstracted procedure
  7966  0010D0  C0C4  FFDF         	movff	EUSART2_Receive_ISR@auxVar,indf2
  7967                           
  7968                           ; BSR set to: 0
  7969  0010D4  2B88               	incf	_SigfoxRXBufferPtr& (0+255),f,b
  7970                           
  7971                           ; BSR set to: 0
  7972                           ;eusart2.c: 142: SigfoxRXBuffer[SigfoxRXBufferPtr] = 0;
  7973  0010D6  D802               	call	PL18	;call to abstracted procedure
  7974  0010D8  6ADF               	clrf	indf2,c
  7975                           
  7976                           ; BSR set to: 0
  7977  0010DA  0C00               	retlw	0	;funcret
  7978  0010DC                     __end_of_EUSART2_Receive_ISR:
  7979                           	opt stack 0
  7980  0010DC                     PL18:
  7981                           	opt stack 23
  7982  0010DC  0E7D               	movlw	low _SigfoxRXBuffer
  7983  0010DE  2588               	addwf	_SigfoxRXBufferPtr& (0+255),w,b
  7984  0010E0  6ED9               	movwf	fsr2l,c
  7985  0010E2  6ADA               	clrf	fsr2h,c
  7986  0010E4  0E01               	movlw	high _SigfoxRXBuffer
  7987  0010E6  22DA               	addwfc	fsr2h,f,c
  7988  0010E8  0012               	return	
  7989  0010EA                     __end_ofPL18:
  7990                           	opt stack 0
  7991                           tosu	equ	0xFFF
  7992                           tosh	equ	0xFFE
  7993                           tosl	equ	0xFFD
  7994                           pclatu	equ	0xFFB
  7995                           pclath	equ	0xFFA
  7996                           tblptru	equ	0xFF8
  7997                           tblptrh	equ	0xFF7
  7998                           tblptrl	equ	0xFF6
  7999                           tablat	equ	0xFF5
  8000                           prodh	equ	0xFF4
  8001                           prodl	equ	0xFF3
  8002                           intcon	equ	0xFF2
  8003                           intcon2	equ	0xFF1
  8004                           postinc0	equ	0xFEE
  8005                           wreg	equ	0xFE8
  8006                           indf1	equ	0xFE7
  8007                           postdec1	equ	0xFE5
  8008                           fsr1h	equ	0xFE2
  8009                           fsr1l	equ	0xFE1
  8010                           indf2	equ	0xFDF
  8011                           postinc2	equ	0xFDE
  8012                           plusw2	equ	0xFDB
  8013                           fsr2h	equ	0xFDA
  8014                           fsr2l	equ	0xFD9
  8015                           status	equ	0xFD8
  8016                           
  8017 ;; *************** function _EUSART2_GPRS_Transmit_ISR *****************
  8018 ;; Defined at:
  8019 ;;		line 71 in file "gprs.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;		None
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;		None
  8024 ;; Return value:  Size  Location     Type
  8025 ;;                  1    wreg      void 
  8026 ;; Registers used:
  8027 ;;		None
  8028 ;; Tracked objects:
  8029 ;;		On entry : 3F/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8033 ;;      Params:         0       0       0       0       0       0       0
  8034 ;;      Locals:         0       0       0       0       0       0       0
  8035 ;;      Temps:          0       0       0       0       0       0       0
  8036 ;;      Totals:         0       0       0       0       0       0       0
  8037 ;;Total ram usage:        0 bytes
  8038 ;; Hardware stack levels used:    1
  8039 ;; This function calls:
  8040 ;;		Nothing
  8041 ;; This function is called by:
  8042 ;;		_INTERRUPT_InterruptManager
  8043 ;; This function uses a non-reentrant model
  8044 ;;
  8045                           
  8046                           	psect	text52
  8047  00155E                     __ptext52:
  8048                           	opt stack 0
  8049  00155E                     _EUSART2_GPRS_Transmit_ISR:
  8050                           	opt stack 23
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;incstack = 0
  8054  00155E  0012               	return		;funcret
  8055  001560                     __end_of_EUSART2_GPRS_Transmit_ISR:
  8056                           	opt stack 0
  8057                           tosu	equ	0xFFF
  8058                           tosh	equ	0xFFE
  8059                           tosl	equ	0xFFD
  8060                           pclatu	equ	0xFFB
  8061                           pclath	equ	0xFFA
  8062                           tblptru	equ	0xFF8
  8063                           tblptrh	equ	0xFF7
  8064                           tblptrl	equ	0xFF6
  8065                           tablat	equ	0xFF5
  8066                           prodh	equ	0xFF4
  8067                           prodl	equ	0xFF3
  8068                           intcon	equ	0xFF2
  8069                           intcon2	equ	0xFF1
  8070                           postinc0	equ	0xFEE
  8071                           wreg	equ	0xFE8
  8072                           indf1	equ	0xFE7
  8073                           postdec1	equ	0xFE5
  8074                           fsr1h	equ	0xFE2
  8075                           fsr1l	equ	0xFE1
  8076                           indf2	equ	0xFDF
  8077                           postinc2	equ	0xFDE
  8078                           plusw2	equ	0xFDB
  8079                           fsr2h	equ	0xFDA
  8080                           fsr2l	equ	0xFD9
  8081                           status	equ	0xFD8
  8082                           tosu	equ	0xFFF
  8083                           tosh	equ	0xFFE
  8084                           tosl	equ	0xFFD
  8085                           pclatu	equ	0xFFB
  8086                           pclath	equ	0xFFA
  8087                           tblptru	equ	0xFF8
  8088                           tblptrh	equ	0xFF7
  8089                           tblptrl	equ	0xFF6
  8090                           tablat	equ	0xFF5
  8091                           prodh	equ	0xFF4
  8092                           prodl	equ	0xFF3
  8093                           intcon	equ	0xFF2
  8094                           intcon2	equ	0xFF1
  8095                           postinc0	equ	0xFEE
  8096                           wreg	equ	0xFE8
  8097                           indf1	equ	0xFE7
  8098                           postdec1	equ	0xFE5
  8099                           fsr1h	equ	0xFE2
  8100                           fsr1l	equ	0xFE1
  8101                           indf2	equ	0xFDF
  8102                           postinc2	equ	0xFDE
  8103                           plusw2	equ	0xFDB
  8104                           fsr2h	equ	0xFDA
  8105                           fsr2l	equ	0xFD9
  8106                           status	equ	0xFD8
  8107                           
  8108                           	psect	text53
  8109  000000                     __ptext53:
  8110                           	opt stack 0
  8111                           tosu	equ	0xFFF
  8112                           tosh	equ	0xFFE
  8113                           tosl	equ	0xFFD
  8114                           pclatu	equ	0xFFB
  8115                           pclath	equ	0xFFA
  8116                           tblptru	equ	0xFF8
  8117                           tblptrh	equ	0xFF7
  8118                           tblptrl	equ	0xFF6
  8119                           tablat	equ	0xFF5
  8120                           prodh	equ	0xFF4
  8121                           prodl	equ	0xFF3
  8122                           intcon	equ	0xFF2
  8123                           intcon2	equ	0xFF1
  8124                           postinc0	equ	0xFEE
  8125                           wreg	equ	0xFE8
  8126                           indf1	equ	0xFE7
  8127                           postdec1	equ	0xFE5
  8128                           fsr1h	equ	0xFE2
  8129                           fsr1l	equ	0xFE1
  8130                           indf2	equ	0xFDF
  8131                           postinc2	equ	0xFDE
  8132                           plusw2	equ	0xFDB
  8133                           fsr2h	equ	0xFDA
  8134                           fsr2l	equ	0xFD9
  8135                           status	equ	0xFD8
  8136                           
  8137                           	psect	param0
  8138  0000                     tosu	equ	0xFFF
  8139                           tosh	equ	0xFFE
  8140                           tosl	equ	0xFFD
  8141                           pclatu	equ	0xFFB
  8142                           pclath	equ	0xFFA
  8143                           tblptru	equ	0xFF8
  8144                           tblptrh	equ	0xFF7
  8145                           tblptrl	equ	0xFF6
  8146                           tablat	equ	0xFF5
  8147                           prodh	equ	0xFF4
  8148                           prodl	equ	0xFF3
  8149                           intcon	equ	0xFF2
  8150                           intcon2	equ	0xFF1
  8151                           postinc0	equ	0xFEE
  8152                           wreg	equ	0xFE8
  8153                           indf1	equ	0xFE7
  8154                           postdec1	equ	0xFE5
  8155                           fsr1h	equ	0xFE2
  8156                           fsr1l	equ	0xFE1
  8157                           indf2	equ	0xFDF
  8158                           postinc2	equ	0xFDE
  8159                           plusw2	equ	0xFDB
  8160                           fsr2h	equ	0xFDA
  8161                           fsr2l	equ	0xFD9
  8162                           status	equ	0xFD8
  8163                           
  8164                           	psect	temp
  8165  000001                     btemp:
  8166                           	opt stack 0
  8167  000001                     	ds	1
  8168  0000                     int$flags	set	btemp
  8169                           tosu	equ	0xFFF
  8170                           tosh	equ	0xFFE
  8171                           tosl	equ	0xFFD
  8172                           pclatu	equ	0xFFB
  8173                           pclath	equ	0xFFA
  8174                           tblptru	equ	0xFF8
  8175                           tblptrh	equ	0xFF7
  8176                           tblptrl	equ	0xFF6
  8177                           tablat	equ	0xFF5
  8178                           prodh	equ	0xFF4
  8179                           prodl	equ	0xFF3
  8180                           intcon	equ	0xFF2
  8181                           intcon2	equ	0xFF1
  8182                           postinc0	equ	0xFEE
  8183                           wreg	equ	0xFE8
  8184                           indf1	equ	0xFE7
  8185                           postdec1	equ	0xFE5
  8186                           fsr1h	equ	0xFE2
  8187                           fsr1l	equ	0xFE1
  8188                           indf2	equ	0xFDF
  8189                           postinc2	equ	0xFDE
  8190                           plusw2	equ	0xFDB
  8191                           fsr2h	equ	0xFDA
  8192                           fsr2l	equ	0xFD9
  8193                           status	equ	0xFD8
  8194                           tosu	equ	0xFFF
  8195                           tosh	equ	0xFFE
  8196                           tosl	equ	0xFFD
  8197                           pclatu	equ	0xFFB
  8198                           pclath	equ	0xFFA
  8199                           tblptru	equ	0xFF8
  8200                           tblptrh	equ	0xFF7
  8201                           tblptrl	equ	0xFF6
  8202                           tablat	equ	0xFF5
  8203                           prodh	equ	0xFF4
  8204                           prodl	equ	0xFF3
  8205                           intcon	equ	0xFF2
  8206                           intcon2	equ	0xFF1
  8207                           postinc0	equ	0xFEE
  8208                           wreg	equ	0xFE8
  8209                           indf1	equ	0xFE7
  8210                           postdec1	equ	0xFE5
  8211                           fsr1h	equ	0xFE2
  8212                           fsr1l	equ	0xFE1
  8213                           indf2	equ	0xFDF
  8214                           postinc2	equ	0xFDE
  8215                           plusw2	equ	0xFDB
  8216                           fsr2h	equ	0xFDA
  8217                           fsr2l	equ	0xFD9
  8218                           status	equ	0xFD8
  8219                           tosu	equ	0xFFF
  8220                           tosh	equ	0xFFE
  8221                           tosl	equ	0xFFD
  8222                           pclatu	equ	0xFFB
  8223                           pclath	equ	0xFFA
  8224                           tblptru	equ	0xFF8
  8225                           tblptrh	equ	0xFF7
  8226                           tblptrl	equ	0xFF6
  8227                           tablat	equ	0xFF5
  8228                           prodh	equ	0xFF4
  8229                           prodl	equ	0xFF3
  8230                           intcon	equ	0xFF2
  8231                           intcon2	equ	0xFF1
  8232                           postinc0	equ	0xFEE
  8233                           wreg	equ	0xFE8
  8234                           indf1	equ	0xFE7
  8235                           postdec1	equ	0xFE5
  8236                           fsr1h	equ	0xFE2
  8237                           fsr1l	equ	0xFE1
  8238                           indf2	equ	0xFDF
  8239                           postinc2	equ	0xFDE
  8240                           plusw2	equ	0xFDB
  8241                           fsr2h	equ	0xFDA
  8242                           fsr2l	equ	0xFD9
  8243                           status	equ	0xFD8
  8244                           tosu	equ	0xFFF
  8245                           tosh	equ	0xFFE
  8246                           tosl	equ	0xFFD
  8247                           pclatu	equ	0xFFB
  8248                           pclath	equ	0xFFA
  8249                           tblptru	equ	0xFF8
  8250                           tblptrh	equ	0xFF7
  8251                           tblptrl	equ	0xFF6
  8252                           tablat	equ	0xFF5
  8253                           prodh	equ	0xFF4
  8254                           prodl	equ	0xFF3
  8255                           intcon	equ	0xFF2
  8256                           intcon2	equ	0xFF1
  8257                           postinc0	equ	0xFEE
  8258                           wreg	equ	0xFE8
  8259                           indf1	equ	0xFE7
  8260                           postdec1	equ	0xFE5
  8261                           fsr1h	equ	0xFE2
  8262                           fsr1l	equ	0xFE1
  8263                           indf2	equ	0xFDF
  8264                           postinc2	equ	0xFDE
  8265                           plusw2	equ	0xFDB
  8266                           fsr2h	equ	0xFDA
  8267                           fsr2l	equ	0xFD9
  8268                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    82
    Data        4
    BSS         247
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94      0       0
    BANK0           160     39     148
    BANK1           256      0     147
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    gpsParsePtr	 PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), gprsRxBuffer(BANK1[100]), SigfoxRXBuffer(BANK1[22]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), gprsRxBuffer(BANK1[100]), SigfoxRXBuffer(BANK1[22]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), gprsRxBuffer(BANK1[100]), SigfoxRXBuffer(BANK1[22]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), gprsRxBuffer(BANK1[100]), SigfoxRXBuffer(BANK1[22]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 60
		 -> SigfoxCommandsDefinitions(CODE[60]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 35
		 -> SigfoxTXBuffer(BANK0[35]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 35
		 -> SigfoxTXBuffer(BANK0[35]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 25
		 -> SigfoxPayloadBuffer(BANK1[25]), SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR(BANK0[4]), SigfoxCommandSelector@SFX_COMMAND_TAIL_STR(BANK0[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 35
		 -> SigfoxTXBuffer(BANK0[35]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 35
		 -> SigfoxTXBuffer(BANK0[35]), 

    ProtocolTaskExecute@taskPointer	PTR FTN()enum E6679 size(2) Largest target is 1
		 -> powerTask(), SigfoxTask(), 

    ProtocolTaskBuildFrame@protFrameDescPtr	PTR const unsigned char  size(2) Largest target is 8
		 -> SIT_FRAME_POWERUP_SF_DESC(CODE[5]), SIT_FRAME_TRACKER_SF_ID_DESC(CODE[8]), 

    SigfoxTaskLoadPayloadBuffer@rawData	PTR unsigned char  size(2) Largest target is 12
		 -> protDataShifter(BANK0[12]), 

    SigfoxTask@SigfoxInitCommandPtr	PTR const unsigned char  size(2) Largest target is 3
		 -> SigfoxTask@sigfoxInitCommandsROMList(BANK0[3]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 35
		 -> SigfoxTXBuffer(BANK0[35]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 35
		 -> SigfoxTXBuffer(BANK0[35]), 

    SigfoxCommandSelector@SigfoxRomCommandStrPtr	PTR const unsigned char  size(2) Largest target is 60
		 -> SigfoxCommandsDefinitions(CODE[60]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), gprsRxBuffer(BANK1[100]), SigfoxRXBuffer(BANK1[22]), 

    SigfoxResponseParser@dumyPtr	PTR unsigned char  size(2) Largest target is 100
		 -> NULL(NULL[0]), gprsRxBuffer(BANK1[100]), SigfoxRXBuffer(BANK1[22]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> systemMainTimer(), 

    TMR0_InterruptHandler	 PTR FTN()void  size(2) Largest target is 1
		 -> systemMainTimer(), Absolute function(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    _SYSTEM_Initialize->_TMR0_Initialize
    _ProtocolTask->_ProtocolTaskBuildFrame
    _ProtocolTaskExecute->_SigfoxTask
    _SigfoxTask->_SigfoxResponseParser
    _SigfoxResponseParser->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _SigfoxCommManager->_SigfoxCommandSelector
    _SigfoxCommandSelector->_strcat
    _SigfoxCommandSelector->_strcpy
    _ProtocolTaskBuildFrame->_ProtocolAddFrameData
    _ProtocolGetValidity->_gpsTaskGetVarValidity
    _ProtocolGetValidity->_powerTaskGetVarValidity
    _ProtocolSetNextMeasTime->___almod
    _ProtocolSetNextCommTime->___almod

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_EUSART2_Receive_ISR
    _TMR0_ISR->_systemMainTimer

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    7249
                                             38 BANK0      1     1      0
                       _ProtocolTask
              _ProtocolTaskPowerDown
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                       _setLedStatus
 ---------------------------------------------------------------------------------
 (1) _setLedStatus                                         1     1      0      45
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2      98
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                              5 BANK0      2     2      0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ProtocolTask                                         0     0      0    7083
            _ProtocolSetNextCommTime
            _ProtocolSetNextMeasTime
             _ProtocolTaskBuildFrame
                _ProtocolTaskExecute
              _ProtocolTaskPowerDown
                  _SigfoxTaskNewTask
                   _powerTaskNewTask
 ---------------------------------------------------------------------------------
 (2) _powerTaskNewTask                                     1     1      0      15
                                              5 BANK0      1     1      0
                 _powerTaskPowerDown
 ---------------------------------------------------------------------------------
 (2) _SigfoxTaskNewTask                                    1     1      0      15
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProtocolTaskPowerDown                                0     0      0       0
                _SigfoxTaskPowerDown
                 _powerTaskPowerDown
 ---------------------------------------------------------------------------------
 (2) _ProtocolTaskExecute                                  7     3      4    3183
                                             28 BANK0      7     3      4
                         _SigfoxTask *
                          _powerTask *
 ---------------------------------------------------------------------------------
 (3) _powerTask                                            0     0      0       0
                 _powerTaskPowerDown
                     _powerTaskReset
 ---------------------------------------------------------------------------------
 (4) _powerTaskReset                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _powerTaskPowerDown                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _SigfoxTask                                           6     6      0    2615
                                             22 BANK0      6     6      0
                  _SigfoxCommManager
               _SigfoxResponseParser
                _SigfoxTaskPowerDown
                    _SigfoxTaskReset
 ---------------------------------------------------------------------------------
 (4) _SigfoxTaskReset                                      0     0      0       0
                 _EUSART2_Initialize
 ---------------------------------------------------------------------------------
 (5) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SigfoxTaskPowerDown                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SigfoxResponseParser                                 2     2      0    1224
                                             20 BANK0      2     2      0
                             _strstr
 ---------------------------------------------------------------------------------
 (5) _strstr                                               4     0      4    1223
                                             16 BANK0      4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (6) _strncmp                                              7     1      6     362
                                              9 BANK0      7     1      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              5 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (6) _strchr                                               5     1      4     240
                                              5 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (4) _SigfoxCommManager                                    1     1      0    1320
                                             20 BANK0      1     1      0
              _SigfoxCommandSelector
                      _SigfoxTXReady
                     _SigfoxTransmit
      _SigfoxVerifyTransactionStatus
 ---------------------------------------------------------------------------------
 (5) _SigfoxVerifyTransactionStatus                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SigfoxTransmit                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SigfoxTXReady                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SigfoxCommandSelector                                9     9      0    1298
                                             11 BANK0      9     9      0
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               6     2      4     547
                                              5 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) _strcat                                               6     2      4     570
                                              5 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ProtocolTaskBuildFrame                              12    12      0    2062
                                             26 BANK0     12    12      0
               _ProtocolAddFrameData
                _ProtocolGetValidity
        _SigfoxTaskLoadPayloadBuffer
 ---------------------------------------------------------------------------------
 (3) _SigfoxTaskLoadPayloadBuffer                         10     8      2     436
                                              5 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (3) _ProtocolGetValidity                                  2     2      0     120
                                              6 BANK0      2     2      0
              _gpsTaskGetVarValidity
            _powerTaskGetVarValidity
 ---------------------------------------------------------------------------------
 (4) _powerTaskGetVarValidity                              1     1      0      15
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _gpsTaskGetVarValidity                                1     1      0      15
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ProtocolAddFrameData                                21    16      5    1218
                                              5 BANK0     21    16      5
 ---------------------------------------------------------------------------------
 (2) _ProtocolSetNextMeasTime                              0     0      0     904
                            ___almod
 ---------------------------------------------------------------------------------
 (2) _ProtocolSetNextCommTime                              0     0      0     904
                            ___almod
 ---------------------------------------------------------------------------------
 (3) ___almod                                             10     2      8     904
                                              5 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           4     4      0      76
                                              1 BANK0      4     4      0
          _EUSART2_GPRS_Transmit_ISR
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0      30
                   Absolute function *
                    _systemMainTimer *
 ---------------------------------------------------------------------------------
 (9) _systemMainTimer                                      1     1      0      30
                                              0 BANK0      1     1      0
                   _ProtocolTaskTick
 ---------------------------------------------------------------------------------
 (10) _ProtocolTaskTick                                    0     0      0       0
                     _SigfoxTaskTick
                      _powerTaskTick
 ---------------------------------------------------------------------------------
 (11) _powerTaskTick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _SigfoxTaskTick                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART2_Transmit_ISR                                 0     0      0       0
                      _SigfoxReceive
 ---------------------------------------------------------------------------------
 (9) _SigfoxReceive                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART2_Receive_ISR                                  1     1      0      46
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART2_GPRS_Transmit_ISR                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ProtocolTask
     _ProtocolSetNextCommTime
       ___almod
     _ProtocolSetNextMeasTime
       ___almod
     _ProtocolTaskBuildFrame
       _ProtocolAddFrameData
       _ProtocolGetValidity
         _gpsTaskGetVarValidity
         _powerTaskGetVarValidity
       _SigfoxTaskLoadPayloadBuffer
     _ProtocolTaskExecute
       _SigfoxTask *
         _SigfoxCommManager
           _SigfoxCommandSelector
             _strcat
             _strcpy
           _SigfoxTXReady
           _SigfoxTransmit
           _SigfoxVerifyTransactionStatus
         _SigfoxResponseParser
           _strstr
             _strchr
             _strlen
             _strncmp
               _strlen (ARG)
         _SigfoxTaskPowerDown
         _SigfoxTaskReset
           _EUSART2_Initialize
       _powerTask *
         _powerTaskPowerDown
         _powerTaskReset
     _ProtocolTaskPowerDown
       _SigfoxTaskPowerDown
       _powerTaskPowerDown
     _SigfoxTaskNewTask
     _powerTaskNewTask
       _powerTaskPowerDown
   _ProtocolTaskPowerDown
     _SigfoxTaskPowerDown
     _powerTaskPowerDown
   _SYSTEM_Initialize
     _ADC_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _TMR0_SetInterruptHandler
   _setLedStatus

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART2_GPRS_Transmit_ISR
   _EUSART2_Receive_ISR
   _EUSART2_Transmit_ISR
     _SigfoxReceive
   _TMR0_ISR
     Absolute function(Fake) *
     _systemMainTimer *
       _ProtocolTaskTick
         _SigfoxTaskTick
         _powerTaskTick

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      93       6       57.4%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     27      94       4       92.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      0       0       1        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     127       9        0.0%
DATA                 0      0     127      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Aug 21 10:15:08 2017

                                           PL2 0E0E                                             PL4 0A32  
                                           PL6 0B16                                             PL8 1248  
                        ??_ProtocolTaskExecute 00E4                                 ?_powerTaskTick 00C4  
                              _timer0ReloadVal 00EB                                   __CFG_CP0$OFF 000000  
                                 __CFG_CP1$OFF 000000                             setLedStatus@status 00C9  
                                          PL10 0E2E                                            PL20 0A40  
                                          PL12 07CC                                            PL30 0F2A  
                                          PL22 13C8                                            PL14 0DB8  
                                          PL40 091E                                            PL32 0B28  
                                          PL24 07DC                                            PL16 0BEA  
                                          PL42 11AE                                            PL34 0F34  
                                          PL26 07E6                                            PL18 10DC  
                                          PL36 0BFA                                            PL28 0914  
                                          PL45 0FF0                                            PL38 11A8  
                                          PL47 0C8A                                            PL49 131E  
                                          l300 1042                                            l600 0F9C  
                                          l380 10F6                                            l365 0DB2  
                                          l381 1100                                            l382 110A  
                                          l714 06F4                                            l715 070A  
                                          l831 0CC6                                            l584 11E2  
                                          l682 0932                                            l862 1186  
                                          l687 0968                                            l858 1182  
                                 __CFG_CPB$OFF 000000                                   __CFG_CPD$OFF 000000  
                            ??_SigfoxTaskReset 00C9                                            prod 000FF3  
                                          tosl 000FFD                                            wreg 000FE8  
                              ?_powerTaskReset 00C4                           _ProtocolAddFrameData 0924  
                 ProtocolAddFrameData@longMask 00D8                          ?_SigfoxResponseParser 00C4  
                                 __CFG_LVP$OFF 000000             __end_ofSigfoxCommandSelector@F6860 060A  
                   SigfoxCommandSelector@F6860 0608             __end_ofSigfoxCommandSelector@F6862 0605  
                   SigfoxCommandSelector@F6862 0601                      __size_of_ProtocolTaskTick 0066  
                                         l3011 0890                                           l2301 0CF0  
                                         l3005 0884                                           l3103 0D8E  
                                         l2311 0CFC                                           l3031 08A8  
                                         l3201 0C72                                           l3115 0934  
                                         l2251 0C9E                                           l3035 08B4  
                                         l3019 089C                                           l2403 10F0  
                                         l3205 0C78                                           l3125 0952  
                                         l1621 0EBE                                           l2325 0D18  
                                         l2317 0D10                                           l2333 0D1E  
                                         l3231 0E02                                           l3151 0996  
                                         l3135 096A                                           l3119 093C  
                                         l2183 13AA                                           l2175 1398  
                                         l3303 0744                                           l3311 0776  
                                         l2263 0CAA                                           l3055 08E2  
                                         l3039 08C0                                           l2415 1114  
                                         l3225 0DEA                                           l3145 098C  
                                         l3129 0958                                           l3073 08FA  
                                         l3081 08FC                                           l3147 0992  
                                         l3139 0972                                           l3155 099E  
                                         l2275 0CBE                                           l3059 08E8  
                                         l2419 111A                                           l3181 0C0E  
                                         l3237 0E0C                                           l3165 0A10  
                                         l3085 0D3A                                           l3309 0754  
                                         l3261 0664                                           l2293 0CDA  
                                         l3413 0B5A                                           l3501 0F68  
                                         l3191 0C3E                                           l3255 1246  
                                         l3247 1234                                           l3095 0D56  
                                         l3263 066C                                           l3271 0676  
                                         l1831 1510                                           l2295 0CE0  
                                         l3193 0C42                                           l3185 0C22  
                                         l3089 0D42                                           l3329 07BE  
                                         l3273 0694                                           l2297 0CE6  
                                         l3337 126C                                           l3345 128C  
                                         l3425 0B7A                                           l3521 0F9E  
                                         l3283 06C2                                           l2803 11F8  
                                         l1851 136E                                           l2651 11BE  
                                         l3515 0F88                                           l3197 0C64  
                                         l3189 0C32                                           l3293 071A  
                                         l2813 1060                                           l2805 1202  
                                         l1861 137A                                           l3445 0BA8  
                                         l2653 11C2                                           l2661 11D0  
                                         l3517 0F8E                                           l3509 0F78  
                                         l3295 071E                                           l3287 06E4  
                                         l2815 1066                                           l1847 1368  
                                         l2583 117A                                           l3439 0BA2  
                                         l2655 11C6                                           l2663 11E8  
                                         l3289 06EC                                           l2817 1074  
                                         l2841 0FC0                                           l2585 1180  
                                         l2593 1188                                           l3449 0BCE  
                                         l3457 0BD4                                           l2657 11CA  
                                         l1971 151E                                           l3299 072E  
                                         l2819 107E                                           l2923 1038  
                                         l2915 102C                                           l2907 1012  
                                         l2827 12D4                                           l2587 1184  
                                         l3459 0BE8                                           l2829 12DA  
                                         l2845 0FD2                                           l2837 0FAA  
                                         l3389 0B34                                           l2935 104A  
                                         l2855 130E                                           l2847 0FDA  
                                         l2943 0810                                           l3399 0B46  
                                         l2881 0AAC                                           l2937 1054  
                                         l2849 12FA                                           l2865 0E82  
                                         l3497 0F5A                                           l2883 0AB4  
                                         l2891 0AD6                                           l2859 0E4A  
                                         l2867 0EAA                                           l2955 0818  
                                         l2893 0AEE                                           l2877 0AA4  
                                         l2965 082A                                           l2983 085C  
                                         l2975 084C                                           l2897 0B06  
                                         l2987 0860                                           l2979 0854  
                                         STR_1 0653                                           _LATA 000F89  
                                         _LATB 000F8A                                           _LATC 000F8B  
                                         u1750 09D0                                           u1920 07AE  
                                         u1755 09C6                                           u1938 1270  
                                         u1939 1282                                           i2l91 0026  
                                         i2l93 0042                                           i2l99 004E  
                              _sysVarMainInput 0093                                           _WPUB 000F61  
                        ??_EUSART2_Receive_ISR 00C4                                _sysVarGpsCourse 007A  
                                         _main 0F3E                                _TMR0_StartTimer 1556  
                                         fsr1h 000FE2                                           fsr2h 000FDA  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                                         btemp 0001                                  __CFG_BORV$190 000000  
                                         prodl 000FF3                                           start 0062  
                                __CFG_IESO$OFF 000000                _SigfoxTaskLoadPayloadBuffer$805 00CD  
                 __end_of_EUSART2_Transmit_ISR 13C8                _SigfoxTaskLoadPayloadBuffer$806 00CF  
                                 ___param_bank 000000                 __size_of_SigfoxCommandSelector 00C8  
                   __size_of_SigfoxCommManager 004E                  __end_of_SigfoxCommandSelector 0B16  
                       _SigfoxCommManagerState 0091                              _SigfoxTaskNewTask 10EA  
                      __end_of_TMR0_Initialize 1354                             ?_SigfoxTaskNewTask 00C4  
               __size_of_OSCILLATOR_Initialize 000E                       ??_ProtocolTaskBuildFrame 00DE  
                        __end_of_SigfoxTXReady 1512                  __end_of_OSCILLATOR_Initialize 1504  
                              __end_of___almod 0C8A                                          ?_main 00C4  
                                        _T0CON 000FD5                                _systemMainTimer 1296  
                               __CFG_DEBUG$OFF 000000                  _SigfoxScheduledMsgStaTaskFlag 008B  
                 __size_of_SigfoxTaskPowerDown 0016                                          i2l727 0F06  
                                        i2l728 0F14                                          _TMR0H 000FD7  
                                        _TMR0L 000FD6                          __end_of_SigfoxReceive 14D4  
                             _sysVarGpsDayTime 0068                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                        ?_ProtocolAddFrameData 00C9                            ??_SigfoxTaskNewTask 00C9  
            __size_of_TMR0_SetInterruptHandler 000A                                  __CFG_WRT0$OFF 000000  
                                __CFG_WRT1$OFF 000000                      ?_TMR0_SetInterruptHandler 00C9  
                               __CFG_EBTR0$OFF 000000                                 __CFG_FCMEN$OFF 000000  
                               __CFG_EBTR1$OFF 000000                                 _SigfoxRXBuffer 017D  
                             __end_of_TMR0_ISR 13FC                                  __CFG_WRTB$OFF 000000  
                                __CFG_WRTC$OFF 000000                                  __CFG_WRTD$OFF 000000  
                      ??_ProtocolTaskPowerDown 00C9                                 __CFG_EBTRB$OFF 000000  
                               _SigfoxTXBuffer 0095                       ?_ProtocolSetNextCommTime 00C4  
                           __CFG_MCLRE$EXTMCLR 000000                                          pclath 000FFA  
                     ?_ProtocolSetNextMeasTime 00C4                                          tablat 000FF5  
                     ProtocolAddFrameData@Data 00C9                              ?_powerTaskNewTask 00C4  
                                        plusw2 000FDB                                          status 000FD8  
                               __CFG_HFOFST$ON 000000                                __end_of_strncmp 0FF0  
                           ??_powerTaskNewTask 00C9                                 __CFG_PBADEN$ON 000000  
                    __end_of_SigfoxTaskNewTask 1132                                   _sysVarGpsLat 0070  
                  __end_of_ProtocolGetValidity 13AC                                __initialization 1132  
                               _SigfoxTaskTick 14E6           __end_of_SIT_FRAME_TRACKER_SF_ID_DESC 064E  
                 _SIT_FRAME_TRACKER_SF_ID_DESC 0646                                   __end_of_main 0FA8  
            powerTaskGetVarValidity@variableID 00C9                                ??_powerTaskTick 00C4  
                      ??_gpsTaskGetVarValidity 00C9                    ?_INTERRUPT_InterruptManager 00C4  
                               _SigfoxTransmit 153E                 SigfoxTask@SigfoxInitCommandPtr 00DE  
                                       ??_main 00EA                                  __activetblptr 000003  
                       ??_SigfoxResponseParser 00D8                        __end_of_TMR0_StartTimer 155A  
                   __end_of_EUSART2_Initialize 1480            __end_of_SigfoxTaskLoadPayloadBuffer 0DB8  
                  _SigfoxTaskLoadPayloadBuffer 0D36                                         _ANSELA 000F38  
                                       _ANSELB 000F39                                         _ANSELC 000F3A  
                                       i2l2163 0F22                                         i2l2433 12C0  
                                       i2l2429 12AA                                 __CFG_WDTEN$OFF 000000  
                                       i2l3361 13C4                                         i2l1913 14EE  
                                       i2l3371 10BE                                         i2l3357 13BC  
                                       i2l3367 10B4                                         i2l3379 10CE  
                                       i2l3479 003C                                         _RCREG2 000F74  
                                       _RCSTA2 000F71                                         _OSCCON 000FD3  
                                       _SPBRG2 000F75                                         _TXREG2 000F73  
                                       _TXSTA2 000F72                         __end_of_SigfoxTaskTick 14F6  
                                   _SigfoxTask 07F0                     __end_of_powerTaskPowerDown 1496  
                               __CFG_PWRTEN$ON 000000                                 __CFG_XINST$OFF 000000  
             __size_of_powerTaskGetVarValidity 000E                                      ??___almod 00D1  
                      __end_of_systemMainTimer 12CA                                 __CFG_STVREN$ON 000000  
                       __end_of_SigfoxTransmit 1546                    _SigfoxScheduledInitTaskFlag 008C  
                             ?_TMR0_Initialize 00C4                gpsTaskGetVarValidity@variableID 00C9  
                                       clear_0 1158                                         clear_1 1164  
                            _sysVarGpsOdometer 0078                __size_of_ProtocolTaskBuildFrame 0174  
                           _SigfoxTimeOutTimer 0087                                         _strcat 1056  
                                       _strchr 12FA                                         _strcpy 11EE  
                                       _strlen 12CA                                         _strstr 0E48  
                       ??_ProtocolAddFrameData 00CE                __end_of_ProtocolSetNextCommTime 1248  
                          _SigfoxPayloadBuffer 0164                                   __mediumconst 0000  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                __end_of_ProtocolSetNextMeasTime 0E0E  
                         _EUSART2_Transmit_ISR 13AC       TMR0_SetInterruptHandler@InterruptHandler 00C9  
                             _ProtocolTaskTick 0EC4                  _protVarSystemSynchronizedFlag 0083  
                                    ??_strncmp 00D3                  __size_of_INTERRUPT_Initialize 0004  
                            _SYSTEM_Initialize 14AC                                     __accesstop 0060  
                      __end_of__initialization 116A                                  _sysVarBattery 00F3  
                               _statusIndTimer 0085                             ?_SYSTEM_Initialize 00C4  
                                ___rparam_used 000000                     ProtocolAddFrameData@toLeft 00D7  
                              ?_SigfoxTaskTick 00C4              __end_of_SIT_FRAME_POWERUP_SF_DESC 0653  
                   __size_of_SigfoxTaskNewTask 0048                                  _sysVarGpsLong 006C  
                        ProtocolAddFrameData@i 00DC                       _SigfoxTransactionAttemps 008A  
                              _SigfoxTaskReset 1420                                   __pidataBANK0 1552  
                          ??_SYSTEM_Initialize 00CB                                      ?_TMR0_ISR 00C4  
                              ?_SigfoxTransmit 00C4                                     __end_ofPL2 0E2E  
                                   __end_ofPL4 0A40                                     __end_ofPL6 0B28  
                                   __end_ofPL8 1262                               ??_powerTaskReset 00C9  
                                ?_setLedStatus 00C4    SigfoxTaskLoadPayloadBuffer@payloadBufferPtr 00D1  
                        ?_EUSART2_Transmit_ISR 00C4                               ?_TMR0_StartTimer 00C4  
                    __end_of_SYSTEM_Initialize 14C0                                     __pbssBANK0 0060  
                                   __pbssBANK1 0100                                __CFG_PLLCFG$OFF 000000  
                       _ProtocolTaskBuildFrame 0658                            _SigfoxTaskPowerDown 1496  
                                  ?_SigfoxTask 00C4                             __CFG_CCP2MX$PORTC1 000000  
          SigfoxTask@sigfoxInitCommandsROMList 00DB                    __end_of_ProtocolTaskExecute 1296  
             __end_of_TMR0_SetInterruptHandler 1536                                     ??_TMR0_ISR 00C5  
                             ?_systemMainTimer 00C4                             __CFG_CCP3MX$PORTB5 000000  
                               _usartSemaphore 0092      SigfoxCommandSelector@SFX_COMMAND_TAIL_STR 00D3  
               ProtocolTaskBuildFrame@dataSize 00E7              SigfoxTaskLoadPayloadBuffer@buffer 00D2  
                     _pwrScheduledInitTaskFlag 0080                        __size_of_ADC_Initialize 0006  
                                      ?_strcat 00C9                                        ?_strchr 00C9  
                                      ?_strcpy 00C9                                        ?_strlen 00C9  
                                      ?_strstr 00D4                                 ??_setLedStatus 00C9  
                         ?_SigfoxTaskPowerDown 00C4                       SigfoxTaskNewTask@command 00C9  
                                      _OSCCON2 000FD2                             __size_of_powerTask 009A  
                  __end_of_EUSART2_Receive_ISR 10DC                                        i2u53_40 0EF6  
                                      _OSCTUNE 000F9B                                        _SPBRGH2 000F76  
                              __CFG_WDTPS$8192 000000              __end_of_SigfoxCommandsDefinitions 0646  
               ProtocolTaskTick@_500msToSecond 0081                 __size_of_ProtocolTaskPowerDown 000C  
                        _SigfoxMsgReceivedFlag 0090                  __end_of_ProtocolTaskPowerDown 152C  
                ProtocolGetValidity@variableID 00CA                        __end_of_SigfoxTaskReset 1444  
                      _powerTaskGetVarValidity 1512                                        __Hparam 0000  
                                      __Lparam 0000             SigfoxCommandSelector@SigfoxCommand 00D7  
             __size_of_ProtocolSetNextCommTime 0020                        powerTaskNewTask@command 00C9  
                                      ___almod 0C00               __size_of_ProtocolSetNextMeasTime 0046  
                                 __psmallconst 0600                          _SigfoxCommandSelector 0A4E  
                    __size_of_powerTaskNewTask 0034         ProtocolTaskBuildFrame@protFrameDescPtr 00E8  
                                      __pcinit 1132                                        __ramtop 0600  
               __size_of_gpsTaskGetVarValidity 0006                  __end_of_gpsTaskGetVarValidity 1552  
                                      __ptext0 0F3E                                        __ptext1 11B4  
                                      __ptext2 152C                                        __ptext3 14AC  
                                      __ptext4 1328                                        __ptext5 1556  
                                      __ptext6 13FC                                        __ptext7 14F6  
                                      __ptext8 155A                                        __ptext9 1546  
                        ??_SigfoxTaskPowerDown 00C9                                      _T0CONbits 000FD5  
                              __size_of_strcat 004A                                __size_of_strchr 0024  
                              __size_of_strcpy 003A                                __size_of_strlen 0030  
                               main@taskResult 00EA                                __size_of_strstr 007C  
                        _OSCILLATOR_Initialize 14F6                         ??_EUSART2_Transmit_ISR 00C4  
                     ??_PIN_MANAGER_Initialize 00C9                            __size_of_SigfoxTask 0124  
                   __size_of_SYSTEM_Initialize 0014                             _sysVarGpsValidFlag 0094  
                                      _strncmp 0FA8                           end_of_initialization 116A  
  SigfoxCommandSelector@SigfoxRomCommandStrPtr 00D5                         __size_of_SigfoxTXReady 000E  
               SigfoxCommManager@SigfoxCommand 00D8                             _EUSART2_Initialize 1464  
              ProtocolGetValidity@taskResponse 00CB                         __size_of_SigfoxReceive 0014  
                            __end_of_powerTask 0D36           __size_of_SigfoxTaskLoadPayloadBuffer 0082  
                                      postdec1 000FE5             __size_of_EUSART2_GPRS_Transmit_ISR 0002  
                                      postinc0 000FEE                                        postinc2 000FDE  
                     __end_of_ProtocolTaskTick 0F2A                     ?_EUSART2_GPRS_Transmit_ISR 00C4  
                          ?_EUSART2_Initialize 00C4                                        strlen@s 00C9  
                        __end_of_powerTaskTick 14E6                   __size_of_ProtocolGetValidity 002C  
                                ?_ProtocolTask 00C4                ??_SigfoxVerifyTransactionStatus 00C9  
                     _TMR0_SetInterruptHandler 152C                                      _PORTAbits 000F80  
                           _powerTaskPowerDown 1480                                      _SFX_STATE 00F2  
                                    _TRISBbits 000F93                ProtocolAddFrameData@DataRepSize 00CD  
                __size_of_SigfoxResponseParser 0020                            ?_powerTaskPowerDown 00C4  
                                    _PWR_STATE 00EF                           ??_EUSART2_Initialize 00C9  
                             ??_SigfoxTaskTick 00C4                      ??_powerTaskGetVarValidity 00C9  
                             ?_SigfoxTaskReset 00C4                           __end_of_setLedStatus 11EE  
                             ??_SigfoxTransmit 00C9                                 _sysVarGpsSpeed 007C  
                    _protVarCommunicationTimer 0060                 _SigfoxScheduledPwrDownTaskFlag 008D  
                         ??_powerTaskPowerDown 00C9                         ?_SigfoxCommandSelector 00C4  
                 __end_of_INTERRUPT_Initialize 155E                                _protDataShifter 00B8  
            __end_of_EUSART2_GPRS_Transmit_ISR 1560                                 ??_ProtocolTask 00EA  
              systemMainTimer@secondMultiplier 00C4                              __size_of_TMR0_ISR 0026  
                               _ADC_Initialize 1546                         ?_OSCILLATOR_Initialize 00C4  
                                _SigfoxTXReady 1504                      _SIT_FRAME_POWERUP_SF_DESC 064E  
                               __end_of_strcat 10A0                                 __end_of_strchr 131E  
                               __end_of_strcpy 1228                                 __end_of_strlen 12FA  
                               __end_of_strstr 0EC4                                    __end_ofPL10 0E48  
                                  __end_ofPL20 0A4E                                    __end_ofPL12 07DC  
                                  __end_ofPL30 0F34                                    __end_ofPL22 13D6  
                                  __end_ofPL14 0DC8                                    __end_ofPL40 0924  
                                  __end_ofPL32 0B32                                    __end_ofPL24 07E6  
                                  __end_ofPL16 0BFA                                    __end_ofPL42 11B4  
                                  __end_ofPL34 0F3E                                    __end_ofPL26 07F0  
                                  __end_ofPL18 10EA                                    __end_ofPL36 0C00  
                                  __end_ofPL28 091E                                    __end_ofPL45 1008  
                                  __end_ofPL38 11AE                                    __end_ofPL47 0C9C  
                                  __end_ofPL49 1328                            start_initialization 1132  
                                _SigfoxReceive 14C0                  __size_of_ProtocolAddFrameData 010E  
                     __size_of_TMR0_Initialize 002C                __size_of_PIN_MANAGER_Initialize 0024  
                                _SigfoxTxDelay 0086                        ?_ProtocolTaskBuildFrame 00C4  
                _pwrScheduledMeasPowerTaskFlag 007F                                SigfoxTask@F6885 0605  
                                 ??_SigfoxTask 00DA                        _ProtocolSetNextCommTime 1228  
                _pwrScheduledCommPowerTaskFlag 007E                        _ProtocolSetNextMeasTime 0DC8  
                       __end_of_ADC_Initialize 154C                                    __pdataBANK0 00F0  
                             _powerTaskNewTask 1174                     ProtocolTaskExecute@timeOut 00E4  
              __end_of_powerTaskGetVarValidity 1520                                 ?_SigfoxTXReady 00C4  
                                     ??_strcat 00CD                                       ??_strchr 00CD  
                                     ??_strcpy 00CD                                       ??_strlen 00CB  
                                     ??_strstr 00D8                                 ?_SigfoxReceive 00C4  
        __end_of_SigfoxVerifyTransactionStatus 1380         __size_of_SigfoxVerifyTransactionStatus 002C  
                _SigfoxVerifyTransactionStatus 1354                                  __pcstackBANK0 00C4  
               __end_of_ProtocolTaskBuildFrame 07CC                             __end_of_SigfoxTask 0914  
                      _SigfoxTransactionResult 00F1                      EUSART2_Receive_ISR@auxVar 00C4  
                        _TMR0_InterruptHandler 00ED                                      __pnvBANK0 00EB  
                     __size_of_TMR0_StartTimer 0004                                   _gprsRxBuffer 0100  
                       _PIN_MANAGER_Initialize 13FC                      _SigfoxCommandsDefinitions 060A  
                                    __pintcode 0008                                       ?___almod 00C9  
                              ?_ADC_Initialize 00C4                    SigfoxResponseParser@dumyPtr 00D8  
                 ??_INTERRUPT_InterruptManager 00C5                  _SigfoxScheduledMsgAckTaskFlag 008E  
                             ___almod@dividend 00C9                               __CFG_PRICLKEN$ON 000000  
                 __size_of_ProtocolTaskExecute 0034                                    __smallconst 0600  
                                     _BAUDCON2 000F70                ProtocolTaskBuildFrame@dataField 00E1  
                     __size_of_systemMainTimer 0034                                _lastKnownResult 00F0  
                      __end_ofSigfoxTask@F6885 0608             SigfoxTaskLoadPayloadBuffer@rawData 00C9  
                      __size_of_powerTaskReset 0008                                       ?_strncmp 00CD  
                        __size_of_setLedStatus 003A                           _INTERRUPT_Initialize 155A  
                 ?_SigfoxTaskLoadPayloadBuffer 00C9                            _ProtocolGetValidity 1380  
                         __end_of_ProtocolTask 0BEA                              ??_TMR0_Initialize 00C9  
                 __size_of_EUSART2_Receive_ISR 003C  SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR 00CF  
                        _ProtocolTaskPowerDown 1520                      ??_ProtocolSetNextCommTime 00D3  
                                     _LATAbits 000F89                                       _LATBbits 000F8A  
                                     _LATCbits 000F8B                                       _PIE3bits 000FA3  
                    ??_ProtocolSetNextMeasTime 00D3                                       _PMD0bits 000F3F  
                                     _PMD2bits 000F3D            __size_of_INTERRUPT_InterruptManager 005A  
                   ??_TMR0_SetInterruptHandler 00CB                                       _PIR3bits 000FA4  
                                     _RCONbits 000FD0                    __end_of_SigfoxTaskPowerDown 14AC  
                                     _TMR0_ISR 13D6                                      _sessionTO 0076  
                              ??_SigfoxTXReady 00C9                    ??_EUSART2_GPRS_Transmit_ISR 00C4  
                            ?_ProtocolTaskTick 00C4                                      _powerTask 0C9C  
                         ?_ProtocolGetValidity 00C4                             ??_ProtocolTaskTick 00C4  
                              ??_SigfoxReceive 00C4                          _gpsTaskGetVarValidity 154C  
                                 _setLedStatus 11B4                  __size_of_EUSART2_Transmit_ISR 001C  
                                  _INTCON2bits 000FF1                                      copy_data0 1146  
                        ?_INTERRUPT_Initialize 00C4                 ProtocolTaskExecute@taskTimeOut 00E2  
               ProtocolTaskExecute@taskPointer 00E0                 ?_SigfoxVerifyTransactionStatus 00C4  
                  ProtocolTaskBuildFrame@EVENT 00E0                  ??_SigfoxTaskLoadPayloadBuffer 00CB  
                                     __Hparam0 0000                        ??_SigfoxCommandSelector 00CF  
                                     __Lparam0 0000                ProtocolTaskBuildFrame@totalBits 00E5  
                            _SigfoxRXBufferPtr 0088                   __end_of_SigfoxResponseParser 1464  
                           __CFG_BOREN$SBORDIS 000000                        _protVarMeasurementTimer 0064  
                            __CFG_P2BMX$PORTB5 000000                        ??_OSCILLATOR_Initialize 00C9  
                            ??_TMR0_StartTimer 00C9                               __size_of___almod 008A  
                        ??_ProtocolGetValidity 00CA                                     ?_powerTask 00C4  
                                   strcat@from 00CB                              _SigfoxTXBufferPtr 0089  
                    ProtocolAddFrameData@bytes 00DD                                       __ptext10 0B32  
                                     __ptext11 1174                                       __ptext20 1464  
                                     __ptext12 10EA                                       __ptext21 1496  
                                     __ptext13 1520                                       __ptext30 1504  
                                     __ptext22 1444                                       __ptext14 1262  
                                     __ptext31 0A4E                                       __ptext23 0E48  
                                     __ptext15 07F0                                       __ptext40 0DC8  
                                     __ptext32 11EE                                       __ptext24 0FA8  
                                     __ptext16 0C9C                                       __ptext41 1228  
                                     __ptext33 1056                                       __ptext25 12CA  
                                     __ptext17 1536                                       __ptext50 14C0  
                                     __ptext42 0C00                                       __ptext34 0658  
                                     __ptext26 12FA                                       __ptext18 1480  
                                     __ptext51 10A0                                       __ptext35 0D36  
                                     __ptext27 1008                                       __ptext19 1420  
                                     __ptext52 155E                                       __ptext44 13D6  
                                     __ptext36 1380                                       __ptext28 1354  
                                     __ptext53 0000                                       __ptext45 1296  
                                     __ptext37 1512                                       __ptext29 153E  
                                     __ptext46 0EC4                                       __ptext38 154C  
                                     __ptext47 14D4                                       __ptext39 0924  
                                     __ptext48 14E6                                       __ptext49 13AC  
                                     _ledTimer 0084                      _EUSART2_GPRS_Transmit_ISR 155E  
                              ___almod@divisor 00CD                              ??_systemMainTimer 00C4  
                              ___almod@counter 00D1                       __end_of_powerTaskNewTask 11A8  
                             __size_of_strncmp 0048                         ?_ProtocolTaskPowerDown 00C4  
                  __size_of_EUSART2_Initialize 001C                                     strcpy@from 00CB  
                       _powerTaskPwrReadyTimer 0074                                  __size_of_main 006A  
                       __size_of_powerTaskTick 0012                                     strncmp@len 00D1  
                 __end_of_ProtocolAddFrameData 0A32                     _SigfoxScheduledMsgTaskFlag 008F  
                  __size_of_powerTaskPowerDown 0016                                       int$flags 0001  
                     __size_of_SigfoxTaskReset 0024                              _SigfoxCommManager 1008  
           __end_of_INTERRUPT_InterruptManager 0062                     _INTERRUPT_InterruptManager 0008  
                           ?_SigfoxCommManager 00C4                         ?_gpsTaskGetVarValidity 00C4  
                ProtocolTaskExecute@taskResult 00E6                                     _INTCONbits 000FF2  
                          ??_SigfoxCommManager 00D8                          __size_of_ProtocolTask 00B8  
                       ??_INTERRUPT_Initialize 00C9                                 _powerTaskReset 1536  
                     ?_powerTaskGetVarValidity 00C4                                       intlevel2 0000  
                                    strchr@chr 00CB                                      strchr@ptr 00C9  
                          _ProtocolTaskExecute 1262                        ?_PIN_MANAGER_Initialize 00C4  
                                   _RCSTA2bits 000F71                                      strncmp@s1 00CD  
                                    strncmp@s2 00CF                               ??_ADC_Initialize 00C9  
                    __end_of_SigfoxCommManager 1056                        __size_of_SigfoxTaskTick 0010  
                                  ??_powerTask 00C9                        __size_of_SigfoxTransmit 0008  
                         ?_ProtocolTaskExecute 00E0                            _EUSART2_Receive_ISR 10A0  
                                _powerTaskTick 14D4                                   _ProtocolTask 0B32  
                                     strcat@cp 00CD                                       strcat@to 00C9  
                              _TMR0_Initialize 1328                                       strcpy@cp 00CD  
                                     strlen@cp 00CB                                       strcpy@to 00C9  
                       __end_of_powerTaskReset 153E                              __CFG_T3CMX$PORTC0 000000  
                                     strstr@s1 00D4                                       strstr@s2 00D6  
                         _SigfoxResponseParser 1444                 __end_of_PIN_MANAGER_Initialize 1420  
                                   _PROT_STATE 0082                                   ___almod@sign 00D2  
                         ?_EUSART2_Receive_ISR 00C4                              __CFG_FOSC$INTIO67 000000  
