

Microchip Technology PIC18 PRO Macro Assembler V1.41 build -162212810 
                                                                                               Thu Jul 20 12:03:59 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	18LF25K22
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec,minocg
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec,minocg
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1,minocg
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec,minocg
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec,minocg
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec,minocg
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1,minocg
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,minocg
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,minocg
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,minocg
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,minocg
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,minocg
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,minocg
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,minocg
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,minocg
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,minocg
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,minocg
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,minocg
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,minocg
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,minocg
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,minocg
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,minocg
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,minocg
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,minocg
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,minocg
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,minocg
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1,minocg
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,minocg
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1,minocg
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1,minocg
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1,minocg
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1,minocg
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1,minocg
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1,minocg
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1,minocg
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1,minocg
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1,minocg
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1,minocg
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1,minocg
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1,minocg
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1,minocg
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1,minocg
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1,minocg
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1,minocg
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1,minocg
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1,minocg
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1,minocg
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1,minocg
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1,minocg
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1,minocg
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1,minocg
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1,minocg
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1,minocg
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1,minocg
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1,minocg
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1,minocg
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1,minocg
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1,minocg
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1,minocg
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1,minocg
    68                           	psect	param0,global,class=BANK0,space=1,delta=1,noexec
    69                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    70                           	psect	pa_nodes0,global,class=CODE,delta=1
    71                           	psect	pa_nodes1,global,class=CODE,delta=1
    72                           	psect	pa_nodes2,global,class=CODE,delta=1
    73  0000                     
    74                           ; Version 1.41
    75                           ; Generated 25/01/2017 GMT
    76                           ; 
    77                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18LF25K22 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     tosu	equ	0xFFF
   109                           tosh	equ	0xFFE
   110                           tosl	equ	0xFFD
   111                           pclath	equ	0xFFA
   112                           tblptru	equ	0xFF8
   113                           tblptrh	equ	0xFF7
   114                           tblptrl	equ	0xFF6
   115                           tablat	equ	0xFF5
   116                           prodh	equ	0xFF4
   117                           prodl	equ	0xFF3
   118                           intcon	equ	0xFF2
   119                           intcon2	equ	0xFF1
   120                           wreg	equ	0xFE8
   121                           indf1	equ	0xFE7
   122                           fsr1h	equ	0xFE2
   123                           fsr1l	equ	0xFE1
   124                           indf2	equ	0xFDF
   125                           postinc2	equ	0xFDE
   126                           plusw2	equ	0xFDB
   127                           fsr2h	equ	0xFDA
   128                           fsr2l	equ	0xFD9
   129                           status	equ	0xFD8
   130                           
   131                           	psect	idataBANK0
   132  001552                     __pidataBANK0:
   133                           	opt stack 0
   134                           
   135                           ;initializer for _lastKnownResult
   136  001552  04                 	db	4
   137                           
   138                           ;initializer for _SigfoxTransactionResult
   139  001553  01                 	db	1
   140                           
   141                           ;initializer for _SFX_STATE
   142  001554  01                 	db	1
   143                           
   144                           ;initializer for _sysVarBattery
   145  001555  64                 	db	100
   146                           tosu	equ	0xFFF
   147                           tosh	equ	0xFFE
   148                           tosl	equ	0xFFD
   149                           pclath	equ	0xFFA
   150                           tblptru	equ	0xFF8
   151                           tblptrh	equ	0xFF7
   152                           tblptrl	equ	0xFF6
   153                           tablat	equ	0xFF5
   154                           prodh	equ	0xFF4
   155                           prodl	equ	0xFF3
   156                           intcon	equ	0xFF2
   157                           intcon2	equ	0xFF1
   158                           wreg	equ	0xFE8
   159                           indf1	equ	0xFE7
   160                           fsr1h	equ	0xFE2
   161                           fsr1l	equ	0xFE1
   162                           indf2	equ	0xFDF
   163                           postinc2	equ	0xFDE
   164                           plusw2	equ	0xFDB
   165                           fsr2h	equ	0xFDA
   166                           fsr2l	equ	0xFD9
   167                           status	equ	0xFD8
   168                           
   169                           	psect	smallconst
   170  000600                     __psmallconst:
   171                           	opt stack 0
   172  000600  00                 	db	0
   173  000601                     SigfoxCommandSelector@F6864:
   174                           	opt stack 0
   175  000601  2C                 	db	44
   176  000602  31                 	db	49
   177  000603  0D                 	db	13
   178  000604  00                 	db	0
   179  000605                     __end_ofSigfoxCommandSelector@F6864:
   180                           	opt stack 0
   181  000605                     SigfoxTask@F6887:
   182                           	opt stack 0
   183  000605  00                 	db	0
   184  000606  06                 	db	6
   185  000607  FF                 	db	255
   186  000608                     __end_ofSigfoxTask@F6887:
   187                           	opt stack 0
   188  000608                     SigfoxCommandSelector@F6862:
   189                           	opt stack 0
   190  000608  0D                 	db	13
   191  000609  00                 	db	0
   192  00060A                     __end_ofSigfoxCommandSelector@F6862:
   193                           	opt stack 0
   194  00060A                     _SigfoxCommandsDefinitions:
   195                           	opt stack 0
   196  00060A  2B                 	db	43
   197  00060B  2B                 	db	43
   198  00060C  2B                 	db	43
   199  00060D  00                 	db	0
   200  00060E  00                 	db	0
   201  00060F  00                 	db	0
   202  000610  00                 	db	0
   203  000611  00                 	db	0
   204  000612  00                 	db	0
   205  000613  00                 	db	0
   206  000614  41                 	db	65
   207  000615  54                 	db	84
   208  000616  24                 	db	36
   209  000617  53                 	db	83
   210  000618  46                 	db	70
   211  000619  3D                 	db	61
   212  00061A  00                 	db	0
   213  00061B  00                 	db	0
   214  00061C  00                 	db	0
   215  00061D  00                 	db	0
   216  00061E  41                 	db	65
   217  00061F  54                 	db	84
   218  000620  24                 	db	36
   219  000621  53                 	db	83
   220  000622  46                 	db	70
   221  000623  3D                 	db	61
   222  000624  00                 	db	0
   223  000625  00                 	db	0
   224  000626  00                 	db	0
   225  000627  00                 	db	0
   226  000628  41                 	db	65
   227  000629  54                 	db	84
   228  00062A  24                 	db	36
   229  00062B  53                 	db	83
   230  00062C  42                 	db	66
   231  00062D  3D                 	db	61
   232  00062E  31                 	db	49
   233  00062F  00                 	db	0
   234  000630  00                 	db	0
   235  000631  00                 	db	0
   236  000632  41                 	db	65
   237  000633  54                 	db	84
   238  000634  58                 	db	88
   239  000635  00                 	db	0
   240  000636  00                 	db	0
   241  000637  00                 	db	0
   242  000638  00                 	db	0
   243  000639  00                 	db	0
   244  00063A  00                 	db	0
   245  00063B  00                 	db	0
   246  00063C  41                 	db	65
   247  00063D  54                 	db	84
   248  00063E  53                 	db	83
   249  00063F  32                 	db	50
   250  000640  30                 	db	48
   251  000641  32                 	db	50
   252  000642  3D                 	db	61
   253  000643  37                 	db	55
   254  000644  00                 	db	0
   255  000645  00                 	db	0
   256  000646                     __end_of_SigfoxCommandsDefinitions:
   257                           	opt stack 0
   258  000646                     _SIT_FRAME_TRACKER_SF_ID_DESC:
   259                           	opt stack 0
   260  000646  06                 	db	6
   261  000647  7F                 	db	127
   262  000648  16                 	db	22
   263  000649  18                 	db	24
   264  00064A  20                 	db	32
   265  00064B  7F                 	db	127
   266  00064C  0B                 	db	11
   267  00064D  00                 	db	0
   268  00064E                     __end_of_SIT_FRAME_TRACKER_SF_ID_DESC:
   269                           	opt stack 0
   270  00064E                     _SIT_FRAME_POWERUP_SF_DESC:
   271                           	opt stack 0
   272  00064E  07                 	db	7
   273  00064F  41                 	db	65
   274  000650  42                 	db	66
   275  000651  43                 	db	67
   276  000652  00                 	db	0
   277  000653                     __end_of_SIT_FRAME_POWERUP_SF_DESC:
   278                           	opt stack 0
   279  000653                     STR_1:
   280  000653  4F                 	db	79	;'O'
   281  000654  4B                 	db	75	;'K'
   282  000655  00                 	db	0
   283                           
   284                           ; #config settings
   285  000656  00                 	db	0	; dummy byte at the end
   286  0000                     tosu	equ	0xFFF
   287                           tosh	equ	0xFFE
   288                           tosl	equ	0xFFD
   289                           pclath	equ	0xFFA
   290                           tblptru	equ	0xFF8
   291                           tblptrh	equ	0xFF7
   292                           tblptrl	equ	0xFF6
   293                           tablat	equ	0xFF5
   294                           prodh	equ	0xFF4
   295                           prodl	equ	0xFF3
   296                           intcon	equ	0xFF2
   297                           intcon2	equ	0xFF1
   298                           wreg	equ	0xFE8
   299                           indf1	equ	0xFE7
   300                           fsr1h	equ	0xFE2
   301                           fsr1l	equ	0xFE1
   302                           indf2	equ	0xFDF
   303                           postinc2	equ	0xFDE
   304                           plusw2	equ	0xFDB
   305                           fsr2h	equ	0xFDA
   306                           fsr2l	equ	0xFD9
   307                           status	equ	0xFD8
   308                           
   309                           	psect	nvBANK0
   310  0000EB                     __pnvBANK0:
   311                           	opt stack 0
   312  0000EB                     _timer0ReloadVal:
   313                           	opt stack 0
   314  0000EB                     	ds	2
   315  0000ED                     _TMR0_InterruptHandler:
   316                           	opt stack 0
   317  0000ED                     	ds	2
   318  0000EF                     _PWR_STATE:
   319                           	opt stack 0
   320  0000EF                     	ds	1
   321  0000                     _PMD2bits	set	3901
   322  0000                     _PMD0bits	set	3903
   323  0000                     _ANSELA	set	3896
   324  0000                     _ANSELB	set	3897
   325  0000                     _ANSELC	set	3898
   326  0000                     _LATCbits	set	3979
   327  0000                     _TRISBbits	set	3987
   328  0000                     _LATAbits	set	3977
   329  0000                     _PORTAbits	set	3968
   330  0000                     _LATBbits	set	3978
   331  0000                     _RCREG2	set	3956
   332  0000                     _TXREG2	set	3955
   333  0000                     _SPBRGH2	set	3958
   334  0000                     _SPBRG2	set	3957
   335  0000                     _TXSTA2	set	3954
   336  0000                     _RCSTA2	set	3953
   337  0000                     _BAUDCON2	set	3952
   338  0000                     _RCSTA2bits	set	3953
   339  0000                     _INTCON2bits	set	4081
   340  0000                     _WPUB	set	3937
   341  0000                     _TRISC	set	3988
   342  0000                     _TRISB	set	3987
   343  0000                     _TRISA	set	3986
   344  0000                     _LATC	set	3979
   345  0000                     _LATB	set	3978
   346  0000                     _LATA	set	3977
   347  0000                     _T0CONbits	set	4053
   348  0000                     _TMR0L	set	4054
   349  0000                     _TMR0H	set	4055
   350  0000                     _T0CON	set	4053
   351  0000                     _PIR3bits	set	4004
   352  0000                     _PIE3bits	set	4003
   353  0000                     _INTCONbits	set	4082
   354  0000                     _RCONbits	set	4048
   355  0000                     _OSCTUNE	set	3995
   356  0000                     _OSCCON2	set	4050
   357  0000                     _OSCCON	set	4051
   358                           tosu	equ	0xFFF
   359                           tosh	equ	0xFFE
   360                           tosl	equ	0xFFD
   361                           pclath	equ	0xFFA
   362                           tblptru	equ	0xFF8
   363                           tblptrh	equ	0xFF7
   364                           tblptrl	equ	0xFF6
   365                           tablat	equ	0xFF5
   366                           prodh	equ	0xFF4
   367                           prodl	equ	0xFF3
   368                           intcon	equ	0xFF2
   369                           intcon2	equ	0xFF1
   370                           wreg	equ	0xFE8
   371                           indf1	equ	0xFE7
   372                           fsr1h	equ	0xFE2
   373                           fsr1l	equ	0xFE1
   374                           indf2	equ	0xFDF
   375                           postinc2	equ	0xFDE
   376                           plusw2	equ	0xFDB
   377                           fsr2h	equ	0xFDA
   378                           fsr2l	equ	0xFD9
   379                           status	equ	0xFD8
   380                           
   381                           	psect	cinit
   382  001132                     __pcinit:
   383                           	opt stack 0
   384  001132                     start_initialization:
   385                           	opt stack 0
   386  001132                     __initialization:
   387                           	opt stack 0
   388                           
   389                           ; Initialize objects allocated to BANK0 (4 bytes)
   390                           ; load TBLPTR registers with __pidataBANK0
   391  001132  0E52               	movlw	low __pidataBANK0
   392  001134  6EF6               	movwf	tblptrl,c
   393  001136  0E15               	movlw	high __pidataBANK0
   394  001138  6EF7               	movwf	tblptrh,c
   395  00113A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   396  00113C  6EF8               	movwf	tblptru,c
   397  00113E  EE00  F0F0         	lfsr	0,__pdataBANK0
   398  001142  EE10 F004          	lfsr	1,4
   399  001146                     copy_data0:
   400  001146  0009               	tblrd		*+
   401  001148  CFF5 FFEE          	movff	tablat,postinc0
   402  00114C  50E5               	movf	postdec1,w,c
   403  00114E  50E1               	movf	fsr1l,w,c
   404  001150  E1FA               	bnz	copy_data0
   405                           
   406                           ; Clear objects allocated to BANK1 (47 bytes)
   407  001152  EE01  F000         	lfsr	0,__pbssBANK1
   408  001156  0E2F               	movlw	47
   409  001158                     clear_0:
   410  001158  6AEE               	clrf	postinc0,c
   411  00115A  06E8               	decf	wreg,f,c
   412  00115C  E1FD               	bnz	clear_0
   413                           
   414                           ; Clear objects allocated to BANK0 (100 bytes)
   415  00115E  EE00  F060         	lfsr	0,__pbssBANK0
   416  001162  0E64               	movlw	100
   417  001164                     clear_1:
   418  001164  6AEE               	clrf	postinc0,c
   419  001166  06E8               	decf	wreg,f,c
   420  001168  E1FD               	bnz	clear_1
   421  00116A                     end_of_initialization:
   422                           	opt stack 0
   423  00116A                     __end_of__initialization:
   424                           	opt stack 0
   425  00116A  9001               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   426  00116C  9201               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   427  00116E  0100               	movlb	0
   428  001170  EF9F  F007         	goto	_main	;jump to C main() function
   429                           tosu	equ	0xFFF
   430                           tosh	equ	0xFFE
   431                           tosl	equ	0xFFD
   432                           pclath	equ	0xFFA
   433                           tblptru	equ	0xFF8
   434                           tblptrh	equ	0xFF7
   435                           tblptrl	equ	0xFF6
   436                           tablat	equ	0xFF5
   437                           prodh	equ	0xFF4
   438                           prodl	equ	0xFF3
   439                           intcon	equ	0xFF2
   440                           intcon2	equ	0xFF1
   441                           postinc0	equ	0xFEE
   442                           wreg	equ	0xFE8
   443                           indf1	equ	0xFE7
   444                           postdec1	equ	0xFE5
   445                           fsr1h	equ	0xFE2
   446                           fsr1l	equ	0xFE1
   447                           indf2	equ	0xFDF
   448                           postinc2	equ	0xFDE
   449                           plusw2	equ	0xFDB
   450                           fsr2h	equ	0xFDA
   451                           fsr2l	equ	0xFD9
   452                           status	equ	0xFD8
   453                           
   454                           	psect	bssBANK0
   455  000060                     __pbssBANK0:
   456                           	opt stack 0
   457  000060                     _protVarCommunicationTimer:
   458                           	opt stack 0
   459  000060                     	ds	4
   460  000064                     _protVarMeasurementTimer:
   461                           	opt stack 0
   462  000064                     	ds	4
   463  000068                     _sysVarGpsDayTime:
   464                           	opt stack 0
   465  000068                     	ds	4
   466  00006C                     _sysVarGpsLong:
   467                           	opt stack 0
   468  00006C                     	ds	4
   469  000070                     _sysVarGpsLat:
   470                           	opt stack 0
   471  000070                     	ds	4
   472  000074                     _powerTaskPwrReadyTimer:
   473                           	opt stack 0
   474  000074                     	ds	2
   475  000076                     _sessionTO:
   476                           	opt stack 0
   477  000076                     	ds	2
   478  000078                     _sysVarGpsOdometer:
   479                           	opt stack 0
   480  000078                     	ds	2
   481  00007A                     _sysVarGpsCourse:
   482                           	opt stack 0
   483  00007A                     	ds	2
   484  00007C                     _sysVarGpsSpeed:
   485                           	opt stack 0
   486  00007C                     	ds	2
   487  00007E                     _pwrScheduledCommPowerTaskFlag:
   488                           	opt stack 0
   489  00007E                     	ds	1
   490  00007F                     _pwrScheduledMeasPowerTaskFlag:
   491                           	opt stack 0
   492  00007F                     	ds	1
   493  000080                     _pwrScheduledInitTaskFlag:
   494                           	opt stack 0
   495  000080                     	ds	1
   496  000081                     ProtocolTaskTick@_500msToSecond:
   497                           	opt stack 0
   498  000081                     	ds	1
   499  000082                     _PROT_STATE:
   500                           	opt stack 0
   501  000082                     	ds	1
   502  000083                     _protVarSystemSynchronizedFlag:
   503                           	opt stack 0
   504  000083                     	ds	1
   505  000084                     _ledTimer:
   506                           	opt stack 0
   507  000084                     	ds	1
   508  000085                     _statusIndTimer:
   509                           	opt stack 0
   510  000085                     	ds	1
   511  000086                     _SigfoxTxDelay:
   512                           	opt stack 0
   513  000086                     	ds	1
   514  000087                     _SigfoxTimeOutTimer:
   515                           	opt stack 0
   516  000087                     	ds	1
   517  000088                     _SigfoxRXBufferPtr:
   518                           	opt stack 0
   519  000088                     	ds	1
   520  000089                     _SigfoxTXBufferPtr:
   521                           	opt stack 0
   522  000089                     	ds	1
   523  00008A                     _SigfoxTransactionAttemps:
   524                           	opt stack 0
   525  00008A                     	ds	1
   526  00008B                     _SigfoxScheduledMsgStaTaskFlag:
   527                           	opt stack 0
   528  00008B                     	ds	1
   529  00008C                     _SigfoxScheduledInitTaskFlag:
   530                           	opt stack 0
   531  00008C                     	ds	1
   532  00008D                     _SigfoxScheduledPwrDownTaskFlag:
   533                           	opt stack 0
   534  00008D                     	ds	1
   535  00008E                     _SigfoxScheduledMsgAckTaskFlag:
   536                           	opt stack 0
   537  00008E                     	ds	1
   538  00008F                     _SigfoxScheduledMsgTaskFlag:
   539                           	opt stack 0
   540  00008F                     	ds	1
   541  000090                     _SigfoxMsgReceivedFlag:
   542                           	opt stack 0
   543  000090                     	ds	1
   544  000091                     _SigfoxCommManagerState:
   545                           	opt stack 0
   546  000091                     	ds	1
   547  000092                     _usartSemaphore:
   548                           	opt stack 0
   549  000092                     	ds	1
   550  000093                     _sysVarMainInput:
   551                           	opt stack 0
   552  000093                     	ds	1
   553  000094                     _sysVarGpsValidFlag:
   554                           	opt stack 0
   555  000094                     	ds	1
   556  000095                     _SigfoxTXBuffer:
   557                           	opt stack 0
   558  000095                     	ds	35
   559  0000B8                     _protDataShifter:
   560                           	opt stack 0
   561  0000B8                     	ds	12
   562                           tosu	equ	0xFFF
   563                           tosh	equ	0xFFE
   564                           tosl	equ	0xFFD
   565                           pclath	equ	0xFFA
   566                           tblptru	equ	0xFF8
   567                           tblptrh	equ	0xFF7
   568                           tblptrl	equ	0xFF6
   569                           tablat	equ	0xFF5
   570                           prodh	equ	0xFF4
   571                           prodl	equ	0xFF3
   572                           intcon	equ	0xFF2
   573                           intcon2	equ	0xFF1
   574                           postinc0	equ	0xFEE
   575                           wreg	equ	0xFE8
   576                           indf1	equ	0xFE7
   577                           postdec1	equ	0xFE5
   578                           fsr1h	equ	0xFE2
   579                           fsr1l	equ	0xFE1
   580                           indf2	equ	0xFDF
   581                           postinc2	equ	0xFDE
   582                           plusw2	equ	0xFDB
   583                           fsr2h	equ	0xFDA
   584                           fsr2l	equ	0xFD9
   585                           status	equ	0xFD8
   586                           
   587                           	psect	dataBANK0
   588  0000F0                     __pdataBANK0:
   589                           	opt stack 0
   590  0000F0                     _lastKnownResult:
   591                           	opt stack 0
   592  0000F0                     	ds	1
   593  0000F1                     _SigfoxTransactionResult:
   594                           	opt stack 0
   595  0000F1                     	ds	1
   596  0000F2                     _SFX_STATE:
   597                           	opt stack 0
   598  0000F2                     	ds	1
   599  0000F3                     _sysVarBattery:
   600                           	opt stack 0
   601  0000F3                     	ds	1
   602                           tosu	equ	0xFFF
   603                           tosh	equ	0xFFE
   604                           tosl	equ	0xFFD
   605                           pclath	equ	0xFFA
   606                           tblptru	equ	0xFF8
   607                           tblptrh	equ	0xFF7
   608                           tblptrl	equ	0xFF6
   609                           tablat	equ	0xFF5
   610                           prodh	equ	0xFF4
   611                           prodl	equ	0xFF3
   612                           intcon	equ	0xFF2
   613                           intcon2	equ	0xFF1
   614                           postinc0	equ	0xFEE
   615                           wreg	equ	0xFE8
   616                           indf1	equ	0xFE7
   617                           postdec1	equ	0xFE5
   618                           fsr1h	equ	0xFE2
   619                           fsr1l	equ	0xFE1
   620                           indf2	equ	0xFDF
   621                           postinc2	equ	0xFDE
   622                           plusw2	equ	0xFDB
   623                           fsr2h	equ	0xFDA
   624                           fsr2l	equ	0xFD9
   625                           status	equ	0xFD8
   626                           
   627                           	psect	bssBANK1
   628  000100                     __pbssBANK1:
   629                           	opt stack 0
   630  000100                     _SigfoxPayloadBuffer:
   631                           	opt stack 0
   632  000100                     	ds	25
   633  000119                     _SigfoxRXBuffer:
   634                           	opt stack 0
   635  000119                     	ds	22
   636                           tosu	equ	0xFFF
   637                           tosh	equ	0xFFE
   638                           tosl	equ	0xFFD
   639                           pclath	equ	0xFFA
   640                           tblptru	equ	0xFF8
   641                           tblptrh	equ	0xFF7
   642                           tblptrl	equ	0xFF6
   643                           tablat	equ	0xFF5
   644                           prodh	equ	0xFF4
   645                           prodl	equ	0xFF3
   646                           intcon	equ	0xFF2
   647                           intcon2	equ	0xFF1
   648                           postinc0	equ	0xFEE
   649                           wreg	equ	0xFE8
   650                           indf1	equ	0xFE7
   651                           postdec1	equ	0xFE5
   652                           fsr1h	equ	0xFE2
   653                           fsr1l	equ	0xFE1
   654                           indf2	equ	0xFDF
   655                           postinc2	equ	0xFDE
   656                           plusw2	equ	0xFDB
   657                           fsr2h	equ	0xFDA
   658                           fsr2l	equ	0xFD9
   659                           status	equ	0xFD8
   660                           
   661                           	psect	cstackBANK0
   662  0000C4                     __pcstackBANK0:
   663                           	opt stack 0
   664  0000C4                     EUSART2_Receive_ISR@auxVar:
   665                           	opt stack 0
   666  0000C4                     systemMainTimer@secondMultiplier:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x0
   670  0000C4                     	ds	1
   671  0000C5                     ??_INTERRUPT_InterruptManager:
   672                           
   673                           ; 1 bytes @ 0x1
   674  0000C5                     	ds	4
   675  0000C9                     ??_TMR0_Initialize:
   676  0000C9                     ?_strcpy:
   677                           	opt stack 0
   678  0000C9                     ?_strcat:
   679                           	opt stack 0
   680  0000C9                     ?_strlen:
   681                           	opt stack 0
   682  0000C9                     ?_strchr:
   683                           	opt stack 0
   684  0000C9                     ?___almod:
   685                           	opt stack 0
   686  0000C9                     SigfoxTaskNewTask@command:
   687                           	opt stack 0
   688  0000C9                     gpsTaskGetVarValidity@variableID:
   689                           	opt stack 0
   690  0000C9                     setLedStatus@status:
   691                           	opt stack 0
   692  0000C9                     powerTaskNewTask@command:
   693                           	opt stack 0
   694  0000C9                     powerTaskGetVarValidity@variableID:
   695                           	opt stack 0
   696  0000C9                     TMR0_SetInterruptHandler@InterruptHandler:
   697                           	opt stack 0
   698  0000C9                     SigfoxTaskLoadPayloadBuffer@rawData:
   699                           	opt stack 0
   700  0000C9                     strcat@to:
   701                           	opt stack 0
   702  0000C9                     strcpy@to:
   703                           	opt stack 0
   704  0000C9                     strchr@ptr:
   705                           	opt stack 0
   706  0000C9                     strlen@s:
   707                           	opt stack 0
   708  0000C9                     ProtocolAddFrameData@Data:
   709                           	opt stack 0
   710  0000C9                     ___almod@dividend:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x5
   714  0000C9                     	ds	1
   715  0000CA                     ProtocolGetValidity@variableID:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x6
   719  0000CA                     	ds	1
   720  0000CB                     ??_SigfoxTaskLoadPayloadBuffer:
   721  0000CB                     ProtocolGetValidity@taskResponse:
   722                           	opt stack 0
   723  0000CB                     strcat@from:
   724                           	opt stack 0
   725  0000CB                     strcpy@from:
   726                           	opt stack 0
   727  0000CB                     strchr@chr:
   728                           	opt stack 0
   729  0000CB                     strlen@cp:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x7
   733  0000CB                     	ds	2
   734  0000CD                     ?_strncmp:
   735                           	opt stack 0
   736  0000CD                     ProtocolAddFrameData@DataRepSize:
   737                           	opt stack 0
   738  0000CD                     _SigfoxTaskLoadPayloadBuffer$800:
   739                           	opt stack 0
   740  0000CD                     strcat@cp:
   741                           	opt stack 0
   742  0000CD                     strcpy@cp:
   743                           	opt stack 0
   744  0000CD                     strncmp@s1:
   745                           	opt stack 0
   746  0000CD                     ___almod@divisor:
   747                           	opt stack 0
   748                           
   749                           ; 4 bytes @ 0x9
   750  0000CD                     	ds	1
   751  0000CE                     ??_ProtocolAddFrameData:
   752                           
   753                           ; 1 bytes @ 0xA
   754  0000CE                     	ds	1
   755  0000CF                     _SigfoxTaskLoadPayloadBuffer$801:
   756                           	opt stack 0
   757  0000CF                     strncmp@s2:
   758                           	opt stack 0
   759  0000CF                     SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR:
   760                           	opt stack 0
   761                           
   762                           ; 4 bytes @ 0xB
   763  0000CF                     	ds	2
   764  0000D1                     SigfoxTaskLoadPayloadBuffer@payloadBufferPtr:
   765                           	opt stack 0
   766  0000D1                     ___almod@counter:
   767                           	opt stack 0
   768  0000D1                     strncmp@len:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0xD
   772  0000D1                     	ds	1
   773  0000D2                     SigfoxTaskLoadPayloadBuffer@buffer:
   774                           	opt stack 0
   775  0000D2                     ___almod@sign:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0xE
   779  0000D2                     	ds	1
   780  0000D3                     ??_strncmp:
   781  0000D3                     SigfoxCommandSelector@SFX_COMMAND_TAIL_STR:
   782                           	opt stack 0
   783                           
   784                           ; 2 bytes @ 0xF
   785  0000D3                     	ds	1
   786  0000D4                     ?_strstr:
   787                           	opt stack 0
   788  0000D4                     strstr@s1:
   789                           	opt stack 0
   790                           
   791                           ; 2 bytes @ 0x10
   792  0000D4                     	ds	1
   793  0000D5                     SigfoxCommandSelector@SigfoxRomCommandStrPtr:
   794                           	opt stack 0
   795                           
   796                           ; 2 bytes @ 0x11
   797  0000D5                     	ds	1
   798  0000D6                     strstr@s2:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x12
   802  0000D6                     	ds	1
   803  0000D7                     SigfoxCommandSelector@SigfoxCommand:
   804                           	opt stack 0
   805  0000D7                     ProtocolAddFrameData@toLeft:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x13
   809  0000D7                     	ds	1
   810  0000D8                     SigfoxCommManager@SigfoxCommand:
   811                           	opt stack 0
   812  0000D8                     SigfoxResponseParser@dumyPtr:
   813                           	opt stack 0
   814  0000D8                     ProtocolAddFrameData@longMask:
   815                           	opt stack 0
   816                           
   817                           ; 4 bytes @ 0x14
   818  0000D8                     	ds	2
   819  0000DA                     
   820                           ; 1 bytes @ 0x16
   821  0000DA                     	ds	1
   822  0000DB                     SigfoxTask@sigfoxInitCommandsROMList:
   823                           	opt stack 0
   824                           
   825                           ; 3 bytes @ 0x17
   826  0000DB                     	ds	1
   827  0000DC                     ProtocolAddFrameData@i:
   828                           	opt stack 0
   829                           
   830                           ; 1 bytes @ 0x18
   831  0000DC                     	ds	1
   832  0000DD                     ProtocolAddFrameData@bytes:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x19
   836  0000DD                     	ds	1
   837  0000DE                     ??_ProtocolTaskBuildFrame:
   838  0000DE                     SigfoxTask@SigfoxInitCommandPtr:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x1A
   842  0000DE                     	ds	2
   843  0000E0                     ProtocolTaskBuildFrame@EVENT:
   844                           	opt stack 0
   845  0000E0                     ProtocolTaskExecute@taskPointer:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x1C
   849  0000E0                     	ds	1
   850  0000E1                     ProtocolTaskBuildFrame@dataField:
   851                           	opt stack 0
   852                           
   853                           ; 4 bytes @ 0x1D
   854  0000E1                     	ds	1
   855  0000E2                     ProtocolTaskExecute@taskTimeOut:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x1E
   859  0000E2                     	ds	2
   860  0000E4                     ProtocolTaskExecute@timeOut:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x20
   864  0000E4                     	ds	1
   865  0000E5                     ProtocolTaskBuildFrame@totalBits:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x21
   869  0000E5                     	ds	1
   870  0000E6                     ProtocolTaskExecute@taskResult:
   871                           	opt stack 0
   872                           
   873                           ; 1 bytes @ 0x22
   874  0000E6                     	ds	1
   875  0000E7                     ProtocolTaskBuildFrame@dataSize:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x23
   879  0000E7                     	ds	1
   880  0000E8                     ProtocolTaskBuildFrame@protFrameDescPtr:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x24
   884  0000E8                     	ds	2
   885  0000EA                     main@taskResult:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x26
   889  0000EA                     	ds	1
   890                           tosu	equ	0xFFF
   891                           tosh	equ	0xFFE
   892                           tosl	equ	0xFFD
   893                           pclath	equ	0xFFA
   894                           tblptru	equ	0xFF8
   895                           tblptrh	equ	0xFF7
   896                           tblptrl	equ	0xFF6
   897                           tablat	equ	0xFF5
   898                           prodh	equ	0xFF4
   899                           prodl	equ	0xFF3
   900                           intcon	equ	0xFF2
   901                           intcon2	equ	0xFF1
   902                           postinc0	equ	0xFEE
   903                           wreg	equ	0xFE8
   904                           indf1	equ	0xFE7
   905                           postdec1	equ	0xFE5
   906                           fsr1h	equ	0xFE2
   907                           fsr1l	equ	0xFE1
   908                           indf2	equ	0xFDF
   909                           postinc2	equ	0xFDE
   910                           plusw2	equ	0xFDB
   911                           fsr2h	equ	0xFDA
   912                           fsr2l	equ	0xFD9
   913                           status	equ	0xFD8
   914                           
   915 ;;
   916 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   917 ;;
   918 ;; *************** function _main *****************
   919 ;; Defined at:
   920 ;;		line 69 in file "main.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;		None
   923 ;; Auto vars:     Size  Location     Type
   924 ;;  taskResult      1   38[BANK0 ] enum E6681
   925 ;; Return value:  Size  Location     Type
   926 ;;                  1    wreg      void 
   927 ;; Registers used:
   928 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 3F/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   934 ;;      Params:         0       0       0       0       0       0       0
   935 ;;      Locals:         0       1       0       0       0       0       0
   936 ;;      Temps:          0       0       0       0       0       0       0
   937 ;;      Totals:         0       1       0       0       0       0       0
   938 ;;Total ram usage:        1 bytes
   939 ;; Hardware stack levels required when called:   11
   940 ;; This function calls:
   941 ;;		_ProtocolTask
   942 ;;		_ProtocolTaskPowerDown
   943 ;;		_SYSTEM_Initialize
   944 ;;		_TMR0_SetInterruptHandler
   945 ;;		_setLedStatus
   946 ;; This function is called by:
   947 ;;		Startup code after reset
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951                           	psect	text0
   952  000F3E                     __ptext0:
   953                           	opt stack 0
   954  000F3E                     _main:
   955                           	opt stack 20
   956                           
   957                           ;main.c: 71: taskResult_t taskResult;
   958                           ;main.c: 73: SYSTEM_Initialize();
   959                           
   960                           ;incstack = 0
   961  000F3E  EC56  F00A         	call	_SYSTEM_Initialize	;wreg free
   962                           
   963                           ;main.c: 74: TMR0_SetInterruptHandler(systemMainTimer);
   964  000F42  0E96               	movlw	low _systemMainTimer
   965  000F44  0100               	movlb	0	; () banked
   966  000F46  6FC9               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
   967  000F48  0E12               	movlw	high _systemMainTimer
   968  000F4A  6FCA               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
   969  000F4C  EC96  F00A         	call	_TMR0_SetInterruptHandler	;wreg free
   970                           
   971                           ;main.c: 76: (INTCONbits.GIE = 1);
   972  000F50  8EF2               	bsf	intcon,7,c	;volatile
   973                           
   974                           ;main.c: 77: (INTCONbits.PEIE = 1);
   975  000F52  8CF2               	bsf	intcon,6,c	;volatile
   976                           
   977                           ;main.c: 78: TRISBbits.TRISB1 = 1;
   978  000F54  8293               	bsf	3987,1,c	;volatile
   979                           
   980                           ;main.c: 80: ProtocolTaskPowerDown();
   981  000F56  EC90  F00A         	call	_ProtocolTaskPowerDown	;wreg free
   982  000F5A                     l3365:
   983                           
   984                           ; BSR set to: 0
   985                           ;main.c: 83: setLedStatus(TASK_ON_COURSE);
   986  000F5A  0E01               	movlw	1
   987  000F5C  ECDA  F008         	call	_setLedStatus
   988                           
   989                           ; BSR set to: 0
   990                           ;main.c: 84: sessionTO = 50 + 360 + 60;
   991  000F60  0E01               	movlw	1
   992  000F62  6F77               	movwf	(_sessionTO+1)& (0+255),b
   993  000F64  0ED6               	movlw	214
   994  000F66  6F76               	movwf	_sessionTO& (0+255),b
   995  000F68                     l3369:
   996                           
   997                           ; BSR set to: 0
   998                           ;main.c: 86: taskResult = ProtocolTask();
   999  000F68  EC99  F005         	call	_ProtocolTask	;wreg free
  1000  000F6C  6FEA               	movwf	main@taskResult& (0+255),b
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;main.c: 87: if(!sessionTO){
  1004  000F6E  5176               	movf	_sessionTO& (0+255),w,b
  1005  000F70  1177               	iorwf	(_sessionTO+1)& (0+255),w,b
  1006  000F72  E002               	bz	l3377
  1007                           
  1008                           ; BSR set to: 0
  1009                           ;main.c: 89: }
  1010                           ;main.c: 90: }while(taskResult!=TASK_NO_SENSOR_FOUND);
  1011  000F74  51EA               	movf	main@taskResult& (0+255),w,b
  1012  000F76  E1F8               	bnz	l3369
  1013  000F78                     l3377:
  1014                           
  1015                           ; BSR set to: 0
  1016                           ;main.c: 92: if(sysVarGpsValidFlag){
  1017  000F78  5194               	movf	_sysVarGpsValidFlag& (0+255),w,b
  1018  000F7A  E009               	bz	l3385
  1019                           
  1020                           ; BSR set to: 0
  1021                           ;main.c: 93: setLedStatus(TASK_DATA_READY);
  1022  000F7C  0E02               	movlw	2
  1023  000F7E  ECDA  F008         	call	_setLedStatus
  1024                           
  1025                           ; BSR set to: 0
  1026                           ;main.c: 94: sessionTO = 15;
  1027  000F82  6B77               	clrf	(_sessionTO+1)& (0+255),b
  1028  000F84  0E0F               	movlw	15
  1029  000F86  6F76               	movwf	_sessionTO& (0+255),b
  1030  000F88                     l3383:
  1031                           
  1032                           ; BSR set to: 0
  1033  000F88  5176               	movf	_sessionTO& (0+255),w,b
  1034  000F8A  1177               	iorwf	(_sessionTO+1)& (0+255),w,b
  1035  000F8C  E1FD               	bnz	l3383
  1036  000F8E                     l3385:
  1037                           
  1038                           ; BSR set to: 0
  1039                           ;main.c: 96: }
  1040                           ;main.c: 97: sessionTO = 60;
  1041  000F8E  6B77               	clrf	(_sessionTO+1)& (0+255),b
  1042  000F90  0E3C               	movlw	60
  1043  000F92  6F76               	movwf	_sessionTO& (0+255),b
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;main.c: 99: setLedStatus(TASK_NO_SENSOR_FOUND);
  1047  000F94  0E00               	movlw	0
  1048  000F96  ECDA  F008         	call	_setLedStatus
  1049                           
  1050                           ;main.c: 100: while (sessionTO){
  1051  000F9A  D001               	goto	l3389
  1052  000F9C                     l596:
  1053                           
  1054                           ; BSR set to: 0
  1055  000F9C  0004               	clrwdt		;# 
  1056  000F9E                     l3389:
  1057  000F9E  0100               	movlb	0	; () banked
  1058  000FA0  5176               	movf	_sessionTO& (0+255),w,b
  1059  000FA2  1177               	iorwf	(_sessionTO+1)& (0+255),w,b
  1060  000FA4  E0DA               	bz	l3365
  1061  000FA6  D7FA               	goto	l596
  1062  000FA8                     __end_of_main:
  1063                           	opt stack 0
  1064                           tosu	equ	0xFFF
  1065                           tosh	equ	0xFFE
  1066                           tosl	equ	0xFFD
  1067                           pclath	equ	0xFFA
  1068                           tblptru	equ	0xFF8
  1069                           tblptrh	equ	0xFF7
  1070                           tblptrl	equ	0xFF6
  1071                           tablat	equ	0xFF5
  1072                           prodh	equ	0xFF4
  1073                           prodl	equ	0xFF3
  1074                           intcon	equ	0xFF2
  1075                           intcon2	equ	0xFF1
  1076                           postinc0	equ	0xFEE
  1077                           wreg	equ	0xFE8
  1078                           indf1	equ	0xFE7
  1079                           postdec1	equ	0xFE5
  1080                           fsr1h	equ	0xFE2
  1081                           fsr1l	equ	0xFE1
  1082                           indf2	equ	0xFDF
  1083                           postinc2	equ	0xFDE
  1084                           plusw2	equ	0xFDB
  1085                           fsr2h	equ	0xFDA
  1086                           fsr2l	equ	0xFD9
  1087                           status	equ	0xFD8
  1088                           
  1089 ;; *************** function _setLedStatus *****************
  1090 ;; Defined at:
  1091 ;;		line 44 in file "main.c"
  1092 ;; Parameters:    Size  Location     Type
  1093 ;;  status          1    wreg     enum E6681
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;  status          1    5[BANK0 ] enum E6681
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  1    wreg      void 
  1098 ;; Registers used:
  1099 ;;		wreg, status,2, status,0
  1100 ;; Tracked objects:
  1101 ;;		On entry : 0/0
  1102 ;;		On exit  : 3F/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1105 ;;      Params:         0       0       0       0       0       0       0
  1106 ;;      Locals:         0       1       0       0       0       0       0
  1107 ;;      Temps:          0       0       0       0       0       0       0
  1108 ;;      Totals:         0       1       0       0       0       0       0
  1109 ;;Total ram usage:        1 bytes
  1110 ;; Hardware stack levels used:    1
  1111 ;; Hardware stack levels required when called:    5
  1112 ;; This function calls:
  1113 ;;		Nothing
  1114 ;; This function is called by:
  1115 ;;		_main
  1116 ;; This function uses a non-reentrant model
  1117 ;;
  1118                           
  1119                           	psect	text1
  1120  0011B4                     __ptext1:
  1121                           	opt stack 0
  1122  0011B4                     _setLedStatus:
  1123                           	opt stack 25
  1124                           
  1125                           ; BSR set to: 0
  1126                           ;incstack = 0
  1127                           ;setLedStatus@status stored from wreg
  1128  0011B4  0100               	movlb	0	; () banked
  1129  0011B6  6FC9               	movwf	setLedStatus@status& (0+255),b
  1130                           
  1131                           ;main.c: 45: if(status != lastKnownResult){
  1132  0011B8  19F0               	xorwf	_lastKnownResult& (0+255),w,b
  1133  0011BA  E10A               	bnz	l2529
  1134  0011BC  D015               	goto	l2531
  1135  0011BE                     l2519:
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;main.c: 51: statusIndTimer = 1;
  1139  0011BE  0E01               	movlw	1
  1140  0011C0  D005               	goto	L4
  1141  0011C2                     l2521:
  1142                           
  1143                           ; BSR set to: 0
  1144                           ;main.c: 54: statusIndTimer = 2;
  1145  0011C2  0E02               	movlw	2
  1146  0011C4  D003               	goto	L4
  1147  0011C6                     l2523:
  1148                           
  1149                           ; BSR set to: 0
  1150                           ;main.c: 57: statusIndTimer = 4;
  1151  0011C6  0E04               	movlw	4
  1152  0011C8  D001               	goto	L4
  1153  0011CA                     l2525:
  1154                           
  1155                           ; BSR set to: 0
  1156                           ;main.c: 60: statusIndTimer = 15;
  1157  0011CA  0E0F               	movlw	15
  1158  0011CC                     L4:
  1159  0011CC  6F85               	movwf	_statusIndTimer& (0+255),b
  1160                           
  1161                           ;main.c: 61: break;
  1162  0011CE  D009               	goto	l582
  1163  0011D0                     l2529:
  1164                           
  1165                           ; BSR set to: 0
  1166  0011D0  51C9               	movf	setLedStatus@status& (0+255),w,b
  1167                           
  1168                           ; Switch size 1, requested type "space"
  1169                           ; Number of cases is 4, Range of values is 0 to 4
  1170                           ; switch strategies available:
  1171                           ; Name         Instructions Cycles
  1172                           ; simple_byte           13     7 (average)
  1173                           ;	Chosen strategy is simple_byte
  1174  0011D2  E0FB               	bz	l2525
  1175  0011D4  0A01               	xorlw	1	; case 1
  1176  0011D6  E0F3               	bz	l2519
  1177  0011D8  0A03               	xorlw	3	; case 2
  1178  0011DA  E0F3               	bz	l2521
  1179  0011DC  0A06               	xorlw	6	; case 4
  1180  0011DE  E0F3               	bz	l2523
  1181  0011E0  D7F4               	goto	l2525
  1182  0011E2                     l582:
  1183                           
  1184                           ; BSR set to: 0
  1185  0011E2  8489               	bsf	3977,2,c	;volatile
  1186                           
  1187                           ; BSR set to: 0
  1188                           ;main.c: 64: ledTimer = statusIndTimer;
  1189  0011E4  C085  F084         	movff	_statusIndTimer,_ledTimer
  1190  0011E8                     l2531:
  1191                           
  1192                           ; BSR set to: 0
  1193                           ;main.c: 65: }
  1194                           ;main.c: 66: lastKnownResult = status;
  1195  0011E8  C0C9  F0F0         	movff	setLedStatus@status,_lastKnownResult
  1196                           
  1197                           ; BSR set to: 0
  1198  0011EC  0012               	return		;funcret
  1199  0011EE                     __end_of_setLedStatus:
  1200                           	opt stack 0
  1201                           tosu	equ	0xFFF
  1202                           tosh	equ	0xFFE
  1203                           tosl	equ	0xFFD
  1204                           pclath	equ	0xFFA
  1205                           tblptru	equ	0xFF8
  1206                           tblptrh	equ	0xFF7
  1207                           tblptrl	equ	0xFF6
  1208                           tablat	equ	0xFF5
  1209                           prodh	equ	0xFF4
  1210                           prodl	equ	0xFF3
  1211                           intcon	equ	0xFF2
  1212                           intcon2	equ	0xFF1
  1213                           postinc0	equ	0xFEE
  1214                           wreg	equ	0xFE8
  1215                           indf1	equ	0xFE7
  1216                           postdec1	equ	0xFE5
  1217                           fsr1h	equ	0xFE2
  1218                           fsr1l	equ	0xFE1
  1219                           indf2	equ	0xFDF
  1220                           postinc2	equ	0xFDE
  1221                           plusw2	equ	0xFDB
  1222                           fsr2h	equ	0xFDA
  1223                           fsr2l	equ	0xFD9
  1224                           status	equ	0xFD8
  1225                           
  1226 ;; *************** function _TMR0_SetInterruptHandler *****************
  1227 ;; Defined at:
  1228 ;;		line 121 in file "mcc_generated_files/tmr0.c"
  1229 ;; Parameters:    Size  Location     Type
  1230 ;;  InterruptHan    2    5[BANK0 ] PTR void 
  1231 ;;		 -> systemMainTimer(1), 
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;		None
  1234 ;; Return value:  Size  Location     Type
  1235 ;;                  1    wreg      void 
  1236 ;; Registers used:
  1237 ;;		wreg, status,2, status,0
  1238 ;; Tracked objects:
  1239 ;;		On entry : 3F/0
  1240 ;;		On exit  : 0/0
  1241 ;;		Unchanged: 0/0
  1242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1243 ;;      Params:         0       2       0       0       0       0       0
  1244 ;;      Locals:         0       0       0       0       0       0       0
  1245 ;;      Temps:          0       0       0       0       0       0       0
  1246 ;;      Totals:         0       2       0       0       0       0       0
  1247 ;;Total ram usage:        2 bytes
  1248 ;; Hardware stack levels used:    1
  1249 ;; Hardware stack levels required when called:    5
  1250 ;; This function calls:
  1251 ;;		Nothing
  1252 ;; This function is called by:
  1253 ;;		_main
  1254 ;; This function uses a non-reentrant model
  1255 ;;
  1256                           
  1257                           	psect	text2
  1258  00152C                     __ptext2:
  1259                           	opt stack 0
  1260  00152C                     _TMR0_SetInterruptHandler:
  1261                           	opt stack 25
  1262                           
  1263                           ;tmr0.c: 122: TMR0_InterruptHandler = InterruptHandler;
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;incstack = 0
  1267  00152C  C0C9  F0ED         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  1268  001530  C0CA  F0EE         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  1269  001534  0012               	return		;funcret
  1270  001536                     __end_of_TMR0_SetInterruptHandler:
  1271                           	opt stack 0
  1272                           tosu	equ	0xFFF
  1273                           tosh	equ	0xFFE
  1274                           tosl	equ	0xFFD
  1275                           pclath	equ	0xFFA
  1276                           tblptru	equ	0xFF8
  1277                           tblptrh	equ	0xFF7
  1278                           tblptrl	equ	0xFF6
  1279                           tablat	equ	0xFF5
  1280                           prodh	equ	0xFF4
  1281                           prodl	equ	0xFF3
  1282                           intcon	equ	0xFF2
  1283                           intcon2	equ	0xFF1
  1284                           postinc0	equ	0xFEE
  1285                           wreg	equ	0xFE8
  1286                           indf1	equ	0xFE7
  1287                           postdec1	equ	0xFE5
  1288                           fsr1h	equ	0xFE2
  1289                           fsr1l	equ	0xFE1
  1290                           indf2	equ	0xFDF
  1291                           postinc2	equ	0xFDE
  1292                           plusw2	equ	0xFDB
  1293                           fsr2h	equ	0xFDA
  1294                           fsr2l	equ	0xFD9
  1295                           status	equ	0xFD8
  1296                           
  1297 ;; *************** function _SYSTEM_Initialize *****************
  1298 ;; Defined at:
  1299 ;;		line 105 in file "mcc_generated_files/mcc.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, status,2, status,0, cstack
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1313 ;;      Params:         0       0       0       0       0       0       0
  1314 ;;      Locals:         0       0       0       0       0       0       0
  1315 ;;      Temps:          0       0       0       0       0       0       0
  1316 ;;      Totals:         0       0       0       0       0       0       0
  1317 ;;Total ram usage:        0 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:    7
  1320 ;; This function calls:
  1321 ;;		_ADC_Initialize
  1322 ;;		_INTERRUPT_Initialize
  1323 ;;		_OSCILLATOR_Initialize
  1324 ;;		_PIN_MANAGER_Initialize
  1325 ;;		_TMR0_Initialize
  1326 ;; This function is called by:
  1327 ;;		_main
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           	psect	text3
  1332  0014AC                     __ptext3:
  1333                           	opt stack 0
  1334  0014AC                     _SYSTEM_Initialize:
  1335                           	opt stack 23
  1336                           
  1337                           ;mcc.c: 108: INTERRUPT_Initialize();
  1338                           
  1339                           ;incstack = 0
  1340  0014AC  ECAD  F00A         	call	_INTERRUPT_Initialize	;wreg free
  1341                           
  1342                           ;mcc.c: 109: PIN_MANAGER_Initialize();
  1343  0014B0  ECFE  F009         	call	_PIN_MANAGER_Initialize	;wreg free
  1344                           
  1345                           ; BSR set to: 15
  1346                           ;mcc.c: 110: OSCILLATOR_Initialize();
  1347  0014B4  EC7B  F00A         	call	_OSCILLATOR_Initialize	;wreg free
  1348                           
  1349                           ;mcc.c: 111: ADC_Initialize();
  1350  0014B8  ECA3  F00A         	call	_ADC_Initialize	;wreg free
  1351                           
  1352                           ; BSR set to: 15
  1353                           ;mcc.c: 112: TMR0_Initialize();
  1354  0014BC  EF94  F009         	goto	_TMR0_Initialize	;wreg free
  1355  0014C0                     __end_of_SYSTEM_Initialize:
  1356                           	opt stack 0
  1357                           tosu	equ	0xFFF
  1358                           tosh	equ	0xFFE
  1359                           tosl	equ	0xFFD
  1360                           pclath	equ	0xFFA
  1361                           tblptru	equ	0xFF8
  1362                           tblptrh	equ	0xFF7
  1363                           tblptrl	equ	0xFF6
  1364                           tablat	equ	0xFF5
  1365                           prodh	equ	0xFF4
  1366                           prodl	equ	0xFF3
  1367                           intcon	equ	0xFF2
  1368                           intcon2	equ	0xFF1
  1369                           postinc0	equ	0xFEE
  1370                           wreg	equ	0xFE8
  1371                           indf1	equ	0xFE7
  1372                           postdec1	equ	0xFE5
  1373                           fsr1h	equ	0xFE2
  1374                           fsr1l	equ	0xFE1
  1375                           indf2	equ	0xFDF
  1376                           postinc2	equ	0xFDE
  1377                           plusw2	equ	0xFDB
  1378                           fsr2h	equ	0xFDA
  1379                           fsr2l	equ	0xFD9
  1380                           status	equ	0xFD8
  1381                           
  1382 ;; *************** function _TMR0_Initialize *****************
  1383 ;; Defined at:
  1384 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;		None
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;		None
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  1    wreg      void 
  1391 ;; Registers used:
  1392 ;;		wreg, status,2, status,0, cstack
  1393 ;; Tracked objects:
  1394 ;;		On entry : 3F/F
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1398 ;;      Params:         0       0       0       0       0       0       0
  1399 ;;      Locals:         0       0       0       0       0       0       0
  1400 ;;      Temps:          0       2       0       0       0       0       0
  1401 ;;      Totals:         0       2       0       0       0       0       0
  1402 ;;Total ram usage:        2 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; Hardware stack levels required when called:    6
  1405 ;; This function calls:
  1406 ;;		_TMR0_StartTimer
  1407 ;; This function is called by:
  1408 ;;		_SYSTEM_Initialize
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           	psect	text4
  1413  001328                     __ptext4:
  1414                           	opt stack 0
  1415  001328                     _TMR0_Initialize:
  1416                           	opt stack 23
  1417                           
  1418                           ;tmr0.c: 71: T0CON = 0x13;
  1419                           
  1420                           ;incstack = 0
  1421  001328  0E13               	movlw	19
  1422  00132A  6ED5               	movwf	4053,c	;volatile
  1423                           
  1424                           ;tmr0.c: 74: TMR0H = 0x85;
  1425  00132C  0E85               	movlw	133
  1426  00132E  6ED7               	movwf	4055,c	;volatile
  1427                           
  1428                           ;tmr0.c: 77: TMR0L = 0xED;
  1429  001330  0EED               	movlw	237
  1430  001332  6ED6               	movwf	4054,c	;volatile
  1431                           
  1432                           ;tmr0.c: 80: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  1433  001334  50D6               	movf	4054,w,c	;volatile
  1434  001336  CFD7 F0C9          	movff	4055,??_TMR0_Initialize	;volatile
  1435  00133A  0100               	movlb	0	; () banked
  1436  00133C  6BCA               	clrf	(??_TMR0_Initialize+1)& (0+255),b
  1437  00133E  C0C9  F0CA         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  1438  001342  6BC9               	clrf	??_TMR0_Initialize& (0+255),b
  1439  001344  11C9               	iorwf	??_TMR0_Initialize& (0+255),w,b
  1440  001346  6FEB               	movwf	_timer0ReloadVal& (0+255),b	;volatile
  1441  001348  51CA               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
  1442  00134A  6FEC               	movwf	(_timer0ReloadVal+1)& (0+255),b	;volatile
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;tmr0.c: 83: INTCONbits.TMR0IF = 0;
  1446  00134C  94F2               	bcf	intcon,2,c	;volatile
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;tmr0.c: 86: INTCONbits.TMR0IE = 1;
  1450  00134E  8AF2               	bsf	intcon,5,c	;volatile
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;tmr0.c: 92: TMR0_StartTimer();
  1454  001350  EFAB  F00A         	goto	_TMR0_StartTimer	;wreg free
  1455  001354                     __end_of_TMR0_Initialize:
  1456                           	opt stack 0
  1457                           tosu	equ	0xFFF
  1458                           tosh	equ	0xFFE
  1459                           tosl	equ	0xFFD
  1460                           pclath	equ	0xFFA
  1461                           tblptru	equ	0xFF8
  1462                           tblptrh	equ	0xFF7
  1463                           tblptrl	equ	0xFF6
  1464                           tablat	equ	0xFF5
  1465                           prodh	equ	0xFF4
  1466                           prodl	equ	0xFF3
  1467                           intcon	equ	0xFF2
  1468                           intcon2	equ	0xFF1
  1469                           postinc0	equ	0xFEE
  1470                           wreg	equ	0xFE8
  1471                           indf1	equ	0xFE7
  1472                           postdec1	equ	0xFE5
  1473                           fsr1h	equ	0xFE2
  1474                           fsr1l	equ	0xFE1
  1475                           indf2	equ	0xFDF
  1476                           postinc2	equ	0xFDE
  1477                           plusw2	equ	0xFDB
  1478                           fsr2h	equ	0xFDA
  1479                           fsr2l	equ	0xFD9
  1480                           status	equ	0xFD8
  1481                           
  1482 ;; *************** function _TMR0_StartTimer *****************
  1483 ;; Defined at:
  1484 ;;		line 95 in file "mcc_generated_files/tmr0.c"
  1485 ;; Parameters:    Size  Location     Type
  1486 ;;		None
  1487 ;; Auto vars:     Size  Location     Type
  1488 ;;		None
  1489 ;; Return value:  Size  Location     Type
  1490 ;;                  1    wreg      void 
  1491 ;; Registers used:
  1492 ;;		None
  1493 ;; Tracked objects:
  1494 ;;		On entry : 3F/0
  1495 ;;		On exit  : 0/0
  1496 ;;		Unchanged: 0/0
  1497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1498 ;;      Params:         0       0       0       0       0       0       0
  1499 ;;      Locals:         0       0       0       0       0       0       0
  1500 ;;      Temps:          0       0       0       0       0       0       0
  1501 ;;      Totals:         0       0       0       0       0       0       0
  1502 ;;Total ram usage:        0 bytes
  1503 ;; Hardware stack levels used:    1
  1504 ;; Hardware stack levels required when called:    5
  1505 ;; This function calls:
  1506 ;;		Nothing
  1507 ;; This function is called by:
  1508 ;;		_TMR0_Initialize
  1509 ;; This function uses a non-reentrant model
  1510 ;;
  1511                           
  1512                           	psect	text5
  1513  001556                     __ptext5:
  1514                           	opt stack 0
  1515  001556                     _TMR0_StartTimer:
  1516                           	opt stack 23
  1517                           
  1518                           ;tmr0.c: 98: T0CONbits.TMR0ON = 1;
  1519                           
  1520                           ;incstack = 0
  1521  001556  8ED5               	bsf	4053,7,c	;volatile
  1522  001558  0012               	return		;funcret
  1523  00155A                     __end_of_TMR0_StartTimer:
  1524                           	opt stack 0
  1525                           tosu	equ	0xFFF
  1526                           tosh	equ	0xFFE
  1527                           tosl	equ	0xFFD
  1528                           pclath	equ	0xFFA
  1529                           tblptru	equ	0xFF8
  1530                           tblptrh	equ	0xFF7
  1531                           tblptrl	equ	0xFF6
  1532                           tablat	equ	0xFF5
  1533                           prodh	equ	0xFF4
  1534                           prodl	equ	0xFF3
  1535                           intcon	equ	0xFF2
  1536                           intcon2	equ	0xFF1
  1537                           postinc0	equ	0xFEE
  1538                           wreg	equ	0xFE8
  1539                           indf1	equ	0xFE7
  1540                           postdec1	equ	0xFE5
  1541                           fsr1h	equ	0xFE2
  1542                           fsr1l	equ	0xFE1
  1543                           indf2	equ	0xFDF
  1544                           postinc2	equ	0xFDE
  1545                           plusw2	equ	0xFDB
  1546                           fsr2h	equ	0xFDA
  1547                           fsr2l	equ	0xFD9
  1548                           status	equ	0xFD8
  1549                           
  1550 ;; *************** function _PIN_MANAGER_Initialize *****************
  1551 ;; Defined at:
  1552 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;		None
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;		None
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  1    wreg      void 
  1559 ;; Registers used:
  1560 ;;		wreg, status,2
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 3F/F
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1566 ;;      Params:         0       0       0       0       0       0       0
  1567 ;;      Locals:         0       0       0       0       0       0       0
  1568 ;;      Temps:          0       0       0       0       0       0       0
  1569 ;;      Totals:         0       0       0       0       0       0       0
  1570 ;;Total ram usage:        0 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    5
  1573 ;; This function calls:
  1574 ;;		Nothing
  1575 ;; This function is called by:
  1576 ;;		_SYSTEM_Initialize
  1577 ;; This function uses a non-reentrant model
  1578 ;;
  1579                           
  1580                           	psect	text6
  1581  0013FC                     __ptext6:
  1582                           	opt stack 0
  1583  0013FC                     _PIN_MANAGER_Initialize:
  1584                           	opt stack 24
  1585                           
  1586                           ;pin_manager.c: 56: LATA = 0x00;
  1587                           
  1588                           ;incstack = 0
  1589  0013FC  6A89               	clrf	3977,c	;volatile
  1590                           
  1591                           ;pin_manager.c: 57: LATB = 0x65;
  1592  0013FE  0E65               	movlw	101
  1593  001400  6E8A               	movwf	3978,c	;volatile
  1594                           
  1595                           ;pin_manager.c: 58: LATC = 0x40;
  1596  001402  0E40               	movlw	64
  1597  001404  6E8B               	movwf	3979,c	;volatile
  1598                           
  1599                           ;pin_manager.c: 63: TRISA = 0x23;
  1600  001406  0E23               	movlw	35
  1601  001408  6E92               	movwf	3986,c	;volatile
  1602                           
  1603                           ;pin_manager.c: 64: TRISB = 0x98;
  1604  00140A  0E98               	movlw	152
  1605  00140C  6E93               	movwf	3987,c	;volatile
  1606                           
  1607                           ;pin_manager.c: 65: TRISC = 0x98;
  1608  00140E  6E94               	movwf	3988,c	;volatile
  1609                           
  1610                           ;pin_manager.c: 70: ANSELC = 0x00;
  1611  001410  010F               	movlb	15	; () banked
  1612  001412  6B3A               	clrf	58,b	;volatile
  1613                           
  1614                           ; BSR set to: 15
  1615                           ;pin_manager.c: 71: ANSELB = 0x00;
  1616  001414  6B39               	clrf	57,b	;volatile
  1617                           
  1618                           ;pin_manager.c: 72: ANSELA = 0x23;
  1619  001416  0E23               	movlw	35
  1620  001418  6F38               	movwf	56,b	;volatile
  1621                           
  1622                           ; BSR set to: 15
  1623                           ;pin_manager.c: 77: WPUB = 0x00;
  1624  00141A  6A61               	clrf	3937,c	;volatile
  1625                           
  1626                           ; BSR set to: 15
  1627                           ;pin_manager.c: 78: INTCON2bits.nRBPU = 0;
  1628  00141C  9EF1               	bcf	intcon2,7,c	;volatile
  1629                           
  1630                           ; BSR set to: 15
  1631  00141E  0012               	return		;funcret
  1632  001420                     __end_of_PIN_MANAGER_Initialize:
  1633                           	opt stack 0
  1634                           tosu	equ	0xFFF
  1635                           tosh	equ	0xFFE
  1636                           tosl	equ	0xFFD
  1637                           pclath	equ	0xFFA
  1638                           tblptru	equ	0xFF8
  1639                           tblptrh	equ	0xFF7
  1640                           tblptrl	equ	0xFF6
  1641                           tablat	equ	0xFF5
  1642                           prodh	equ	0xFF4
  1643                           prodl	equ	0xFF3
  1644                           intcon	equ	0xFF2
  1645                           intcon2	equ	0xFF1
  1646                           postinc0	equ	0xFEE
  1647                           wreg	equ	0xFE8
  1648                           indf1	equ	0xFE7
  1649                           postdec1	equ	0xFE5
  1650                           fsr1h	equ	0xFE2
  1651                           fsr1l	equ	0xFE1
  1652                           indf2	equ	0xFDF
  1653                           postinc2	equ	0xFDE
  1654                           plusw2	equ	0xFDB
  1655                           fsr2h	equ	0xFDA
  1656                           fsr2l	equ	0xFD9
  1657                           status	equ	0xFD8
  1658                           
  1659 ;; *************** function _OSCILLATOR_Initialize *****************
  1660 ;; Defined at:
  1661 ;;		line 117 in file "mcc_generated_files/mcc.c"
  1662 ;; Parameters:    Size  Location     Type
  1663 ;;		None
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;		None
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  1    wreg      void 
  1668 ;; Registers used:
  1669 ;;		wreg, status,2
  1670 ;; Tracked objects:
  1671 ;;		On entry : 3F/F
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1675 ;;      Params:         0       0       0       0       0       0       0
  1676 ;;      Locals:         0       0       0       0       0       0       0
  1677 ;;      Temps:          0       0       0       0       0       0       0
  1678 ;;      Totals:         0       0       0       0       0       0       0
  1679 ;;Total ram usage:        0 bytes
  1680 ;; Hardware stack levels used:    1
  1681 ;; Hardware stack levels required when called:    5
  1682 ;; This function calls:
  1683 ;;		Nothing
  1684 ;; This function is called by:
  1685 ;;		_SYSTEM_Initialize
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689                           	psect	text7
  1690  0014F6                     __ptext7:
  1691                           	opt stack 0
  1692  0014F6                     _OSCILLATOR_Initialize:
  1693                           	opt stack 24
  1694                           
  1695                           ;mcc.c: 120: OSCCON = 0x50;
  1696                           
  1697                           ; BSR set to: 15
  1698                           ;incstack = 0
  1699  0014F6  0E50               	movlw	80
  1700  0014F8  6ED3               	movwf	4051,c	;volatile
  1701                           
  1702                           ;mcc.c: 122: OSCCON2 = 0x04;
  1703  0014FA  0E04               	movlw	4
  1704  0014FC  6ED2               	movwf	4050,c	;volatile
  1705                           
  1706                           ;mcc.c: 124: OSCTUNE = 0x80;
  1707  0014FE  0E80               	movlw	128
  1708  001500  6E9B               	movwf	3995,c	;volatile
  1709  001502  0C80               	retlw	128	;funcret
  1710  001504                     __end_of_OSCILLATOR_Initialize:
  1711                           	opt stack 0
  1712                           tosu	equ	0xFFF
  1713                           tosh	equ	0xFFE
  1714                           tosl	equ	0xFFD
  1715                           pclath	equ	0xFFA
  1716                           tblptru	equ	0xFF8
  1717                           tblptrh	equ	0xFF7
  1718                           tblptrl	equ	0xFF6
  1719                           tablat	equ	0xFF5
  1720                           prodh	equ	0xFF4
  1721                           prodl	equ	0xFF3
  1722                           intcon	equ	0xFF2
  1723                           intcon2	equ	0xFF1
  1724                           postinc0	equ	0xFEE
  1725                           wreg	equ	0xFE8
  1726                           indf1	equ	0xFE7
  1727                           postdec1	equ	0xFE5
  1728                           fsr1h	equ	0xFE2
  1729                           fsr1l	equ	0xFE1
  1730                           indf2	equ	0xFDF
  1731                           postinc2	equ	0xFDE
  1732                           plusw2	equ	0xFDB
  1733                           fsr2h	equ	0xFDA
  1734                           fsr2l	equ	0xFD9
  1735                           status	equ	0xFD8
  1736                           
  1737 ;; *************** function _INTERRUPT_Initialize *****************
  1738 ;; Defined at:
  1739 ;;		line 56 in file "mcc_generated_files/interrupt_manager.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;		None
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;		None
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		None
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1753 ;;      Params:         0       0       0       0       0       0       0
  1754 ;;      Locals:         0       0       0       0       0       0       0
  1755 ;;      Temps:          0       0       0       0       0       0       0
  1756 ;;      Totals:         0       0       0       0       0       0       0
  1757 ;;Total ram usage:        0 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    5
  1760 ;; This function calls:
  1761 ;;		Nothing
  1762 ;; This function is called by:
  1763 ;;		_SYSTEM_Initialize
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text8
  1768  00155A                     __ptext8:
  1769                           	opt stack 0
  1770  00155A                     _INTERRUPT_Initialize:
  1771                           	opt stack 24
  1772                           
  1773                           ;interrupt_manager.c: 59: RCONbits.IPEN = 0;
  1774                           
  1775                           ;incstack = 0
  1776  00155A  9ED0               	bcf	4048,7,c	;volatile
  1777  00155C  0012               	return		;funcret
  1778  00155E                     __end_of_INTERRUPT_Initialize:
  1779                           	opt stack 0
  1780                           tosu	equ	0xFFF
  1781                           tosh	equ	0xFFE
  1782                           tosl	equ	0xFFD
  1783                           pclath	equ	0xFFA
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           prodh	equ	0xFF4
  1789                           prodl	equ	0xFF3
  1790                           intcon	equ	0xFF2
  1791                           intcon2	equ	0xFF1
  1792                           postinc0	equ	0xFEE
  1793                           wreg	equ	0xFE8
  1794                           indf1	equ	0xFE7
  1795                           postdec1	equ	0xFE5
  1796                           fsr1h	equ	0xFE2
  1797                           fsr1l	equ	0xFE1
  1798                           indf2	equ	0xFDF
  1799                           postinc2	equ	0xFDE
  1800                           plusw2	equ	0xFDB
  1801                           fsr2h	equ	0xFDA
  1802                           fsr2l	equ	0xFD9
  1803                           status	equ	0xFD8
  1804                           
  1805 ;; *************** function _ADC_Initialize *****************
  1806 ;; Defined at:
  1807 ;;		line 59 in file "mcc_generated_files/adc.c"
  1808 ;; Parameters:    Size  Location     Type
  1809 ;;		None
  1810 ;; Auto vars:     Size  Location     Type
  1811 ;;		None
  1812 ;; Return value:  Size  Location     Type
  1813 ;;                  1    wreg      void 
  1814 ;; Registers used:
  1815 ;;		None
  1816 ;; Tracked objects:
  1817 ;;		On entry : 0/F
  1818 ;;		On exit  : 3F/F
  1819 ;;		Unchanged: 0/0
  1820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1821 ;;      Params:         0       0       0       0       0       0       0
  1822 ;;      Locals:         0       0       0       0       0       0       0
  1823 ;;      Temps:          0       0       0       0       0       0       0
  1824 ;;      Totals:         0       0       0       0       0       0       0
  1825 ;;Total ram usage:        0 bytes
  1826 ;; Hardware stack levels used:    1
  1827 ;; Hardware stack levels required when called:    5
  1828 ;; This function calls:
  1829 ;;		Nothing
  1830 ;; This function is called by:
  1831 ;;		_SYSTEM_Initialize
  1832 ;; This function uses a non-reentrant model
  1833 ;;
  1834                           
  1835                           	psect	text9
  1836  001546                     __ptext9:
  1837                           	opt stack 0
  1838  001546                     _ADC_Initialize:
  1839                           	opt stack 24
  1840                           
  1841                           ;adc.c: 62: PMD2bits.ADCMD = 1;
  1842                           
  1843                           ;incstack = 0
  1844  001546  010F               	movlb	15	; () banked
  1845  001548  813D               	bsf	61,0,b	;volatile
  1846                           
  1847                           ; BSR set to: 15
  1848  00154A  0012               	return		;funcret
  1849  00154C                     __end_of_ADC_Initialize:
  1850                           	opt stack 0
  1851                           tosu	equ	0xFFF
  1852                           tosh	equ	0xFFE
  1853                           tosl	equ	0xFFD
  1854                           pclath	equ	0xFFA
  1855                           tblptru	equ	0xFF8
  1856                           tblptrh	equ	0xFF7
  1857                           tblptrl	equ	0xFF6
  1858                           tablat	equ	0xFF5
  1859                           prodh	equ	0xFF4
  1860                           prodl	equ	0xFF3
  1861                           intcon	equ	0xFF2
  1862                           intcon2	equ	0xFF1
  1863                           postinc0	equ	0xFEE
  1864                           wreg	equ	0xFE8
  1865                           indf1	equ	0xFE7
  1866                           postdec1	equ	0xFE5
  1867                           fsr1h	equ	0xFE2
  1868                           fsr1l	equ	0xFE1
  1869                           indf2	equ	0xFDF
  1870                           postinc2	equ	0xFDE
  1871                           plusw2	equ	0xFDB
  1872                           fsr2h	equ	0xFDA
  1873                           fsr2l	equ	0xFD9
  1874                           status	equ	0xFD8
  1875                           
  1876 ;; *************** function _ProtocolTask *****************
  1877 ;; Defined at:
  1878 ;;		line 253 in file "sfxProtocoll.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;		None
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;		None
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  1    wreg      enum E6681
  1885 ;; Registers used:
  1886 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 3F/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1892 ;;      Params:         0       0       0       0       0       0       0
  1893 ;;      Locals:         0       0       0       0       0       0       0
  1894 ;;      Temps:          0       0       0       0       0       0       0
  1895 ;;      Totals:         0       0       0       0       0       0       0
  1896 ;;Total ram usage:        0 bytes
  1897 ;; Hardware stack levels used:    1
  1898 ;; Hardware stack levels required when called:   10
  1899 ;; This function calls:
  1900 ;;		_ProtocolSetNextCommTime
  1901 ;;		_ProtocolSetNextMeasTime
  1902 ;;		_ProtocolTaskBuildFrame
  1903 ;;		_ProtocolTaskExecute
  1904 ;;		_ProtocolTaskPowerDown
  1905 ;;		_SigfoxTaskNewTask
  1906 ;;		_powerTaskNewTask
  1907 ;; This function is called by:
  1908 ;;		_main
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           	psect	text10
  1913  000B32                     __ptext10:
  1914                           	opt stack 0
  1915  000B32                     _ProtocolTask:
  1916                           	opt stack 20
  1917                           
  1918                           ;sfxProtocoll.c: 254: switch(PROT_STATE){
  1919                           
  1920                           ; BSR set to: 15
  1921                           ;incstack = 0
  1922  000B32  D050               	goto	l3325
  1923  000B34                     l3257:
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;sfxProtocoll.c: 256: if(ProtocolSetNextMeasTime()){
  1927  000B34  ECE4  F006         	call	_ProtocolSetNextMeasTime	;wreg free
  1928  000B38  0900               	iorlw	0
  1929  000B3A  E005               	bz	l3267
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;sfxProtocoll.c: 257: protVarMeasurementTimer = 0;
  1933  000B3C  6B64               	clrf	_protVarMeasurementTimer& (0+255),b
  1934  000B3E  6B65               	clrf	(_protVarMeasurementTimer+1)& (0+255),b
  1935  000B40  6B66               	clrf	(_protVarMeasurementTimer+2)& (0+255),b
  1936  000B42  6B67               	clrf	(_protVarMeasurementTimer+3)& (0+255),b
  1937                           
  1938                           ; BSR set to: 0
  1939                           ;sfxProtocoll.c: 258: PROT_STATE = POWERING_TASK;
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;sfxProtocoll.c: 259: return(TASK_ON_COURSE);
  1943  000B44  D05A               	goto	PL36	;call to abstracted procedure
  1944  000B46                     l3267:
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;sfxProtocoll.c: 260: }
  1948                           ;sfxProtocoll.c: 261: if(ProtocolSetNextCommTime()){
  1949  000B46  EC14  F009         	call	_ProtocolSetNextCommTime	;wreg free
  1950  000B4A  0900               	iorlw	0
  1951  000B4C  B4D8               	btfsc	status,2,c
  1952  000B4E  0C00               	retlw	0
  1953                           
  1954                           ; BSR set to: 0
  1955                           ;sfxProtocoll.c: 262: protVarCommunicationTimer = 0;
  1956  000B50  6B60               	clrf	_protVarCommunicationTimer& (0+255),b
  1957  000B52  6B61               	clrf	(_protVarCommunicationTimer+1)& (0+255),b
  1958  000B54  6B62               	clrf	(_protVarCommunicationTimer+2)& (0+255),b
  1959  000B56  6B63               	clrf	(_protVarCommunicationTimer+3)& (0+255),b
  1960                           
  1961                           ; BSR set to: 0
  1962                           ;sfxProtocoll.c: 263: PROT_STATE = POWERING_TASK;
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;sfxProtocoll.c: 264: return(TASK_ON_COURSE);
  1966  000B58  D050               	goto	PL36	;call to abstracted procedure
  1967  000B5A                     l3281:
  1968                           
  1969                           ; BSR set to: 0
  1970                           ;sfxProtocoll.c: 268: if(ProtocolSetNextMeasTime()){
  1971  000B5A  ECE4  F006         	call	_ProtocolSetNextMeasTime	;wreg free
  1972  000B5E  0900               	iorlw	0
  1973  000B60  E00C               	bz	l3293
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;sfxProtocoll.c: 269: powerTaskNewTask(PWR_CMD_INITIALIZE);
  1977  000B62  0E00               	movlw	0
  1978  000B64  ECBA  F008         	call	_powerTaskNewTask
  1979                           
  1980                           ;sfxProtocoll.c: 270: powerTaskNewTask(PWR_CMD_VDD_EN);
  1981  000B68  0E01               	movlw	1
  1982  000B6A  ECBA  F008         	call	_powerTaskNewTask
  1983                           
  1984                           ; BSR set to: 0
  1985                           ;sfxProtocoll.c: 271: ProtocolTaskExecute(powerTask,50);
  1986  000B6E  D83D               	call	PL16	;call to abstracted procedure
  1987  000B70  EC31  F009         	call	_ProtocolTaskExecute	;wreg free
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;sfxProtocoll.c: 272: PROT_STATE = MEASURING_TASK;
  1991  000B74  0E02               	movlw	2
  1992  000B76  6F82               	movwf	_PROT_STATE& (0+255),b
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;sfxProtocoll.c: 273: return(TASK_ON_COURSE);
  1996  000B78  0C01               	retlw	1
  1997  000B7A                     l3293:
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;sfxProtocoll.c: 274: }
  2001                           ;sfxProtocoll.c: 275: if(ProtocolSetNextCommTime()){
  2002  000B7A  EC14  F009         	call	_ProtocolSetNextCommTime	;wreg free
  2003  000B7E  0900               	iorlw	0
  2004  000B80  E010               	bz	l3307
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;sfxProtocoll.c: 276: powerTaskNewTask(PWR_CMD_INITIALIZE);
  2008  000B82  0E00               	movlw	0
  2009  000B84  ECBA  F008         	call	_powerTaskNewTask
  2010                           
  2011                           ;sfxProtocoll.c: 281: powerTaskNewTask(PWR_CMD_VDD_EN);
  2012  000B88  0E01               	movlw	1
  2013  000B8A  ECBA  F008         	call	_powerTaskNewTask
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;sfxProtocoll.c: 283: ProtocolTaskExecute(powerTask,50);
  2017  000B8E  D82D               	call	PL16	;call to abstracted procedure
  2018  000B90  EC31  F009         	call	_ProtocolTaskExecute	;wreg free
  2019                           
  2020                           ; BSR set to: 0
  2021                           ;sfxProtocoll.c: 284: ProtocolTaskBuildFrame(TIMER1_EV);
  2022  000B94  0E01               	movlw	1
  2023  000B96  EC2C  F003         	call	_ProtocolTaskBuildFrame
  2024                           
  2025                           ;sfxProtocoll.c: 285: PROT_STATE = COMMUNICATING_TASK;
  2026  000B9A  0E03               	movlw	3
  2027  000B9C  0100               	movlb	0	; () banked
  2028  000B9E  6F82               	movwf	_PROT_STATE& (0+255),b
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;sfxProtocoll.c: 286: return(TASK_ON_COURSE);
  2032  000BA0  0C01               	retlw	1
  2033  000BA2                     l3307:
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;sfxProtocoll.c: 287: }
  2037                           ;sfxProtocoll.c: 288: ProtocolTaskPowerDown();
  2038  000BA2  EC90  F00A         	call	_ProtocolTaskPowerDown	;wreg free
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;sfxProtocoll.c: 289: return(TASK_NO_SENSOR_FOUND);
  2042  000BA6  0C00               	retlw	0
  2043  000BA8                     l3313:
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;sfxProtocoll.c: 302: SigfoxTaskNewTask(SFX_CMD_INITIALIZE);
  2047  000BA8  0E00               	movlw	0
  2048  000BAA  EC75  F008         	call	_SigfoxTaskNewTask
  2049                           
  2050                           ;sfxProtocoll.c: 303: SigfoxTaskNewTask(SFX_CMD_SEND_MSG);
  2051  000BAE  0E01               	movlw	1
  2052  000BB0  EC75  F008         	call	_SigfoxTaskNewTask
  2053                           
  2054                           ;sfxProtocoll.c: 305: SigfoxTaskNewTask(SFX_CMD_PWR_DOWN);
  2055  000BB4  0E05               	movlw	5
  2056  000BB6  EC75  F008         	call	_SigfoxTaskNewTask
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;sfxProtocoll.c: 306: ProtocolTaskExecute(SigfoxTask,60);
  2060  000BBA  0EF0               	movlw	low _SigfoxTask
  2061  000BBC  6FE0               	movwf	ProtocolTaskExecute@taskPointer& (0+255),b
  2062  000BBE  0E07               	movlw	high _SigfoxTask
  2063  000BC0  6FE1               	movwf	(ProtocolTaskExecute@taskPointer+1)& (0+255),b
  2064  000BC2  6BE3               	clrf	(ProtocolTaskExecute@taskTimeOut+1)& (0+255),b
  2065  000BC4  0E3C               	movlw	60
  2066  000BC6  6FE2               	movwf	ProtocolTaskExecute@taskTimeOut& (0+255),b
  2067  000BC8  EC31  F009         	call	_ProtocolTaskExecute	;wreg free
  2068                           
  2069                           ;sfxProtocoll.c: 308: break;
  2070  000BCC  D016               	goto	PL36
  2071  000BCE                     l3317:
  2072                           
  2073                           ; BSR set to: 0
  2074                           ;sfxProtocoll.c: 310: ProtocolTaskPowerDown();
  2075  000BCE  EC90  F00A         	call	_ProtocolTaskPowerDown	;wreg free
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;sfxProtocoll.c: 311: return(TASK_NO_SENSOR_FOUND);
  2079  000BD2  0C00               	retlw	0
  2080  000BD4                     l3325:
  2081  000BD4  0100               	movlb	0	; () banked
  2082  000BD6  5182               	movf	_PROT_STATE& (0+255),w,b
  2083                           
  2084                           ; Switch size 1, requested type "space"
  2085                           ; Number of cases is 4, Range of values is 0 to 3
  2086                           ; switch strategies available:
  2087                           ; Name         Instructions Cycles
  2088                           ; simple_byte           13     7 (average)
  2089                           ;	Chosen strategy is simple_byte
  2090  000BD8  E0AD               	bz	l3257
  2091  000BDA  0A01               	xorlw	1	; case 1
  2092  000BDC  E0BE               	bz	l3281
  2093  000BDE  0A03               	xorlw	3	; case 2
  2094  000BE0  E00C               	bz	PL36
  2095  000BE2  0A01               	xorlw	1	; case 3
  2096  000BE4  E0E1               	bz	l3313
  2097  000BE6  D7F3               	goto	l3317
  2098  000BE8                     l3327:
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;sfxProtocoll.c: 313: PROT_STATE = POWERING_TASK;
  2102                           
  2103                           ; BSR set to: 0
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;sfxProtocoll.c: 314: return(TASK_ON_COURSE);
  2107  000BE8  D008               	goto	PL36	;call to abstracted procedure
  2108  000BEA                     __end_of_ProtocolTask:
  2109                           	opt stack 0
  2110  000BEA                     PL16:
  2111                           	opt stack 20
  2112  000BEA  0E9C               	movlw	low _powerTask
  2113  000BEC  6FE0               	movwf	ProtocolTaskExecute@taskPointer& (0+255),b
  2114  000BEE  0E0C               	movlw	high _powerTask
  2115  000BF0  6FE1               	movwf	(ProtocolTaskExecute@taskPointer+1)& (0+255),b
  2116  000BF2  6BE3               	clrf	(ProtocolTaskExecute@taskTimeOut+1)& (0+255),b
  2117  000BF4  0E32               	movlw	50
  2118  000BF6  6FE2               	movwf	ProtocolTaskExecute@taskTimeOut& (0+255),b
  2119  000BF8  0C32               	retlw	50
  2120  000BFA                     __end_ofPL16:
  2121                           	opt stack 0
  2122  000BFA                     PL36:
  2123                           	opt stack 20
  2124  000BFA  0E01               	movlw	1
  2125  000BFC  6F82               	movwf	_PROT_STATE& (0+255),b
  2126  000BFE  0C01               	retlw	1
  2127  000C00                     __end_ofPL36:
  2128                           	opt stack 0
  2129                           tosu	equ	0xFFF
  2130                           tosh	equ	0xFFE
  2131                           tosl	equ	0xFFD
  2132                           pclath	equ	0xFFA
  2133                           tblptru	equ	0xFF8
  2134                           tblptrh	equ	0xFF7
  2135                           tblptrl	equ	0xFF6
  2136                           tablat	equ	0xFF5
  2137                           prodh	equ	0xFF4
  2138                           prodl	equ	0xFF3
  2139                           intcon	equ	0xFF2
  2140                           intcon2	equ	0xFF1
  2141                           postinc0	equ	0xFEE
  2142                           wreg	equ	0xFE8
  2143                           indf1	equ	0xFE7
  2144                           postdec1	equ	0xFE5
  2145                           fsr1h	equ	0xFE2
  2146                           fsr1l	equ	0xFE1
  2147                           indf2	equ	0xFDF
  2148                           postinc2	equ	0xFDE
  2149                           plusw2	equ	0xFDB
  2150                           fsr2h	equ	0xFDA
  2151                           fsr2l	equ	0xFD9
  2152                           status	equ	0xFD8
  2153                           
  2154 ;; *************** function _powerTaskNewTask *****************
  2155 ;; Defined at:
  2156 ;;		line 104 in file "powerTask.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;  command         1    wreg     enum E6682
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;  command         1    5[BANK0 ] enum E6682
  2161 ;; Return value:  Size  Location     Type
  2162 ;;                  1    wreg      void 
  2163 ;; Registers used:
  2164 ;;		wreg, status,2, status,0, cstack
  2165 ;; Tracked objects:
  2166 ;;		On entry : 3F/0
  2167 ;;		On exit  : 3F/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2170 ;;      Params:         0       0       0       0       0       0       0
  2171 ;;      Locals:         0       1       0       0       0       0       0
  2172 ;;      Temps:          0       0       0       0       0       0       0
  2173 ;;      Totals:         0       1       0       0       0       0       0
  2174 ;;Total ram usage:        1 bytes
  2175 ;; Hardware stack levels used:    1
  2176 ;; Hardware stack levels required when called:    6
  2177 ;; This function calls:
  2178 ;;		_powerTaskPowerDown
  2179 ;; This function is called by:
  2180 ;;		_ProtocolTask
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           	psect	text11
  2185  001174                     __ptext11:
  2186                           	opt stack 0
  2187  001174                     _powerTaskNewTask:
  2188                           	opt stack 23
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;incstack = 0
  2192                           ;powerTaskNewTask@command stored from wreg
  2193  001174  0100               	movlb	0	; () banked
  2194  001176  6FC9               	movwf	powerTaskNewTask@command& (0+255),b
  2195                           
  2196                           ;powerTask.c: 105: switch(command){
  2197  001178  D007               	goto	l2461
  2198  00117A                     l2451:
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;powerTask.c: 107: pwrScheduledInitTaskFlag = 1;
  2202  00117A  0E01               	movlw	1
  2203  00117C  6F80               	movwf	_pwrScheduledInitTaskFlag& (0+255),b
  2204                           
  2205                           ;powerTask.c: 108: break;
  2206  00117E  0C01               	retlw	1
  2207  001180                     l2453:
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;powerTask.c: 110: pwrScheduledMeasPowerTaskFlag = 1;
  2211                           
  2212                           ;powerTask.c: 111: break;
  2213  001180  D016               	goto	PL42	;call to abstracted procedure
  2214  001182                     l854:
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;powerTask.c: 113: pwrScheduledMeasPowerTaskFlag = 0;
  2218                           
  2219                           ; BSR set to: 0
  2220                           
  2221                           ;powerTask.c: 114: do { LATAbits.LATA6 = 0; } while(0);
  2222  001182  D012               	goto	PL38	;call to abstracted procedure
  2223  001184                     l2455:
  2224                           
  2225                           ; BSR set to: 0
  2226                           ;powerTask.c: 120: pwrScheduledMeasPowerTaskFlag = 1;
  2227                           
  2228                           ;powerTask.c: 122: break;
  2229  001184  D014               	goto	PL42	;call to abstracted procedure
  2230  001186                     l858:
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;powerTask.c: 128: pwrScheduledMeasPowerTaskFlag = 0;
  2234                           
  2235                           ; BSR set to: 0
  2236                           
  2237                           ;powerTask.c: 129: do { LATAbits.LATA6 = 0; } while(0);
  2238  001186  D010               	goto	PL38	;call to abstracted procedure
  2239  001188                     l2461:
  2240  001188  0100               	movlb	0	; () banked
  2241  00118A  51C9               	movf	powerTaskNewTask@command& (0+255),w,b
  2242                           
  2243                           ; Switch size 1, requested type "space"
  2244                           ; Number of cases is 6, Range of values is 0 to 5
  2245                           ; switch strategies available:
  2246                           ; Name         Instructions Cycles
  2247                           ; simple_byte           19    10 (average)
  2248                           ;	Chosen strategy is simple_byte
  2249  00118C  E0F6               	bz	l2451
  2250  00118E  0A01               	xorlw	1	; case 1
  2251  001190  E00E               	bz	PL42
  2252  001192  0A03               	xorlw	3	; case 2
  2253  001194  E009               	bz	PL38
  2254  001196  0A01               	xorlw	1	; case 3
  2255  001198  E00A               	bz	PL42
  2256  00119A  0A07               	xorlw	7	; case 4
  2257  00119C  E005               	bz	PL38
  2258  00119E  0A01               	xorlw	1	; case 5
  2259  0011A0  E102 EF40  F00A    	bz	_powerTaskPowerDown
  2260                           
  2261                           ; BSR set to: 0
  2262  0011A6  0012               	return		;funcret
  2263  0011A8                     __end_of_powerTaskNewTask:
  2264                           	opt stack 0
  2265  0011A8                     PL38:
  2266                           	opt stack 23
  2267  0011A8  6B7F               	clrf	_pwrScheduledMeasPowerTaskFlag& (0+255),b
  2268  0011AA  9C89               	bcf	3977,6,c	;volatile
  2269  0011AC  0012               	return	
  2270  0011AE                     __end_ofPL38:
  2271                           	opt stack 0
  2272  0011AE                     PL42:
  2273                           	opt stack 23
  2274  0011AE  0E01               	movlw	1
  2275  0011B0  6F7F               	movwf	_pwrScheduledMeasPowerTaskFlag& (0+255),b
  2276  0011B2  0C01               	retlw	1
  2277  0011B4                     __end_ofPL42:
  2278                           	opt stack 0
  2279                           tosu	equ	0xFFF
  2280                           tosh	equ	0xFFE
  2281                           tosl	equ	0xFFD
  2282                           pclath	equ	0xFFA
  2283                           tblptru	equ	0xFF8
  2284                           tblptrh	equ	0xFF7
  2285                           tblptrl	equ	0xFF6
  2286                           tablat	equ	0xFF5
  2287                           prodh	equ	0xFF4
  2288                           prodl	equ	0xFF3
  2289                           intcon	equ	0xFF2
  2290                           intcon2	equ	0xFF1
  2291                           postinc0	equ	0xFEE
  2292                           wreg	equ	0xFE8
  2293                           indf1	equ	0xFE7
  2294                           postdec1	equ	0xFE5
  2295                           fsr1h	equ	0xFE2
  2296                           fsr1l	equ	0xFE1
  2297                           indf2	equ	0xFDF
  2298                           postinc2	equ	0xFDE
  2299                           plusw2	equ	0xFDB
  2300                           fsr2h	equ	0xFDA
  2301                           fsr2l	equ	0xFD9
  2302                           status	equ	0xFD8
  2303                           
  2304 ;; *************** function _SigfoxTaskNewTask *****************
  2305 ;; Defined at:
  2306 ;;		line 431 in file "mcc_generated_files/eusart2.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  command         1    wreg     enum E6710
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;  command         1    5[BANK0 ] enum E6710
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      void 
  2313 ;; Registers used:
  2314 ;;		wreg, status,2, status,0
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 3F/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2320 ;;      Params:         0       0       0       0       0       0       0
  2321 ;;      Locals:         0       1       0       0       0       0       0
  2322 ;;      Temps:          0       0       0       0       0       0       0
  2323 ;;      Totals:         0       1       0       0       0       0       0
  2324 ;;Total ram usage:        1 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:    5
  2327 ;; This function calls:
  2328 ;;		Nothing
  2329 ;; This function is called by:
  2330 ;;		_ProtocolTask
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	text12
  2335  0010EA                     __ptext12:
  2336                           	opt stack 0
  2337  0010EA                     _SigfoxTaskNewTask:
  2338                           	opt stack 24
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;incstack = 0
  2342                           ;SigfoxTaskNewTask@command stored from wreg
  2343  0010EA  0100               	movlb	0	; () banked
  2344  0010EC  6FC9               	movwf	SigfoxTaskNewTask@command& (0+255),b
  2345                           
  2346                           ;eusart2.c: 432: switch(command){
  2347  0010EE  D015               	goto	l2287
  2348  0010F0                     l2271:
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;eusart2.c: 434: SigfoxScheduledInitTaskFlag = 1;
  2352  0010F0  0E01               	movlw	1
  2353  0010F2  6F8C               	movwf	_SigfoxScheduledInitTaskFlag& (0+255),b
  2354                           
  2355                           ;eusart2.c: 435: break;
  2356  0010F4  0C01               	retlw	1
  2357  0010F6                     l378:
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;eusart2.c: 438: SigfoxScheduledMsgAckTaskFlag = 0;
  2361  0010F6  6B8E               	clrf	_SigfoxScheduledMsgAckTaskFlag& (0+255),b
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;eusart2.c: 439: SigfoxScheduledMsgTaskFlag = 1;
  2365  0010F8  0E01               	movlw	1
  2366  0010FA  6F8F               	movwf	_SigfoxScheduledMsgTaskFlag& (0+255),b
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;eusart2.c: 440: SigfoxScheduledMsgStaTaskFlag = 0;
  2370  0010FC  6B8B               	clrf	_SigfoxScheduledMsgStaTaskFlag& (0+255),b
  2371                           
  2372                           ;eusart2.c: 441: break;
  2373  0010FE  0012               	return	
  2374  001100                     l379:
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;eusart2.c: 445: SigfoxScheduledMsgTaskFlag = 0;
  2378  001100  6B8F               	clrf	_SigfoxScheduledMsgTaskFlag& (0+255),b
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;eusart2.c: 446: SigfoxScheduledMsgAckTaskFlag = 1;
  2382  001102  0E01               	movlw	1
  2383  001104  6F8E               	movwf	_SigfoxScheduledMsgAckTaskFlag& (0+255),b
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;eusart2.c: 447: SigfoxScheduledMsgStaTaskFlag = 0;
  2387  001106  6B8B               	clrf	_SigfoxScheduledMsgStaTaskFlag& (0+255),b
  2388                           
  2389                           ;eusart2.c: 448: break;
  2390  001108  0012               	return	
  2391  00110A                     l380:
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;eusart2.c: 451: SigfoxScheduledMsgTaskFlag = 0;
  2395  00110A  6B8F               	clrf	_SigfoxScheduledMsgTaskFlag& (0+255),b
  2396                           
  2397                           ;eusart2.c: 452: SigfoxScheduledMsgAckTaskFlag = 0;
  2398  00110C  6B8E               	clrf	_SigfoxScheduledMsgAckTaskFlag& (0+255),b
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;eusart2.c: 453: SigfoxScheduledMsgStaTaskFlag = 1;
  2402  00110E  0E01               	movlw	1
  2403  001110  6F8B               	movwf	_SigfoxScheduledMsgStaTaskFlag& (0+255),b
  2404                           
  2405                           ;eusart2.c: 454: break;
  2406  001112  0C01               	retlw	1
  2407  001114                     l2283:
  2408                           
  2409                           ; BSR set to: 0
  2410                           ;eusart2.c: 457: SigfoxScheduledPwrDownTaskFlag = 1;
  2411  001114  0E01               	movlw	1
  2412  001116  6F8D               	movwf	_SigfoxScheduledPwrDownTaskFlag& (0+255),b
  2413                           
  2414                           ;eusart2.c: 458: break;
  2415  001118  0C01               	retlw	1
  2416  00111A                     l2287:
  2417  00111A  0100               	movlb	0	; () banked
  2418  00111C  51C9               	movf	SigfoxTaskNewTask@command& (0+255),w,b
  2419                           
  2420                           ; Switch size 1, requested type "space"
  2421                           ; Number of cases is 5, Range of values is 0 to 5
  2422                           ; switch strategies available:
  2423                           ; Name         Instructions Cycles
  2424                           ; simple_byte           16     9 (average)
  2425                           ;	Chosen strategy is simple_byte
  2426  00111E  E0E8               	bz	l2271
  2427  001120  0A01               	xorlw	1	; case 1
  2428  001122  E0E9               	bz	l378
  2429  001124  0A03               	xorlw	3	; case 2
  2430  001126  E0EC               	bz	l379
  2431  001128  0A01               	xorlw	1	; case 3
  2432  00112A  E0EF               	bz	l380
  2433  00112C  0A06               	xorlw	6	; case 5
  2434  00112E  E0F2               	bz	l2283
  2435                           
  2436                           ; BSR set to: 0
  2437  001130  0012               	return		;funcret
  2438  001132                     __end_of_SigfoxTaskNewTask:
  2439                           	opt stack 0
  2440                           tosu	equ	0xFFF
  2441                           tosh	equ	0xFFE
  2442                           tosl	equ	0xFFD
  2443                           pclath	equ	0xFFA
  2444                           tblptru	equ	0xFF8
  2445                           tblptrh	equ	0xFF7
  2446                           tblptrl	equ	0xFF6
  2447                           tablat	equ	0xFF5
  2448                           prodh	equ	0xFF4
  2449                           prodl	equ	0xFF3
  2450                           intcon	equ	0xFF2
  2451                           intcon2	equ	0xFF1
  2452                           postinc0	equ	0xFEE
  2453                           wreg	equ	0xFE8
  2454                           indf1	equ	0xFE7
  2455                           postdec1	equ	0xFE5
  2456                           fsr1h	equ	0xFE2
  2457                           fsr1l	equ	0xFE1
  2458                           indf2	equ	0xFDF
  2459                           postinc2	equ	0xFDE
  2460                           plusw2	equ	0xFDB
  2461                           fsr2h	equ	0xFDA
  2462                           fsr2l	equ	0xFD9
  2463                           status	equ	0xFD8
  2464                           
  2465 ;; *************** function _ProtocolTaskPowerDown *****************
  2466 ;; Defined at:
  2467 ;;		line 243 in file "sfxProtocoll.c"
  2468 ;; Parameters:    Size  Location     Type
  2469 ;;		None
  2470 ;; Auto vars:     Size  Location     Type
  2471 ;;		None
  2472 ;; Return value:  Size  Location     Type
  2473 ;;                  1    wreg      void 
  2474 ;; Registers used:
  2475 ;;		cstack
  2476 ;; Tracked objects:
  2477 ;;		On entry : 0/0
  2478 ;;		On exit  : 3F/0
  2479 ;;		Unchanged: 0/0
  2480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2481 ;;      Params:         0       0       0       0       0       0       0
  2482 ;;      Locals:         0       0       0       0       0       0       0
  2483 ;;      Temps:          0       0       0       0       0       0       0
  2484 ;;      Totals:         0       0       0       0       0       0       0
  2485 ;;Total ram usage:        0 bytes
  2486 ;; Hardware stack levels used:    1
  2487 ;; Hardware stack levels required when called:    6
  2488 ;; This function calls:
  2489 ;;		_SigfoxTaskPowerDown
  2490 ;;		_powerTaskPowerDown
  2491 ;; This function is called by:
  2492 ;;		_main
  2493 ;;		_ProtocolTask
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497                           	psect	text13
  2498  001520                     __ptext13:
  2499                           	opt stack 0
  2500  001520                     _ProtocolTaskPowerDown:
  2501                           	opt stack 24
  2502                           
  2503                           ;sfxProtocoll.c: 244: PROT_STATE = MAIN_TASK_PARKED;
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;incstack = 0
  2507  001520  0100               	movlb	0	; () banked
  2508  001522  6B82               	clrf	_PROT_STATE& (0+255),b
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;sfxProtocoll.c: 249: SigfoxTaskPowerDown();
  2512  001524  EC4B  F00A         	call	_SigfoxTaskPowerDown	;wreg free
  2513                           
  2514                           ;sfxProtocoll.c: 251: powerTaskPowerDown();
  2515  001528  EF40  F00A         	goto	_powerTaskPowerDown	;wreg free
  2516  00152C                     __end_of_ProtocolTaskPowerDown:
  2517                           	opt stack 0
  2518                           tosu	equ	0xFFF
  2519                           tosh	equ	0xFFE
  2520                           tosl	equ	0xFFD
  2521                           pclath	equ	0xFFA
  2522                           tblptru	equ	0xFF8
  2523                           tblptrh	equ	0xFF7
  2524                           tblptrl	equ	0xFF6
  2525                           tablat	equ	0xFF5
  2526                           prodh	equ	0xFF4
  2527                           prodl	equ	0xFF3
  2528                           intcon	equ	0xFF2
  2529                           intcon2	equ	0xFF1
  2530                           postinc0	equ	0xFEE
  2531                           wreg	equ	0xFE8
  2532                           indf1	equ	0xFE7
  2533                           postdec1	equ	0xFE5
  2534                           fsr1h	equ	0xFE2
  2535                           fsr1l	equ	0xFE1
  2536                           indf2	equ	0xFDF
  2537                           postinc2	equ	0xFDE
  2538                           plusw2	equ	0xFDB
  2539                           fsr2h	equ	0xFDA
  2540                           fsr2l	equ	0xFD9
  2541                           status	equ	0xFD8
  2542                           
  2543 ;; *************** function _ProtocolTaskExecute *****************
  2544 ;; Defined at:
  2545 ;;		line 230 in file "sfxProtocoll.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;  taskPointer     2   28[BANK0 ] PTR FTN()enum E6681
  2548 ;;		 -> powerTask(1), SigfoxTask(1), 
  2549 ;;  taskTimeOut     2   30[BANK0 ] unsigned int 
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;  timeOut         2   32[BANK0 ] unsigned int 
  2552 ;;  taskResult      1   34[BANK0 ] enum E6681
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      enum E6681
  2555 ;; Registers used:
  2556 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2557 ;; Tracked objects:
  2558 ;;		On entry : 3F/0
  2559 ;;		On exit  : 3F/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2562 ;;      Params:         0       4       0       0       0       0       0
  2563 ;;      Locals:         0       3       0       0       0       0       0
  2564 ;;      Temps:          0       0       0       0       0       0       0
  2565 ;;      Totals:         0       7       0       0       0       0       0
  2566 ;;Total ram usage:        7 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:    9
  2569 ;; This function calls:
  2570 ;;		_SigfoxTask
  2571 ;;		_powerTask
  2572 ;; This function is called by:
  2573 ;;		_ProtocolTask
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           	psect	text14
  2578  001262                     __ptext14:
  2579                           	opt stack 0
  2580  001262                     _ProtocolTaskExecute:
  2581                           	opt stack 20
  2582                           
  2583                           ;sfxProtocoll.c: 231: taskResult_t taskResult;
  2584                           ;sfxProtocoll.c: 232: unsigned int timeOut;
  2585                           ;sfxProtocoll.c: 234: timeOut = taskTimeOut;
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;incstack = 0
  2589  001262  C0E2  F0E4         	movff	ProtocolTaskExecute@taskTimeOut,ProtocolTaskExecute@timeOut
  2590  001266  C0E3  F0E5         	movff	ProtocolTaskExecute@taskTimeOut+1,ProtocolTaskExecute@timeOut+1
  2591                           
  2592                           ;sfxProtocoll.c: 235: while(timeOut){
  2593  00126A  D010               	goto	l3213
  2594  00126C                     l3205:
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;sfxProtocoll.c: 236: taskResult = taskPointer();
  2598  00126C  D801               	call	u1938
  2599  00126E  D009               	goto	u1939
  2600  001270                     u1938:
  2601  001270  0005               	push	
  2602  001272  6EFA               	movwf	pclath,c
  2603  001274  51E0               	movf	ProtocolTaskExecute@taskPointer& (0+255),w,b
  2604  001276  6EFD               	movwf	tosl,c
  2605  001278  51E1               	movf	(ProtocolTaskExecute@taskPointer+1)& (0+255),w,b
  2606  00127A  6EFE               	movwf	tosh,c
  2607  00127C  6AFF               	clrf	tosu,c
  2608  00127E  50FA               	movf	pclath,w,c
  2609  001280  0012               	return		;indir
  2610  001282                     u1939:
  2611  001282  6FE6               	movwf	ProtocolTaskExecute@taskResult& (0+255),b
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;sfxProtocoll.c: 237: if(taskResult != TASK_ON_COURSE){
  2615  001284  05E6               	decf	ProtocolTaskExecute@taskResult& (0+255),w,b
  2616  001286  E002               	bz	l3213
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;sfxProtocoll.c: 238: return(taskResult);
  2620  001288  51E6               	movf	ProtocolTaskExecute@taskResult& (0+255),w,b
  2621  00128A  0012               	return	
  2622  00128C                     l3213:
  2623  00128C  0100               	movlb	0	; () banked
  2624  00128E  51E4               	movf	ProtocolTaskExecute@timeOut& (0+255),w,b
  2625  001290  11E5               	iorwf	(ProtocolTaskExecute@timeOut+1)& (0+255),w,b
  2626  001292  E1EC               	bnz	l3205
  2627                           
  2628                           ; BSR set to: 0
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;sfxProtocoll.c: 239: }
  2632                           ;sfxProtocoll.c: 240: }
  2633                           ;sfxProtocoll.c: 241: return(TASK_TO_ERR);
  2634  001294  0C03               	retlw	3	;funcret
  2635  001296                     __end_of_ProtocolTaskExecute:
  2636                           	opt stack 0
  2637                           tosu	equ	0xFFF
  2638                           tosh	equ	0xFFE
  2639                           tosl	equ	0xFFD
  2640                           pclath	equ	0xFFA
  2641                           tblptru	equ	0xFF8
  2642                           tblptrh	equ	0xFF7
  2643                           tblptrl	equ	0xFF6
  2644                           tablat	equ	0xFF5
  2645                           prodh	equ	0xFF4
  2646                           prodl	equ	0xFF3
  2647                           intcon	equ	0xFF2
  2648                           intcon2	equ	0xFF1
  2649                           postinc0	equ	0xFEE
  2650                           wreg	equ	0xFE8
  2651                           indf1	equ	0xFE7
  2652                           postdec1	equ	0xFE5
  2653                           fsr1h	equ	0xFE2
  2654                           fsr1l	equ	0xFE1
  2655                           indf2	equ	0xFDF
  2656                           postinc2	equ	0xFDE
  2657                           plusw2	equ	0xFDB
  2658                           fsr2h	equ	0xFDA
  2659                           fsr2l	equ	0xFD9
  2660                           status	equ	0xFD8
  2661                           
  2662 ;; *************** function _SigfoxTask *****************
  2663 ;; Defined at:
  2664 ;;		line 314 in file "mcc_generated_files/eusart2.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;		None
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;  sigfoxInitCo    3   23[BANK0 ] const unsigned char [3]
  2669 ;;  SigfoxInitCo    2   26[BANK0 ] PTR const unsigned char 
  2670 ;;		 -> SigfoxTask@sigfoxInitCommandsROMList(3), 
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  1    wreg      enum E6665
  2673 ;; Registers used:
  2674 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2675 ;; Tracked objects:
  2676 ;;		On entry : 3F/0
  2677 ;;		On exit  : 3F/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2680 ;;      Params:         0       0       0       0       0       0       0
  2681 ;;      Locals:         0       5       0       0       0       0       0
  2682 ;;      Temps:          0       1       0       0       0       0       0
  2683 ;;      Totals:         0       6       0       0       0       0       0
  2684 ;;Total ram usage:        6 bytes
  2685 ;; Hardware stack levels used:    1
  2686 ;; Hardware stack levels required when called:    8
  2687 ;; This function calls:
  2688 ;;		_SigfoxCommManager
  2689 ;;		_SigfoxResponseParser
  2690 ;;		_SigfoxTaskPowerDown
  2691 ;;		_SigfoxTaskReset
  2692 ;; This function is called by:
  2693 ;;		_ProtocolTask
  2694 ;;		_ProtocolTaskExecute
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           	psect	text15
  2699  0007F0                     __ptext15:
  2700                           	opt stack 0
  2701  0007F0                     _SigfoxTask:
  2702                           	opt stack 20
  2703                           
  2704                           ;eusart2.c: 315: const uint8_t sigfoxInitCommandsROMList[3] = {SFX_CMD_INITIALIZE,
  2705                           ;eusart2.c: 317: SFX_CMD_ADJ_PWR,
  2706                           ;eusart2.c: 318: 0xFF};
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;incstack = 0
  2710  0007F0  0E05               	movlw	low SigfoxTask@F6887
  2711  0007F2  6EF6               	movwf	tblptrl,c
  2712  0007F4                     	if	1	;There is more than 1 active tblptr byte
  2713  0007F4  0E06               	movlw	high SigfoxTask@F6887
  2714  0007F6  6EF7               	movwf	tblptrh,c
  2715  0007F8                     	endif
  2716  0007F8                     	if	1	;There are 3 active tblptr bytes
  2717  0007F8  0E00               	movlw	low (SigfoxTask@F6887 shr (0+16))
  2718  0007FA  6EF8               	movwf	tblptru,c
  2719  0007FC                     	endif
  2720  0007FC  0009               	tblrd		*+
  2721  0007FE  CFF5 F0DB          	movff	tablat,SigfoxTask@sigfoxInitCommandsROMList
  2722  000802  0009               	tblrd		*+
  2723  000804  CFF5 F0DC          	movff	tablat,SigfoxTask@sigfoxInitCommandsROMList+1
  2724  000808  000A               	tblrd		*-
  2725  00080A  CFF5 F0DD          	movff	tablat,SigfoxTask@sigfoxInitCommandsROMList+2
  2726                           
  2727                           ;eusart2.c: 319: const char *SigfoxInitCommandPtr;
  2728                           ;eusart2.c: 321: switch(SFX_STATE){
  2729  00080E  D076               	goto	l2949
  2730  000810                     l2811:
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;eusart2.c: 323: if(SigfoxScheduledInitTaskFlag){
  2734  000810  518C               	movf	_SigfoxScheduledInitTaskFlag& (0+255),w,b
  2735  000812  B4D8               	btfsc	status,2,c
  2736  000814  0C00               	retlw	0
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;eusart2.c: 324: SFX_STATE = TASK_RESET_TASK;
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;eusart2.c: 325: return(TASK_ON_COURSE);
  2743  000816  D083               	goto	PL40	;call to abstracted procedure
  2744  000818                     l2823:
  2745                           
  2746                           ; BSR set to: 0
  2747                           ;eusart2.c: 331: SigfoxTaskReset();
  2748  000818  EC10  F00A         	call	_SigfoxTaskReset	;wreg free
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;eusart2.c: 332: SFX_STATE = TASK_INIT;
  2752  00081C  0E02               	movlw	2
  2753  00081E  6FF2               	movwf	_SFX_STATE& (0+255),b
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;eusart2.c: 333: SigfoxInitCommandPtr = sigfoxInitCommandsROMList;
  2757  000820  0EDB               	movlw	low SigfoxTask@sigfoxInitCommandsROMList
  2758  000822  6FDE               	movwf	SigfoxTask@SigfoxInitCommandPtr& (0+255),b
  2759  000824  0E00               	movlw	high SigfoxTask@sigfoxInitCommandsROMList
  2760  000826  6FDF               	movwf	(SigfoxTask@SigfoxInitCommandPtr+1)& (0+255),b
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;eusart2.c: 334: return(TASK_ON_COURSE);
  2764  000828  0C01               	retlw	1
  2765  00082A                     l2833:
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;eusart2.c: 338: {
  2769                           ;eusart2.c: 339: SigfoxTransactionResult = SigfoxCommManager(SigfoxInitCommandPtr[0]);
  2770  00082A  D874               	call	PL28	;call to abstracted procedure
  2771  00082C  50DF               	movf	indf2,w,c
  2772  00082E  EC04  F008         	call	_SigfoxCommManager
  2773  000832  6FF1               	movwf	_SigfoxTransactionResult& (0+255),b
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;eusart2.c: 340: if(SigfoxTransactionResult == TASK_DATA_READY){
  2777  000834  0E02               	movlw	2
  2778  000836  19F1               	xorwf	_SigfoxTransactionResult& (0+255),w,b
  2779  000838  E10D               	bnz	l2847
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;eusart2.c: 341: if(SigfoxResponseParser()){
  2783  00083A  EC22  F00A         	call	_SigfoxResponseParser	;wreg free
  2784  00083E  0900               	iorlw	0
  2785  000840  E005               	bz	l2843
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;eusart2.c: 342: SigfoxInitCommandPtr++;
  2789  000842  4BDE               	infsnz	SigfoxTask@SigfoxInitCommandPtr& (0+255),f,b
  2790  000844  2BDF               	incf	(SigfoxTask@SigfoxInitCommandPtr+1)& (0+255),f,b
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;eusart2.c: 343: SigfoxTransactionAttemps = 3;
  2794  000846  0E03               	movlw	3
  2795  000848  6F8A               	movwf	_SigfoxTransactionAttemps& (0+255),b
  2796                           
  2797                           ;eusart2.c: 344: }
  2798  00084A  D00A               	goto	l2855
  2799  00084C                     l2843:
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;eusart2.c: 345: else if(SigfoxTransactionAttemps){
  2803  00084C  518A               	movf	_SigfoxTransactionAttemps& (0+255),w,b
  2804  00084E  E008               	bz	l2855
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;eusart2.c: 346: SigfoxTransactionAttemps--;
  2808  000850  078A               	decf	_SigfoxTransactionAttemps& (0+255),f,b
  2809  000852  D006               	goto	l2855
  2810  000854                     l2847:
  2811                           
  2812                           ; BSR set to: 0
  2813                           ;eusart2.c: 349: }
  2814                           ;eusart2.c: 350: if(SigfoxTransactionResult == TASK_NO_SENSOR_FOUND){
  2815  000854  51F1               	movf	_SigfoxTransactionResult& (0+255),w,b
  2816  000856  E102               	bnz	l2851
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;eusart2.c: 351: SigfoxTaskPowerDown();
  2820  000858  EC4B  F00A         	call	_SigfoxTaskPowerDown	;wreg free
  2821  00085C                     l2851:
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;eusart2.c: 352: }
  2825                           ;eusart2.c: 353: return(SigfoxTransactionResult);
  2826  00085C  51F1               	movf	_SigfoxTransactionResult& (0+255),w,b
  2827  00085E  0012               	return	
  2828  000860                     l2855:
  2829                           
  2830                           ; BSR set to: 0
  2831  000860  D859               	call	PL28	;call to abstracted procedure
  2832  000862  28DE               	incf	postinc2,w,c
  2833  000864  E1E2               	bnz	l2833
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;eusart2.c: 354: }
  2837                           ;eusart2.c: 355: SigfoxTransactionResult = TASK_DATA_READY;
  2838  000866  0E02               	movlw	2
  2839  000868  6FF1               	movwf	_SigfoxTransactionResult& (0+255),b
  2840                           
  2841                           ;eusart2.c: 356: SFX_STATE = TASK_READY;
  2842  00086A  0E03               	movlw	3
  2843  00086C  6FF2               	movwf	_SFX_STATE& (0+255),b
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;eusart2.c: 357: SigfoxScheduledInitTaskFlag = 0;
  2847  00086E  6B8C               	clrf	_SigfoxScheduledInitTaskFlag& (0+255),b
  2848                           
  2849                           ;eusart2.c: 358: if(SigfoxScheduledMsgTaskFlag || SigfoxScheduledMsgAckTaskFlag || Sigfo
      +                          xScheduledMsgStaTaskFlag){
  2850  000870  518F               	movf	_SigfoxScheduledMsgTaskFlag& (0+255),w,b
  2851  000872  A4D8               	btfss	status,2,c
  2852  000874  0C01               	retlw	1
  2853                           
  2854                           ; BSR set to: 0
  2855  000876  518E               	movf	_SigfoxScheduledMsgAckTaskFlag& (0+255),w,b
  2856  000878  A4D8               	btfss	status,2,c
  2857  00087A  0C01               	retlw	1
  2858                           
  2859                           ; BSR set to: 0
  2860  00087C  518B               	movf	_SigfoxScheduledMsgStaTaskFlag& (0+255),w,b
  2861  00087E  A4D8               	btfss	status,2,c
  2862                           
  2863                           ; BSR set to: 0
  2864                           ;eusart2.c: 359: return(TASK_ON_COURSE);
  2865  000880  0C01               	retlw	1
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;eusart2.c: 360: }
  2869                           ;eusart2.c: 361: return(TASK_DATA_READY);
  2870  000882  0C02               	retlw	2
  2871  000884                     l2873:
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;eusart2.c: 369: if(SigfoxScheduledMsgTaskFlag || SigfoxScheduledMsgAckTaskFlag || Sigfo
      +                          xScheduledMsgStaTaskFlag){
  2875  000884  518F               	movf	_SigfoxScheduledMsgTaskFlag& (0+255),w,b
  2876  000886  E104               	bnz	l2879
  2877                           
  2878                           ; BSR set to: 0
  2879  000888  518E               	movf	_SigfoxScheduledMsgAckTaskFlag& (0+255),w,b
  2880  00088A  E102               	bnz	l2879
  2881                           
  2882                           ; BSR set to: 0
  2883  00088C  518B               	movf	_SigfoxScheduledMsgStaTaskFlag& (0+255),w,b
  2884  00088E  E006               	bz	l2887
  2885  000890                     l2879:
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;eusart2.c: 370: SigfoxTransactionAttemps = 3;
  2889  000890  0E03               	movlw	3
  2890  000892  6F8A               	movwf	_SigfoxTransactionAttemps& (0+255),b
  2891                           
  2892                           ;eusart2.c: 371: SFX_STATE = TASK_WAITING_DATA;
  2893  000894  0E04               	movlw	4
  2894  000896  6FF2               	movwf	_SFX_STATE& (0+255),b
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;eusart2.c: 372: SigfoxCommManagerState = TASK_SEND_COMMAND_SM;
  2898  000898  6B91               	clrf	_SigfoxCommManagerState& (0+255),b
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;eusart2.c: 373: return(TASK_ON_COURSE);
  2902  00089A  0C01               	retlw	1
  2903  00089C                     l2887:
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;eusart2.c: 374: }
  2907                           ;eusart2.c: 375: if(SigfoxScheduledPwrDownTaskFlag){
  2908  00089C  518D               	movf	_SigfoxScheduledPwrDownTaskFlag& (0+255),w,b
  2909  00089E  B4D8               	btfsc	status,2,c
  2910  0008A0  0C02               	retlw	2
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;eusart2.c: 376: SigfoxTaskPowerDown();
  2914  0008A2  EC4B  F00A         	call	_SigfoxTaskPowerDown	;wreg free
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;eusart2.c: 377: return(TASK_NO_SENSOR_FOUND);
  2918  0008A6  0C00               	retlw	0
  2919  0008A8                     l2899:
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;eusart2.c: 382: if(SigfoxScheduledMsgAckTaskFlag){
  2923  0008A8  518E               	movf	_SigfoxScheduledMsgAckTaskFlag& (0+255),w,b
  2924  0008AA  E004               	bz	l2903
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;eusart2.c: 383: SigfoxTransactionResult = SigfoxCommManager(SFX_CMD_SEND_MSG_WAIT_ACK);
  2928  0008AC  0E02               	movlw	2
  2929  0008AE  EC04  F008         	call	_SigfoxCommManager
  2930  0008B2  D009               	goto	L5
  2931  0008B4                     l2903:
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;eusart2.c: 385: else if(SigfoxScheduledMsgStaTaskFlag){
  2935  0008B4  518B               	movf	_SigfoxScheduledMsgStaTaskFlag& (0+255),w,b
  2936  0008B6  E004               	bz	l2907
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;eusart2.c: 386: SigfoxTransactionResult = SigfoxCommManager(SFX_CMD_SEND_STATUS);
  2940  0008B8  0E03               	movlw	3
  2941  0008BA  EC04  F008         	call	_SigfoxCommManager
  2942  0008BE  D003               	goto	L5
  2943  0008C0                     l2907:
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;eusart2.c: 388: else
  2947                           ;eusart2.c: 389: {
  2948                           ;eusart2.c: 390: SigfoxTransactionResult = SigfoxCommManager(SFX_CMD_SEND_MSG);
  2949  0008C0  0E01               	movlw	1
  2950  0008C2  EC04  F008         	call	_SigfoxCommManager
  2951  0008C6                     L5:
  2952  0008C6  6FF1               	movwf	_SigfoxTransactionResult& (0+255),b
  2953                           
  2954                           ; BSR set to: 0
  2955                           ;eusart2.c: 391: }
  2956                           ;eusart2.c: 392: if(SigfoxTransactionResult == TASK_DATA_READY){
  2957  0008C8  0E02               	movlw	2
  2958  0008CA  19F1               	xorwf	_SigfoxTransactionResult& (0+255),w,b
  2959  0008CC  E10D               	bnz	l2927
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;eusart2.c: 393: if(SigfoxResponseParser()){
  2963  0008CE  EC22  F00A         	call	_SigfoxResponseParser	;wreg free
  2964  0008D2  0900               	iorlw	0
  2965  0008D4  E006               	bz	l2923
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;eusart2.c: 394: SigfoxScheduledMsgTaskFlag = 0;
  2969  0008D6  6B8F               	clrf	_SigfoxScheduledMsgTaskFlag& (0+255),b
  2970                           
  2971                           ;eusart2.c: 395: SigfoxScheduledMsgAckTaskFlag = 0;
  2972  0008D8  6B8E               	clrf	_SigfoxScheduledMsgAckTaskFlag& (0+255),b
  2973                           
  2974                           ;eusart2.c: 396: SigfoxScheduledMsgStaTaskFlag = 0;
  2975  0008DA  6B8B               	clrf	_SigfoxScheduledMsgStaTaskFlag& (0+255),b
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;eusart2.c: 398: SFX_STATE = TASK_READY;
  2979  0008DC  0E03               	movlw	3
  2980  0008DE  6FF2               	movwf	_SFX_STATE& (0+255),b
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;eusart2.c: 399: return(TASK_ON_COURSE);
  2984  0008E0  0C01               	retlw	1
  2985  0008E2                     l2923:
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;eusart2.c: 401: else if(SigfoxTransactionAttemps){
  2989  0008E2  518A               	movf	_SigfoxTransactionAttemps& (0+255),w,b
  2990  0008E4  E001               	bz	l2927
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;eusart2.c: 402: SigfoxTransactionAttemps--;
  2994  0008E6  078A               	decf	_SigfoxTransactionAttemps& (0+255),f,b
  2995  0008E8                     l2927:
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;eusart2.c: 403: }
  2999                           ;eusart2.c: 404: }
  3000                           ;eusart2.c: 405: if(SigfoxTransactionResult == TASK_NO_SENSOR_FOUND){
  3001  0008E8  51F1               	movf	_SigfoxTransactionResult& (0+255),w,b
  3002  0008EA  A4D8               	btfss	status,2,c
  3003  0008EC  0C01               	retlw	1
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;eusart2.c: 408: SigfoxScheduledMsgStaTaskFlag = 0;
  3007  0008EE  6B8B               	clrf	_SigfoxScheduledMsgStaTaskFlag& (0+255),b
  3008                           
  3009                           ;eusart2.c: 409: SigfoxScheduledMsgTaskFlag = 0;
  3010  0008F0  6B8F               	clrf	_SigfoxScheduledMsgTaskFlag& (0+255),b
  3011                           
  3012                           ;eusart2.c: 410: SigfoxScheduledMsgAckTaskFlag = 0;
  3013  0008F2  6B8E               	clrf	_SigfoxScheduledMsgAckTaskFlag& (0+255),b
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;eusart2.c: 411: SFX_STATE = TASK_READY;
  3017  0008F4  0E03               	movlw	3
  3018  0008F6  6FF2               	movwf	_SFX_STATE& (0+255),b
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;eusart2.c: 412: return(TASK_DATA_NOT_AVAILABLE);
  3022  0008F8  0C04               	retlw	4
  3023  0008FA                     l2941:
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;eusart2.c: 416: SFX_STATE = TASK_RESET_TASK;
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;eusart2.c: 417: return(TASK_ON_COURSE);
  3030  0008FA  D011               	goto	PL40	;call to abstracted procedure
  3031  0008FC                     l2949:
  3032  0008FC  0100               	movlb	0	; () banked
  3033  0008FE  51F2               	movf	_SFX_STATE& (0+255),w,b
  3034                           
  3035                           ; Switch size 1, requested type "space"
  3036                           ; Number of cases is 5, Range of values is 0 to 4
  3037                           ; switch strategies available:
  3038                           ; Name         Instructions Cycles
  3039                           ; simple_byte           16     9 (average)
  3040                           ;	Chosen strategy is simple_byte
  3041  000900  E087               	bz	l2811
  3042  000902  0A01               	xorlw	1	; case 1
  3043  000904  E089               	bz	l2823
  3044  000906  0A03               	xorlw	3	; case 2
  3045  000908  E0AB               	bz	l2855
  3046  00090A  0A01               	xorlw	1	; case 3
  3047  00090C  E0BB               	bz	l2873
  3048  00090E  0A07               	xorlw	7	; case 4
  3049  000910  E0CB               	bz	l2899
  3050  000912  D005               	goto	PL40
  3051  000914                     __end_of_SigfoxTask:
  3052                           	opt stack 0
  3053  000914                     PL28:
  3054                           	opt stack 20
  3055  000914  C0DE  FFD9         	movff	SigfoxTask@SigfoxInitCommandPtr,fsr2l
  3056  000918  C0DF  FFDA         	movff	SigfoxTask@SigfoxInitCommandPtr+1,fsr2h
  3057  00091C  0012               	return	
  3058  00091E                     __end_ofPL28:
  3059                           	opt stack 0
  3060  00091E                     PL40:
  3061                           	opt stack 20
  3062  00091E  0E01               	movlw	1
  3063  000920  6FF2               	movwf	_SFX_STATE& (0+255),b
  3064  000922  0C01               	retlw	1
  3065  000924                     __end_ofPL40:
  3066                           	opt stack 0
  3067                           tosu	equ	0xFFF
  3068                           tosh	equ	0xFFE
  3069                           tosl	equ	0xFFD
  3070                           pclath	equ	0xFFA
  3071                           tblptru	equ	0xFF8
  3072                           tblptrh	equ	0xFF7
  3073                           tblptrl	equ	0xFF6
  3074                           tablat	equ	0xFF5
  3075                           prodh	equ	0xFF4
  3076                           prodl	equ	0xFF3
  3077                           intcon	equ	0xFF2
  3078                           intcon2	equ	0xFF1
  3079                           postinc0	equ	0xFEE
  3080                           wreg	equ	0xFE8
  3081                           indf1	equ	0xFE7
  3082                           postdec1	equ	0xFE5
  3083                           fsr1h	equ	0xFE2
  3084                           fsr1l	equ	0xFE1
  3085                           indf2	equ	0xFDF
  3086                           postinc2	equ	0xFDE
  3087                           plusw2	equ	0xFDB
  3088                           fsr2h	equ	0xFDA
  3089                           fsr2l	equ	0xFD9
  3090                           status	equ	0xFD8
  3091                           
  3092 ;; *************** function _powerTask *****************
  3093 ;; Defined at:
  3094 ;;		line 43 in file "powerTask.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;		None
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;		None
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  1    wreg      enum E6681
  3101 ;; Registers used:
  3102 ;;		wreg, status,2, status,0, cstack
  3103 ;; Tracked objects:
  3104 ;;		On entry : 3F/0
  3105 ;;		On exit  : 3F/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3108 ;;      Params:         0       0       0       0       0       0       0
  3109 ;;      Locals:         0       0       0       0       0       0       0
  3110 ;;      Temps:          0       0       0       0       0       0       0
  3111 ;;      Totals:         0       0       0       0       0       0       0
  3112 ;;Total ram usage:        0 bytes
  3113 ;; Hardware stack levels used:    1
  3114 ;; Hardware stack levels required when called:    6
  3115 ;; This function calls:
  3116 ;;		_powerTaskPowerDown
  3117 ;;		_powerTaskReset
  3118 ;; This function is called by:
  3119 ;;		_ProtocolTask
  3120 ;;		_ProtocolTaskExecute
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text16
  3125  000C9C                     __ptext16:
  3126                           	opt stack 0
  3127  000C9C                     _powerTask:
  3128                           	opt stack 22
  3129                           
  3130                           ;powerTask.c: 44: switch(PWR_STATE){
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;incstack = 0
  3134  000C9C  D040               	goto	l2201
  3135  000C9E                     l2119:
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;powerTask.c: 46: if(pwrScheduledInitTaskFlag){
  3139  000C9E  5180               	movf	_pwrScheduledInitTaskFlag& (0+255),w,b
  3140  000CA0  B4D8               	btfsc	status,2,c
  3141  000CA2  0C00               	retlw	0
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;powerTask.c: 47: PWR_STATE = TASK_RESET_TASK;
  3145  000CA4  0E01               	movlw	1
  3146  000CA6  6FEF               	movwf	_PWR_STATE& (0+255),b
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;powerTask.c: 48: return(TASK_ON_COURSE);
  3150  000CA8  0C01               	retlw	1
  3151  000CAA                     l2131:
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;powerTask.c: 52: powerTaskReset();
  3155  000CAA  EC9B  F00A         	call	_powerTaskReset	;wreg free
  3156  000CAE  8E89               	bsf	3977,7,c	;volatile
  3157                           
  3158                           ;powerTask.c: 55: powerTaskPwrReadyTimer = 4;
  3159  000CB0  0100               	movlb	0	; () banked
  3160  000CB2  6B75               	clrf	(_powerTaskPwrReadyTimer+1)& (0+255),b
  3161  000CB4  0E04               	movlw	4
  3162  000CB6  6F74               	movwf	_powerTaskPwrReadyTimer& (0+255),b
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;powerTask.c: 59: PWR_STATE = TASK_INIT;
  3166  000CB8  0E02               	movlw	2
  3167  000CBA  6FEF               	movwf	_PWR_STATE& (0+255),b
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;powerTask.c: 60: return(TASK_ON_COURSE);
  3171  000CBC  0C01               	retlw	1
  3172  000CBE                     l2143:
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;powerTask.c: 63: if(powerTaskPwrReadyTimer){
  3176  000CBE  5174               	movf	_powerTaskPwrReadyTimer& (0+255),w,b
  3177  000CC0  1175               	iorwf	(_powerTaskPwrReadyTimer+1)& (0+255),w,b
  3178  000CC2  E001               	bz	l827
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;powerTask.c: 64: return(TASK_ON_COURSE);
  3182  000CC4  0C01               	retlw	1
  3183  000CC6                     l827:
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;powerTask.c: 65: }
  3187                           ;powerTask.c: 69: pwrScheduledInitTaskFlag = 0;
  3188  000CC6  6B80               	clrf	_pwrScheduledInitTaskFlag& (0+255),b
  3189                           
  3190                           ; BSR set to: 0
  3191                           ;powerTask.c: 70: PWR_STATE = TASK_READY;
  3192  000CC8  0E03               	movlw	3
  3193  000CCA  6FEF               	movwf	_PWR_STATE& (0+255),b
  3194                           
  3195                           ;powerTask.c: 71: if(pwrScheduledMeasPowerTaskFlag||pwrScheduledCommPowerTaskFlag){
  3196  000CCC  517F               	movf	_pwrScheduledMeasPowerTaskFlag& (0+255),w,b
  3197  000CCE  A4D8               	btfss	status,2,c
  3198  000CD0  0C01               	retlw	1
  3199                           
  3200                           ; BSR set to: 0
  3201  000CD2  517E               	movf	_pwrScheduledCommPowerTaskFlag& (0+255),w,b
  3202  000CD4  A4D8               	btfss	status,2,c
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;powerTask.c: 72: return(TASK_ON_COURSE);
  3206  000CD6  0C01               	retlw	1
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;powerTask.c: 73: }
  3210                           ;powerTask.c: 74: return(TASK_DATA_READY);
  3211  000CD8  0C02               	retlw	2
  3212  000CDA                     l2161:
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;powerTask.c: 76: if(pwrScheduledMeasPowerTaskFlag){
  3216  000CDA  517F               	movf	_pwrScheduledMeasPowerTaskFlag& (0+255),w,b
  3217  000CDC  E001               	bz	l2163
  3218                           
  3219                           ; BSR set to: 0
  3220                           
  3221                           ;powerTask.c: 77: do { LATAbits.LATA6 = 1; } while(0);
  3222  000CDE  8C89               	bsf	3977,6,c	;volatile
  3223  000CE0                     l2163:
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;powerTask.c: 78: }
  3227                           ;powerTask.c: 79: if(pwrScheduledCommPowerTaskFlag){
  3228  000CE0  517E               	movf	_pwrScheduledCommPowerTaskFlag& (0+255),w,b
  3229  000CE2  E001               	bz	l2165
  3230                           
  3231                           ; BSR set to: 0
  3232                           
  3233                           ;powerTask.c: 80: do { LATCbits.LATC0 = 1; } while(0);
  3234  000CE4  808B               	bsf	3979,0,c	;volatile
  3235  000CE6                     l2165:
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;powerTask.c: 81: }
  3239                           ;powerTask.c: 82: if(pwrScheduledMeasPowerTaskFlag||pwrScheduledCommPowerTaskFlag){
  3240  000CE6  517F               	movf	_pwrScheduledMeasPowerTaskFlag& (0+255),w,b
  3241  000CE8  E103               	bnz	l2169
  3242                           
  3243                           ; BSR set to: 0
  3244  000CEA  517E               	movf	_pwrScheduledCommPowerTaskFlag& (0+255),w,b
  3245  000CEC  B4D8               	btfsc	status,2,c
  3246  000CEE  0C02               	retlw	2
  3247  000CF0                     l2169:
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;powerTask.c: 83: PWR_STATE = TASK_WAITING_DATA;
  3251  000CF0  0E04               	movlw	4
  3252  000CF2  6FEF               	movwf	_PWR_STATE& (0+255),b
  3253                           
  3254                           ;powerTask.c: 84: powerTaskPwrReadyTimer = 2;
  3255  000CF4  6B75               	clrf	(_powerTaskPwrReadyTimer+1)& (0+255),b
  3256  000CF6  0E02               	movlw	2
  3257  000CF8  6F74               	movwf	_powerTaskPwrReadyTimer& (0+255),b
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;powerTask.c: 85: return(TASK_ON_COURSE);
  3261  000CFA  0C01               	retlw	1
  3262  000CFC                     l2179:
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;powerTask.c: 89: if(powerTaskPwrReadyTimer == 0){
  3266  000CFC  5174               	movf	_powerTaskPwrReadyTimer& (0+255),w,b
  3267  000CFE  1175               	iorwf	(_powerTaskPwrReadyTimer+1)& (0+255),w,b
  3268  000D00  A4D8               	btfss	status,2,c
  3269  000D02  0C01               	retlw	1
  3270                           
  3271                           ; BSR set to: 0
  3272                           ;powerTask.c: 90: PWR_STATE = TASK_READY;
  3273  000D04  0E03               	movlw	3
  3274  000D06  6FEF               	movwf	_PWR_STATE& (0+255),b
  3275                           
  3276                           ;powerTask.c: 91: if(pwrScheduledMeasPowerTaskFlag){
  3277  000D08  517F               	movf	_pwrScheduledMeasPowerTaskFlag& (0+255),w,b
  3278  000D0A  E002               	bz	l2185
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;powerTask.c: 92: pwrScheduledMeasPowerTaskFlag = 0;
  3282  000D0C  6B7F               	clrf	_pwrScheduledMeasPowerTaskFlag& (0+255),b
  3283                           
  3284                           ;powerTask.c: 93: }
  3285  000D0E  0C01               	retlw	1
  3286  000D10                     l2185:
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;powerTask.c: 94: else if(pwrScheduledCommPowerTaskFlag){
  3290  000D10  517E               	movf	_pwrScheduledCommPowerTaskFlag& (0+255),w,b
  3291  000D12  A4D8               	btfss	status,2,c
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;powerTask.c: 95: pwrScheduledCommPowerTaskFlag = 0;
  3295  000D14  6B7E               	clrf	_pwrScheduledCommPowerTaskFlag& (0+255),b
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;powerTask.c: 96: }
  3299                           ;powerTask.c: 97: }
  3300                           ;powerTask.c: 98: return(TASK_ON_COURSE);
  3301  000D16  0C01               	retlw	1
  3302  000D18                     l2193:
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;powerTask.c: 100: powerTaskPowerDown();
  3306  000D18  EC40  F00A         	call	_powerTaskPowerDown	;wreg free
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;powerTask.c: 101: return(TASK_ON_COURSE);
  3310  000D1C  0C01               	retlw	1
  3311  000D1E                     l2201:
  3312  000D1E  0100               	movlb	0	; () banked
  3313  000D20  51EF               	movf	_PWR_STATE& (0+255),w,b
  3314                           
  3315                           ; Switch size 1, requested type "space"
  3316                           ; Number of cases is 5, Range of values is 0 to 4
  3317                           ; switch strategies available:
  3318                           ; Name         Instructions Cycles
  3319                           ; simple_byte           16     9 (average)
  3320                           ;	Chosen strategy is simple_byte
  3321  000D22  E0BD               	bz	l2119
  3322  000D24  0A01               	xorlw	1	; case 1
  3323  000D26  E0C1               	bz	l2131
  3324  000D28  0A03               	xorlw	3	; case 2
  3325  000D2A  E0C9               	bz	l2143
  3326  000D2C  0A01               	xorlw	1	; case 3
  3327  000D2E  E0D5               	bz	l2161
  3328  000D30  0A07               	xorlw	7	; case 4
  3329  000D32  E0E4               	bz	l2179
  3330  000D34  D7F1               	goto	l2193
  3331  000D36                     __end_of_powerTask:
  3332                           	opt stack 0
  3333                           tosu	equ	0xFFF
  3334                           tosh	equ	0xFFE
  3335                           tosl	equ	0xFFD
  3336                           pclath	equ	0xFFA
  3337                           tblptru	equ	0xFF8
  3338                           tblptrh	equ	0xFF7
  3339                           tblptrl	equ	0xFF6
  3340                           tablat	equ	0xFF5
  3341                           prodh	equ	0xFF4
  3342                           prodl	equ	0xFF3
  3343                           intcon	equ	0xFF2
  3344                           intcon2	equ	0xFF1
  3345                           postinc0	equ	0xFEE
  3346                           wreg	equ	0xFE8
  3347                           indf1	equ	0xFE7
  3348                           postdec1	equ	0xFE5
  3349                           fsr1h	equ	0xFE2
  3350                           fsr1l	equ	0xFE1
  3351                           indf2	equ	0xFDF
  3352                           postinc2	equ	0xFDE
  3353                           plusw2	equ	0xFDB
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function _powerTaskReset *****************
  3359 ;; Defined at:
  3360 ;;		line 33 in file "powerTask.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;		None
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;		None
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  1    wreg      void 
  3367 ;; Registers used:
  3368 ;;		None
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3374 ;;      Params:         0       0       0       0       0       0       0
  3375 ;;      Locals:         0       0       0       0       0       0       0
  3376 ;;      Temps:          0       0       0       0       0       0       0
  3377 ;;      Totals:         0       0       0       0       0       0       0
  3378 ;;Total ram usage:        0 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    5
  3381 ;; This function calls:
  3382 ;;		Nothing
  3383 ;; This function is called by:
  3384 ;;		_powerTask
  3385 ;; This function uses a non-reentrant model
  3386 ;;
  3387                           
  3388                           	psect	text17
  3389  001536                     __ptext17:
  3390                           	opt stack 0
  3391  001536                     _powerTaskReset:
  3392                           	opt stack 22
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;incstack = 0
  3396                           ;powerTask.c: 34: do { LATAbits.LATA6 = 0; } while(0);
  3397  001536  9C89               	bcf	3977,6,c	;volatile
  3398                           
  3399                           ;powerTask.c: 35: do { LATCbits.LATC0 = 0; } while(0);
  3400  001538  908B               	bcf	3979,0,c	;volatile
  3401                           
  3402                           ;powerTask.c: 36: do { LATAbits.LATA7 = 0; } while(0);
  3403  00153A  9E89               	bcf	3977,7,c	;volatile
  3404  00153C  0012               	return		;funcret
  3405  00153E                     __end_of_powerTaskReset:
  3406                           	opt stack 0
  3407                           tosu	equ	0xFFF
  3408                           tosh	equ	0xFFE
  3409                           tosl	equ	0xFFD
  3410                           pclath	equ	0xFFA
  3411                           tblptru	equ	0xFF8
  3412                           tblptrh	equ	0xFF7
  3413                           tblptrl	equ	0xFF6
  3414                           tablat	equ	0xFF5
  3415                           prodh	equ	0xFF4
  3416                           prodl	equ	0xFF3
  3417                           intcon	equ	0xFF2
  3418                           intcon2	equ	0xFF1
  3419                           postinc0	equ	0xFEE
  3420                           wreg	equ	0xFE8
  3421                           indf1	equ	0xFE7
  3422                           postdec1	equ	0xFE5
  3423                           fsr1h	equ	0xFE2
  3424                           fsr1l	equ	0xFE1
  3425                           indf2	equ	0xFDF
  3426                           postinc2	equ	0xFDE
  3427                           plusw2	equ	0xFDB
  3428                           fsr2h	equ	0xFDA
  3429                           fsr2l	equ	0xFD9
  3430                           status	equ	0xFD8
  3431                           
  3432 ;; *************** function _powerTaskPowerDown *****************
  3433 ;; Defined at:
  3434 ;;		line 23 in file "powerTask.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;		None
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;		None
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      void 
  3441 ;; Registers used:
  3442 ;;		None
  3443 ;; Tracked objects:
  3444 ;;		On entry : 0/0
  3445 ;;		On exit  : 3F/0
  3446 ;;		Unchanged: 0/0
  3447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3448 ;;      Params:         0       0       0       0       0       0       0
  3449 ;;      Locals:         0       0       0       0       0       0       0
  3450 ;;      Temps:          0       0       0       0       0       0       0
  3451 ;;      Totals:         0       0       0       0       0       0       0
  3452 ;;Total ram usage:        0 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    5
  3455 ;; This function calls:
  3456 ;;		Nothing
  3457 ;; This function is called by:
  3458 ;;		_ProtocolTaskPowerDown
  3459 ;;		_powerTask
  3460 ;;		_powerTaskNewTask
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           	psect	text18
  3465  001480                     __ptext18:
  3466                           	opt stack 0
  3467  001480                     _powerTaskPowerDown:
  3468                           	opt stack 24
  3469                           
  3470                           ;powerTask.c: 24: PMD2bits.ADCMD = 1;
  3471                           
  3472                           ;incstack = 0
  3473  001480  010F               	movlb	15	; () banked
  3474  001482  813D               	bsf	61,0,b	;volatile
  3475                           
  3476                           ;powerTask.c: 25: pwrScheduledInitTaskFlag = 0;
  3477  001484  0100               	movlb	0	; () banked
  3478  001486  6B80               	clrf	_pwrScheduledInitTaskFlag& (0+255),b
  3479                           
  3480                           ;powerTask.c: 26: pwrScheduledMeasPowerTaskFlag = 0;
  3481  001488  6B7F               	clrf	_pwrScheduledMeasPowerTaskFlag& (0+255),b
  3482                           
  3483                           ;powerTask.c: 27: pwrScheduledCommPowerTaskFlag = 0;
  3484  00148A  6B7E               	clrf	_pwrScheduledCommPowerTaskFlag& (0+255),b
  3485                           
  3486                           ; BSR set to: 0
  3487                           
  3488                           ;powerTask.c: 28: do { LATAbits.LATA6 = 0; } while(0);
  3489  00148C  9C89               	bcf	3977,6,c	;volatile
  3490                           
  3491                           ; BSR set to: 0
  3492                           
  3493                           ;powerTask.c: 29: do { LATCbits.LATC0 = 0; } while(0);
  3494  00148E  908B               	bcf	3979,0,c	;volatile
  3495                           
  3496                           ; BSR set to: 0
  3497                           
  3498                           ;powerTask.c: 30: do { LATAbits.LATA7 = 0; } while(0);
  3499  001490  9E89               	bcf	3977,7,c	;volatile
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;powerTask.c: 31: PWR_STATE = TASK_PARKED;
  3503  001492  6BEF               	clrf	_PWR_STATE& (0+255),b
  3504                           
  3505                           ; BSR set to: 0
  3506  001494  0012               	return		;funcret
  3507  001496                     __end_of_powerTaskPowerDown:
  3508                           	opt stack 0
  3509                           tosu	equ	0xFFF
  3510                           tosh	equ	0xFFE
  3511                           tosl	equ	0xFFD
  3512                           pclath	equ	0xFFA
  3513                           tblptru	equ	0xFF8
  3514                           tblptrh	equ	0xFF7
  3515                           tblptrl	equ	0xFF6
  3516                           tablat	equ	0xFF5
  3517                           prodh	equ	0xFF4
  3518                           prodl	equ	0xFF3
  3519                           intcon	equ	0xFF2
  3520                           intcon2	equ	0xFF1
  3521                           postinc0	equ	0xFEE
  3522                           wreg	equ	0xFE8
  3523                           indf1	equ	0xFE7
  3524                           postdec1	equ	0xFE5
  3525                           fsr1h	equ	0xFE2
  3526                           fsr1l	equ	0xFE1
  3527                           indf2	equ	0xFDF
  3528                           postinc2	equ	0xFDE
  3529                           plusw2	equ	0xFDB
  3530                           fsr2h	equ	0xFDA
  3531                           fsr2l	equ	0xFD9
  3532                           status	equ	0xFD8
  3533                           
  3534 ;; *************** function _SigfoxTaskReset *****************
  3535 ;; Defined at:
  3536 ;;		line 290 in file "mcc_generated_files/eusart2.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;		None
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;		None
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      void 
  3543 ;; Registers used:
  3544 ;;		wreg, status,2, cstack
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 3F/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3550 ;;      Params:         0       0       0       0       0       0       0
  3551 ;;      Locals:         0       0       0       0       0       0       0
  3552 ;;      Temps:          0       0       0       0       0       0       0
  3553 ;;      Totals:         0       0       0       0       0       0       0
  3554 ;;Total ram usage:        0 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; Hardware stack levels required when called:    6
  3557 ;; This function calls:
  3558 ;;		_EUSART2_Initialize
  3559 ;; This function is called by:
  3560 ;;		_SigfoxTask
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text19
  3565  001420                     __ptext19:
  3566                           	opt stack 0
  3567  001420                     _SigfoxTaskReset:
  3568                           	opt stack 21
  3569                           
  3570                           ;eusart2.c: 291: EUSART2_Initialize();
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;incstack = 0
  3574  001420  EC32  F00A         	call	_EUSART2_Initialize	;wreg free
  3575                           
  3576                           ; BSR set to: 15
  3577                           ;eusart2.c: 292: SFX_STATE = TASK_RESET_TASK;
  3578  001424  0E01               	movlw	1
  3579  001426  0100               	movlb	0	; () banked
  3580  001428  6FF2               	movwf	_SFX_STATE& (0+255),b
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;eusart2.c: 293: SigfoxTxDelay = 2;
  3584  00142A  0E02               	movlw	2
  3585  00142C  6F86               	movwf	_SigfoxTxDelay& (0+255),b
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;eusart2.c: 294: SigfoxCommManagerState = TASK_SEND_COMMAND_SM;
  3589  00142E  6B91               	clrf	_SigfoxCommManagerState& (0+255),b
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;eusart2.c: 295: SigfoxTransactionResult = TASK_ON_COURSE;
  3593  001430  0E01               	movlw	1
  3594  001432  6FF1               	movwf	_SigfoxTransactionResult& (0+255),b
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;eusart2.c: 296: SigfoxTransactionAttemps = 3;
  3598  001434  0E03               	movlw	3
  3599  001436  6F8A               	movwf	_SigfoxTransactionAttemps& (0+255),b
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;eusart2.c: 297: SigfoxTimeOutTimer = 0;
  3603  001438  6B87               	clrf	_SigfoxTimeOutTimer& (0+255),b
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;eusart2.c: 299: SigfoxMsgReceivedFlag = 0;
  3607  00143A  6B90               	clrf	_SigfoxMsgReceivedFlag& (0+255),b
  3608                           
  3609                           ; BSR set to: 0
  3610  00143C  8A8A               	bsf	3978,5,c	;volatile
  3611                           
  3612                           ; BSR set to: 0
  3613  00143E  908A               	bcf	3978,0,c	;volatile
  3614                           
  3615                           ; BSR set to: 0
  3616  001440  948A               	bcf	3978,2,c	;volatile
  3617                           
  3618                           ; BSR set to: 0
  3619  001442  0012               	return		;funcret
  3620  001444                     __end_of_SigfoxTaskReset:
  3621                           	opt stack 0
  3622                           tosu	equ	0xFFF
  3623                           tosh	equ	0xFFE
  3624                           tosl	equ	0xFFD
  3625                           pclath	equ	0xFFA
  3626                           tblptru	equ	0xFF8
  3627                           tblptrh	equ	0xFF7
  3628                           tblptrl	equ	0xFF6
  3629                           tablat	equ	0xFF5
  3630                           prodh	equ	0xFF4
  3631                           prodl	equ	0xFF3
  3632                           intcon	equ	0xFF2
  3633                           intcon2	equ	0xFF1
  3634                           postinc0	equ	0xFEE
  3635                           wreg	equ	0xFE8
  3636                           indf1	equ	0xFE7
  3637                           postdec1	equ	0xFE5
  3638                           fsr1h	equ	0xFE2
  3639                           fsr1l	equ	0xFE1
  3640                           indf2	equ	0xFDF
  3641                           postinc2	equ	0xFDE
  3642                           plusw2	equ	0xFDB
  3643                           fsr2h	equ	0xFDA
  3644                           fsr2l	equ	0xFD9
  3645                           status	equ	0xFD8
  3646                           
  3647 ;; *************** function _EUSART2_Initialize *****************
  3648 ;; Defined at:
  3649 ;;		line 77 in file "mcc_generated_files/eusart2.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;		None
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;		None
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  1    wreg      void 
  3656 ;; Registers used:
  3657 ;;		wreg, status,2
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 3F/F
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3663 ;;      Params:         0       0       0       0       0       0       0
  3664 ;;      Locals:         0       0       0       0       0       0       0
  3665 ;;      Temps:          0       0       0       0       0       0       0
  3666 ;;      Totals:         0       0       0       0       0       0       0
  3667 ;;Total ram usage:        0 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; Hardware stack levels required when called:    5
  3670 ;; This function calls:
  3671 ;;		Nothing
  3672 ;; This function is called by:
  3673 ;;		_SigfoxTaskReset
  3674 ;; This function uses a non-reentrant model
  3675 ;;
  3676                           
  3677                           	psect	text20
  3678  001464                     __ptext20:
  3679                           	opt stack 0
  3680  001464                     _EUSART2_Initialize:
  3681                           	opt stack 21
  3682                           
  3683                           ;eusart2.c: 78: PMD0bits.UART2MD = 0;
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;incstack = 0
  3687  001464  010F               	movlb	15	; () banked
  3688  001466  9F3F               	bcf	63,7,b	;volatile
  3689                           
  3690                           ;eusart2.c: 80: PIE3bits.RC2IE = 0;
  3691  001468  9AA3               	bcf	4003,5,c	;volatile
  3692                           
  3693                           ;eusart2.c: 81: PIE3bits.TX2IE = 0;
  3694  00146A  98A3               	bcf	4003,4,c	;volatile
  3695                           
  3696                           ; BSR set to: 15
  3697                           ;eusart2.c: 86: BAUDCON2 = 0x08;
  3698  00146C  0E08               	movlw	8
  3699  00146E  6E70               	movwf	3952,c	;volatile
  3700                           
  3701                           ;eusart2.c: 88: RCSTA2 = 0x90;
  3702  001470  0E90               	movlw	144
  3703  001472  6E71               	movwf	3953,c	;volatile
  3704                           
  3705                           ;eusart2.c: 90: TXSTA2 = 0x24;
  3706  001474  0E24               	movlw	36
  3707  001476  6E72               	movwf	3954,c	;volatile
  3708                           
  3709                           ;eusart2.c: 93: SPBRG2 = 0x33;
  3710  001478  0E33               	movlw	51
  3711  00147A  6E75               	movwf	3957,c	;volatile
  3712                           
  3713                           ; BSR set to: 15
  3714                           ;eusart2.c: 96: SPBRGH2 = 0x00;
  3715  00147C  6A76               	clrf	3958,c	;volatile
  3716                           
  3717                           ; BSR set to: 15
  3718  00147E  0012               	return		;funcret
  3719  001480                     __end_of_EUSART2_Initialize:
  3720                           	opt stack 0
  3721                           tosu	equ	0xFFF
  3722                           tosh	equ	0xFFE
  3723                           tosl	equ	0xFFD
  3724                           pclath	equ	0xFFA
  3725                           tblptru	equ	0xFF8
  3726                           tblptrh	equ	0xFF7
  3727                           tblptrl	equ	0xFF6
  3728                           tablat	equ	0xFF5
  3729                           prodh	equ	0xFF4
  3730                           prodl	equ	0xFF3
  3731                           intcon	equ	0xFF2
  3732                           intcon2	equ	0xFF1
  3733                           postinc0	equ	0xFEE
  3734                           wreg	equ	0xFE8
  3735                           indf1	equ	0xFE7
  3736                           postdec1	equ	0xFE5
  3737                           fsr1h	equ	0xFE2
  3738                           fsr1l	equ	0xFE1
  3739                           indf2	equ	0xFDF
  3740                           postinc2	equ	0xFDE
  3741                           plusw2	equ	0xFDB
  3742                           fsr2h	equ	0xFDA
  3743                           fsr2l	equ	0xFD9
  3744                           status	equ	0xFD8
  3745                           
  3746 ;; *************** function _SigfoxTaskPowerDown *****************
  3747 ;; Defined at:
  3748 ;;		line 305 in file "mcc_generated_files/eusart2.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;		None
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;		None
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  1    wreg      void 
  3755 ;; Registers used:
  3756 ;;		None
  3757 ;; Tracked objects:
  3758 ;;		On entry : 3F/0
  3759 ;;		On exit  : 3F/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3762 ;;      Params:         0       0       0       0       0       0       0
  3763 ;;      Locals:         0       0       0       0       0       0       0
  3764 ;;      Temps:          0       0       0       0       0       0       0
  3765 ;;      Totals:         0       0       0       0       0       0       0
  3766 ;;Total ram usage:        0 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:    5
  3769 ;; This function calls:
  3770 ;;		Nothing
  3771 ;; This function is called by:
  3772 ;;		_SigfoxTask
  3773 ;;		_ProtocolTaskPowerDown
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text21
  3778  001496                     __ptext21:
  3779                           	opt stack 0
  3780  001496                     _SigfoxTaskPowerDown:
  3781                           	opt stack 24
  3782                           
  3783                           ;eusart2.c: 306: SigfoxScheduledInitTaskFlag = 0;
  3784                           
  3785                           ; BSR set to: 15
  3786                           ;incstack = 0
  3787  001496  0100               	movlb	0	; () banked
  3788  001498  6B8C               	clrf	_SigfoxScheduledInitTaskFlag& (0+255),b
  3789                           
  3790                           ;eusart2.c: 307: SigfoxScheduledPwrDownTaskFlag = 0;
  3791  00149A  6B8D               	clrf	_SigfoxScheduledPwrDownTaskFlag& (0+255),b
  3792                           
  3793                           ;eusart2.c: 308: PMD0bits.UART2MD = 1;
  3794  00149C  010F               	movlb	15	; () banked
  3795  00149E  8F3F               	bsf	63,7,b	;volatile
  3796                           
  3797                           ; BSR set to: 15
  3798                           
  3799                           ;eusart2.c: 309: do { LATBbits.LATB2 = 1; } while(0);
  3800  0014A0  848A               	bsf	3978,2,c	;volatile
  3801                           
  3802                           ; BSR set to: 15
  3803                           
  3804                           ;eusart2.c: 310: do { LATBbits.LATB5 = 0; } while(0);
  3805  0014A2  9A8A               	bcf	3978,5,c	;volatile
  3806                           
  3807                           ; BSR set to: 15
  3808                           
  3809                           ;eusart2.c: 311: do { LATBbits.LATB0 = 1; } while(0);
  3810  0014A4  808A               	bsf	3978,0,c	;volatile
  3811                           
  3812                           ; BSR set to: 15
  3813                           ;eusart2.c: 312: SFX_STATE = TASK_PARKED;
  3814  0014A6  0100               	movlb	0	; () banked
  3815  0014A8  6BF2               	clrf	_SFX_STATE& (0+255),b
  3816                           
  3817                           ; BSR set to: 0
  3818  0014AA  0012               	return		;funcret
  3819  0014AC                     __end_of_SigfoxTaskPowerDown:
  3820                           	opt stack 0
  3821                           tosu	equ	0xFFF
  3822                           tosh	equ	0xFFE
  3823                           tosl	equ	0xFFD
  3824                           pclath	equ	0xFFA
  3825                           tblptru	equ	0xFF8
  3826                           tblptrh	equ	0xFF7
  3827                           tblptrl	equ	0xFF6
  3828                           tablat	equ	0xFF5
  3829                           prodh	equ	0xFF4
  3830                           prodl	equ	0xFF3
  3831                           intcon	equ	0xFF2
  3832                           intcon2	equ	0xFF1
  3833                           postinc0	equ	0xFEE
  3834                           wreg	equ	0xFE8
  3835                           indf1	equ	0xFE7
  3836                           postdec1	equ	0xFE5
  3837                           fsr1h	equ	0xFE2
  3838                           fsr1l	equ	0xFE1
  3839                           indf2	equ	0xFDF
  3840                           postinc2	equ	0xFDE
  3841                           plusw2	equ	0xFDB
  3842                           fsr2h	equ	0xFDA
  3843                           fsr2l	equ	0xFD9
  3844                           status	equ	0xFD8
  3845                           
  3846 ;; *************** function _SigfoxResponseParser *****************
  3847 ;; Defined at:
  3848 ;;		line 167 in file "mcc_generated_files/eusart2.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;		None
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  dumyPtr         2   20[BANK0 ] PTR unsigned char 
  3853 ;;		 -> NULL(0), SigfoxRXBuffer(22), 
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  1    wreg      unsigned char 
  3856 ;; Registers used:
  3857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3858 ;; Tracked objects:
  3859 ;;		On entry : 3F/0
  3860 ;;		On exit  : 3F/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3863 ;;      Params:         0       0       0       0       0       0       0
  3864 ;;      Locals:         0       2       0       0       0       0       0
  3865 ;;      Temps:          0       0       0       0       0       0       0
  3866 ;;      Totals:         0       2       0       0       0       0       0
  3867 ;;Total ram usage:        2 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; Hardware stack levels required when called:    7
  3870 ;; This function calls:
  3871 ;;		_strstr
  3872 ;; This function is called by:
  3873 ;;		_SigfoxTask
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text22
  3878  001444                     __ptext22:
  3879                           	opt stack 0
  3880  001444                     _SigfoxResponseParser:
  3881                           	opt stack 20
  3882                           
  3883                           ;eusart2.c: 168: char * dumyPtr;
  3884                           ;eusart2.c: 169: dumyPtr = strstr(SigfoxRXBuffer,"OK");
  3885                           
  3886                           ; BSR set to: 0
  3887                           ;incstack = 0
  3888  001444  0E19               	movlw	low _SigfoxRXBuffer
  3889  001446  0100               	movlb	0	; () banked
  3890  001448  6FD4               	movwf	strstr@s1& (0+255),b
  3891  00144A  0E01               	movlw	high _SigfoxRXBuffer
  3892  00144C  6FD5               	movwf	(strstr@s1+1)& (0+255),b
  3893  00144E  0E53               	movlw	low STR_1
  3894  001450  6FD6               	movwf	strstr@s2& (0+255),b
  3895  001452  0E06               	movlw	high STR_1
  3896  001454  6FD7               	movwf	(strstr@s2+1)& (0+255),b
  3897  001456  EC24  F007         	call	_strstr	;wreg free
  3898  00145A  C0D4  F0D8         	movff	?_strstr,SigfoxResponseParser@dumyPtr
  3899  00145E  C0D5  F0D9         	movff	?_strstr+1,SigfoxResponseParser@dumyPtr+1
  3900                           
  3901                           ; BSR set to: 0
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;eusart2.c: 171: return(1);
  3905  001462  0C01               	retlw	1	;funcret
  3906  001464                     __end_of_SigfoxResponseParser:
  3907                           	opt stack 0
  3908                           tosu	equ	0xFFF
  3909                           tosh	equ	0xFFE
  3910                           tosl	equ	0xFFD
  3911                           pclath	equ	0xFFA
  3912                           tblptru	equ	0xFF8
  3913                           tblptrh	equ	0xFF7
  3914                           tblptrl	equ	0xFF6
  3915                           tablat	equ	0xFF5
  3916                           prodh	equ	0xFF4
  3917                           prodl	equ	0xFF3
  3918                           intcon	equ	0xFF2
  3919                           intcon2	equ	0xFF1
  3920                           postinc0	equ	0xFEE
  3921                           wreg	equ	0xFE8
  3922                           indf1	equ	0xFE7
  3923                           postdec1	equ	0xFE5
  3924                           fsr1h	equ	0xFE2
  3925                           fsr1l	equ	0xFE1
  3926                           indf2	equ	0xFDF
  3927                           postinc2	equ	0xFDE
  3928                           plusw2	equ	0xFDB
  3929                           fsr2h	equ	0xFDA
  3930                           fsr2l	equ	0xFD9
  3931                           status	equ	0xFD8
  3932                           
  3933 ;; *************** function _strstr *****************
  3934 ;; Defined at:
  3935 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strstr.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;  s1              2   16[BANK0 ] PTR const unsigned char 
  3938 ;;		 -> NULL(0), SigfoxRXBuffer(22), 
  3939 ;;  s2              2   18[BANK0 ] PTR const unsigned char 
  3940 ;;		 -> STR_1(3), 
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;		None
  3943 ;; Return value:  Size  Location     Type
  3944 ;;                  2   16[BANK0 ] PTR unsigned char 
  3945 ;; Registers used:
  3946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3947 ;; Tracked objects:
  3948 ;;		On entry : 3F/0
  3949 ;;		On exit  : 3F/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3952 ;;      Params:         0       4       0       0       0       0       0
  3953 ;;      Locals:         0       0       0       0       0       0       0
  3954 ;;      Temps:          0       0       0       0       0       0       0
  3955 ;;      Totals:         0       4       0       0       0       0       0
  3956 ;;Total ram usage:        4 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; Hardware stack levels required when called:    6
  3959 ;; This function calls:
  3960 ;;		_strchr
  3961 ;;		_strlen
  3962 ;;		_strncmp
  3963 ;; This function is called by:
  3964 ;;		_SigfoxResponseParser
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text23
  3969  000E48                     __ptext23:
  3970                           	opt stack 0
  3971  000E48                     _strstr:
  3972                           	opt stack 20
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;incstack = 0
  3976  000E48  D030               	goto	l2735
  3977  000E4A                     l2727:
  3978                           
  3979                           ; BSR set to: 0
  3980  000E4A  C0D4  F0CD         	movff	strstr@s1,strncmp@s1
  3981  000E4E  C0D5  F0CE         	movff	strstr@s1+1,strncmp@s1+1
  3982  000E52  C0D6  F0CF         	movff	strstr@s2,strncmp@s2
  3983  000E56  C0D7  F0D0         	movff	strstr@s2+1,strncmp@s2+1
  3984  000E5A  C0D6  F0C9         	movff	strstr@s2,strlen@s
  3985  000E5E  C0D7  F0CA         	movff	strstr@s2+1,strlen@s+1
  3986  000E62  EC65  F009         	call	_strlen	;wreg free
  3987  000E66  C0C9  F0D1         	movff	?_strlen,strncmp@len
  3988  000E6A  C0CA  F0D2         	movff	?_strlen+1,strncmp@len+1
  3989  000E6E  ECD4  F007         	call	_strncmp	;wreg free
  3990  000E72  51CD               	movf	?_strncmp& (0+255),w,b
  3991  000E74  11CE               	iorwf	(?_strncmp+1)& (0+255),w,b
  3992  000E76  E105               	bnz	l2733
  3993                           
  3994                           ; BSR set to: 0
  3995  000E78  C0D4  F0D4         	movff	strstr@s1,?_strstr
  3996  000E7C  C0D5  F0D5         	movff	strstr@s1+1,?_strstr+1
  3997  000E80  0012               	return	
  3998  000E82                     l2733:
  3999                           
  4000                           ; BSR set to: 0
  4001  000E82  29D4               	incf	strstr@s1& (0+255),w,b
  4002  000E84  6FC9               	movwf	strchr@ptr& (0+255),b
  4003  000E86  0E00               	movlw	0
  4004  000E88  21D5               	addwfc	(strstr@s1+1)& (0+255),w,b
  4005  000E8A  6FCA               	movwf	(strchr@ptr+1)& (0+255),b
  4006  000E8C  C0D6  FFF6         	movff	strstr@s2,tblptrl
  4007  000E90  C0D7  FFF7         	movff	strstr@s2+1,tblptrh
  4008  000E94                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4009  000E94  6AF8               	clrf	tblptru,c
  4010  000E96                     	endif
  4011  000E96                     	if	0	;tblptru may be non-zero
  4012  000E96                     	endif
  4013  000E96  0008               	tblrd		*
  4014  000E98  50F5               	movf	tablat,w,c
  4015  000E9A  6FCB               	movwf	strchr@chr& (0+255),b
  4016  000E9C  6BCC               	clrf	(strchr@chr+1)& (0+255),b
  4017  000E9E  EC7D  F009         	call	_strchr	;wreg free
  4018  000EA2  C0C9  F0D4         	movff	?_strchr,strstr@s1
  4019  000EA6  C0CA  F0D5         	movff	?_strchr+1,strstr@s1+1
  4020  000EAA                     l2735:
  4021  000EAA  0100               	movlb	0	; () banked
  4022  000EAC  51D4               	movf	strstr@s1& (0+255),w,b
  4023  000EAE  11D5               	iorwf	(strstr@s1+1)& (0+255),w,b
  4024  000EB0  E006               	bz	l1497
  4025                           
  4026                           ; BSR set to: 0
  4027  000EB2  C0D4  FFD9         	movff	strstr@s1,fsr2l
  4028  000EB6  C0D5  FFDA         	movff	strstr@s1+1,fsr2h
  4029  000EBA  50DF               	movf	indf2,w,c
  4030  000EBC  E1C6               	bnz	l2727
  4031  000EBE                     l1497:
  4032                           
  4033                           ; BSR set to: 0
  4034  000EBE  6BD4               	clrf	?_strstr& (0+255),b
  4035  000EC0  6BD5               	clrf	(?_strstr+1)& (0+255),b
  4036                           
  4037                           ; BSR set to: 0
  4038  000EC2  0012               	return		;funcret
  4039  000EC4                     __end_of_strstr:
  4040                           	opt stack 0
  4041                           tosu	equ	0xFFF
  4042                           tosh	equ	0xFFE
  4043                           tosl	equ	0xFFD
  4044                           pclath	equ	0xFFA
  4045                           tblptru	equ	0xFF8
  4046                           tblptrh	equ	0xFF7
  4047                           tblptrl	equ	0xFF6
  4048                           tablat	equ	0xFF5
  4049                           prodh	equ	0xFF4
  4050                           prodl	equ	0xFF3
  4051                           intcon	equ	0xFF2
  4052                           intcon2	equ	0xFF1
  4053                           postinc0	equ	0xFEE
  4054                           wreg	equ	0xFE8
  4055                           indf1	equ	0xFE7
  4056                           postdec1	equ	0xFE5
  4057                           fsr1h	equ	0xFE2
  4058                           fsr1l	equ	0xFE1
  4059                           indf2	equ	0xFDF
  4060                           postinc2	equ	0xFDE
  4061                           plusw2	equ	0xFDB
  4062                           fsr2h	equ	0xFDA
  4063                           fsr2l	equ	0xFD9
  4064                           status	equ	0xFD8
  4065                           
  4066 ;; *************** function _strncmp *****************
  4067 ;; Defined at:
  4068 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  4069 ;; Parameters:    Size  Location     Type
  4070 ;;  s1              2    9[BANK0 ] PTR const unsigned char 
  4071 ;;		 -> NULL(0), SigfoxRXBuffer(22), 
  4072 ;;  s2              2   11[BANK0 ] PTR const unsigned char 
  4073 ;;		 -> STR_1(3), 
  4074 ;;  len             2   13[BANK0 ] unsigned int 
  4075 ;; Auto vars:     Size  Location     Type
  4076 ;;		None
  4077 ;; Return value:  Size  Location     Type
  4078 ;;                  2    9[BANK0 ] int 
  4079 ;; Registers used:
  4080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4081 ;; Tracked objects:
  4082 ;;		On entry : 3F/0
  4083 ;;		On exit  : 3F/0
  4084 ;;		Unchanged: 0/0
  4085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4086 ;;      Params:         0       6       0       0       0       0       0
  4087 ;;      Locals:         0       0       0       0       0       0       0
  4088 ;;      Temps:          0       1       0       0       0       0       0
  4089 ;;      Totals:         0       7       0       0       0       0       0
  4090 ;;Total ram usage:        7 bytes
  4091 ;; Hardware stack levels used:    1
  4092 ;; Hardware stack levels required when called:    5
  4093 ;; This function calls:
  4094 ;;		Nothing
  4095 ;; This function is called by:
  4096 ;;		_strstr
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100                           	psect	text24
  4101  000FA8                     __ptext24:
  4102                           	opt stack 0
  4103  000FA8                     _strncmp:
  4104                           	opt stack 20
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;incstack = 0
  4108  000FA8  D018               	goto	l2715
  4109  000FAA                     l2705:
  4110                           
  4111                           ; BSR set to: 0
  4112  000FAA  C0CD  FFD9         	movff	strncmp@s1,fsr2l
  4113  000FAE  C0CE  FFDA         	movff	strncmp@s1+1,fsr2h
  4114  000FB2  50DF               	movf	indf2,w,c
  4115  000FB4  E005               	bz	l2709
  4116                           
  4117                           ; BSR set to: 0
  4118  000FB6  C0CD  FFD9         	movff	strncmp@s1,fsr2l
  4119  000FBA  D81A               	call	PL45	;call to abstracted procedure
  4120  000FBC  19D3               	xorwf	??_strncmp& (0+255),w,b
  4121  000FBE  E009               	bz	l2713
  4122  000FC0                     l2709:
  4123                           
  4124                           ; BSR set to: 0
  4125  000FC0  C0CD  FFD9         	movff	strncmp@s1,fsr2l
  4126  000FC4  D815               	call	PL45	;call to abstracted procedure
  4127  000FC6  5DD3               	subwf	??_strncmp& (0+255),w,b
  4128  000FC8  6FCD               	movwf	?_strncmp& (0+255),b
  4129  000FCA  6BCE               	clrf	(?_strncmp+1)& (0+255),b
  4130  000FCC  A0D8               	btfss	status,0,c
  4131  000FCE  07CE               	decf	(?_strncmp+1)& (0+255),f,b
  4132  000FD0  0012               	return	
  4133  000FD2                     l2713:
  4134                           
  4135                           ; BSR set to: 0
  4136  000FD2  4BCD               	infsnz	strncmp@s1& (0+255),f,b
  4137  000FD4  2BCE               	incf	(strncmp@s1+1)& (0+255),f,b
  4138  000FD6  4BCF               	infsnz	strncmp@s2& (0+255),f,b
  4139  000FD8  2BD0               	incf	(strncmp@s2+1)& (0+255),f,b
  4140  000FDA                     l2715:
  4141  000FDA  0100               	movlb	0	; () banked
  4142  000FDC  07D1               	decf	strncmp@len& (0+255),f,b
  4143  000FDE  A0D8               	btfss	status,0,c
  4144  000FE0  07D2               	decf	(strncmp@len+1)& (0+255),f,b
  4145  000FE2  29D1               	incf	strncmp@len& (0+255),w,b
  4146  000FE4  E1E2               	bnz	l2705
  4147  000FE6  29D2               	incf	(strncmp@len+1)& (0+255),w,b
  4148  000FE8  E1E0               	bnz	l2705
  4149                           
  4150                           ; BSR set to: 0
  4151  000FEA  6BCD               	clrf	?_strncmp& (0+255),b
  4152  000FEC  6BCE               	clrf	(?_strncmp+1)& (0+255),b
  4153                           
  4154                           ; BSR set to: 0
  4155  000FEE  0012               	return		;funcret
  4156  000FF0                     __end_of_strncmp:
  4157                           	opt stack 0
  4158  000FF0                     PL45:
  4159                           	opt stack 20
  4160  000FF0  C0CE  FFDA         	movff	strncmp@s1+1,fsr2h
  4161  000FF4  50DF               	movf	indf2,w,c
  4162  000FF6  6FD3               	movwf	??_strncmp& (0+255),b
  4163  000FF8  C0CF  FFF6         	movff	strncmp@s2,tblptrl
  4164  000FFC  C0D0  FFF7         	movff	strncmp@s2+1,tblptrh
  4165  001000                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4166  001000  6AF8               	clrf	tblptru,c
  4167  001002                     	endif
  4168  001002                     	if	0	;tblptru may be non-zero
  4169  001002                     	endif
  4170  001002  0008               	tblrd		*
  4171  001004  50F5               	movf	tablat,w,c
  4172  001006  0012               	return	
  4173  001008                     __end_ofPL45:
  4174                           	opt stack 0
  4175                           tosu	equ	0xFFF
  4176                           tosh	equ	0xFFE
  4177                           tosl	equ	0xFFD
  4178                           pclath	equ	0xFFA
  4179                           tblptru	equ	0xFF8
  4180                           tblptrh	equ	0xFF7
  4181                           tblptrl	equ	0xFF6
  4182                           tablat	equ	0xFF5
  4183                           prodh	equ	0xFF4
  4184                           prodl	equ	0xFF3
  4185                           intcon	equ	0xFF2
  4186                           intcon2	equ	0xFF1
  4187                           postinc0	equ	0xFEE
  4188                           wreg	equ	0xFE8
  4189                           indf1	equ	0xFE7
  4190                           postdec1	equ	0xFE5
  4191                           fsr1h	equ	0xFE2
  4192                           fsr1l	equ	0xFE1
  4193                           indf2	equ	0xFDF
  4194                           postinc2	equ	0xFDE
  4195                           plusw2	equ	0xFDB
  4196                           fsr2h	equ	0xFDA
  4197                           fsr2l	equ	0xFD9
  4198                           status	equ	0xFD8
  4199                           
  4200 ;; *************** function _strlen *****************
  4201 ;; Defined at:
  4202 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strlen.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;  s               2    5[BANK0 ] PTR const unsigned char 
  4205 ;;		 -> STR_1(3), 
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;  cp              2    7[BANK0 ] PTR const unsigned char 
  4208 ;;		 -> STR_1(3), 
  4209 ;; Return value:  Size  Location     Type
  4210 ;;                  2    5[BANK0 ] unsigned int 
  4211 ;; Registers used:
  4212 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 3F/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4218 ;;      Params:         0       2       0       0       0       0       0
  4219 ;;      Locals:         0       2       0       0       0       0       0
  4220 ;;      Temps:          0       0       0       0       0       0       0
  4221 ;;      Totals:         0       4       0       0       0       0       0
  4222 ;;Total ram usage:        4 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    5
  4225 ;; This function calls:
  4226 ;;		Nothing
  4227 ;; This function is called by:
  4228 ;;		_strstr
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           	psect	text25
  4233  0012CA                     __ptext25:
  4234                           	opt stack 0
  4235  0012CA                     _strlen:
  4236                           	opt stack 20
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;incstack = 0
  4240  0012CA  C0C9  F0CB         	movff	strlen@s,strlen@cp
  4241  0012CE  C0CA  F0CC         	movff	strlen@s+1,strlen@cp+1
  4242  0012D2  D003               	goto	l2697
  4243  0012D4                     l2695:
  4244  0012D4  0100               	movlb	0	; () banked
  4245  0012D6  4BCB               	infsnz	strlen@cp& (0+255),f,b
  4246  0012D8  2BCC               	incf	(strlen@cp+1)& (0+255),f,b
  4247  0012DA                     l2697:
  4248  0012DA  C0CB  FFF6         	movff	strlen@cp,tblptrl
  4249  0012DE  C0CC  FFF7         	movff	strlen@cp+1,tblptrh
  4250  0012E2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4251  0012E2  6AF8               	clrf	tblptru,c
  4252  0012E4                     	endif
  4253  0012E4                     	if	0	;tblptru may be non-zero
  4254  0012E4                     	endif
  4255  0012E4  0008               	tblrd		*
  4256  0012E6  50F5               	movf	tablat,w,c
  4257  0012E8  E1F5               	bnz	l2695
  4258  0012EA  0100               	movlb	0	; () banked
  4259  0012EC  51C9               	movf	strlen@s& (0+255),w,b
  4260  0012EE  5DCB               	subwf	strlen@cp& (0+255),w,b
  4261  0012F0  6FC9               	movwf	?_strlen& (0+255),b
  4262  0012F2  51CA               	movf	(strlen@s+1)& (0+255),w,b
  4263  0012F4  59CC               	subwfb	(strlen@cp+1)& (0+255),w,b
  4264  0012F6  6FCA               	movwf	(?_strlen+1)& (0+255),b
  4265                           
  4266                           ; BSR set to: 0
  4267  0012F8  0012               	return		;funcret
  4268  0012FA                     __end_of_strlen:
  4269                           	opt stack 0
  4270                           tosu	equ	0xFFF
  4271                           tosh	equ	0xFFE
  4272                           tosl	equ	0xFFD
  4273                           pclath	equ	0xFFA
  4274                           tblptru	equ	0xFF8
  4275                           tblptrh	equ	0xFF7
  4276                           tblptrl	equ	0xFF6
  4277                           tablat	equ	0xFF5
  4278                           prodh	equ	0xFF4
  4279                           prodl	equ	0xFF3
  4280                           intcon	equ	0xFF2
  4281                           intcon2	equ	0xFF1
  4282                           postinc0	equ	0xFEE
  4283                           wreg	equ	0xFE8
  4284                           indf1	equ	0xFE7
  4285                           postdec1	equ	0xFE5
  4286                           fsr1h	equ	0xFE2
  4287                           fsr1l	equ	0xFE1
  4288                           indf2	equ	0xFDF
  4289                           postinc2	equ	0xFDE
  4290                           plusw2	equ	0xFDB
  4291                           fsr2h	equ	0xFDA
  4292                           fsr2l	equ	0xFD9
  4293                           status	equ	0xFD8
  4294                           
  4295 ;; *************** function _strchr *****************
  4296 ;; Defined at:
  4297 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strchr.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;  ptr             2    5[BANK0 ] PTR const unsigned char 
  4300 ;;		 -> NULL(0), SigfoxRXBuffer(22), 
  4301 ;;  chr             2    7[BANK0 ] int 
  4302 ;; Auto vars:     Size  Location     Type
  4303 ;;		None
  4304 ;; Return value:  Size  Location     Type
  4305 ;;                  2    5[BANK0 ] PTR unsigned char 
  4306 ;; Registers used:
  4307 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4308 ;; Tracked objects:
  4309 ;;		On entry : 3F/0
  4310 ;;		On exit  : 3F/0
  4311 ;;		Unchanged: 0/0
  4312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4313 ;;      Params:         0       4       0       0       0       0       0
  4314 ;;      Locals:         0       0       0       0       0       0       0
  4315 ;;      Temps:          0       1       0       0       0       0       0
  4316 ;;      Totals:         0       5       0       0       0       0       0
  4317 ;;Total ram usage:        5 bytes
  4318 ;; Hardware stack levels used:    1
  4319 ;; Hardware stack levels required when called:    5
  4320 ;; This function calls:
  4321 ;;		Nothing
  4322 ;; This function is called by:
  4323 ;;		_strstr
  4324 ;; This function uses a non-reentrant model
  4325 ;;
  4326                           
  4327                           	psect	text26
  4328  0012FA                     __ptext26:
  4329                           	opt stack 0
  4330  0012FA                     _strchr:
  4331                           	opt stack 20
  4332  0012FA  D811               	call	PL49	;call to abstracted procedure
  4333  0012FC  0100               	movlb	0	; () banked
  4334  0012FE  51CB               	movf	strchr@chr& (0+255),w,b
  4335  001300  18DE               	xorwf	postinc2,w,c
  4336  001302  E105               	bnz	l2723
  4337                           
  4338                           ; BSR set to: 0
  4339  001304  C0C9  F0C9         	movff	strchr@ptr,?_strchr
  4340  001308  C0CA  F0CA         	movff	strchr@ptr+1,?_strchr+1
  4341  00130C  0012               	return	
  4342  00130E                     l2723:
  4343                           
  4344                           ; BSR set to: 0
  4345  00130E  D807               	call	PL49	;call to abstracted procedure
  4346  001310  4BC9               	infsnz	strchr@ptr& (0+255),f,b
  4347  001312  2BCA               	incf	(strchr@ptr+1)& (0+255),f,b
  4348  001314  50DF               	movf	indf2,w,c
  4349  001316  E1F1               	bnz	l2717
  4350                           
  4351                           ; BSR set to: 0
  4352  001318  6BC9               	clrf	?_strchr& (0+255),b
  4353  00131A  6BCA               	clrf	(?_strchr+1)& (0+255),b
  4354                           
  4355                           ; BSR set to: 0
  4356  00131C  0012               	return		;funcret
  4357  00131E                     __end_of_strchr:
  4358                           	opt stack 0
  4359  00131E                     PL49:
  4360                           	opt stack 20
  4361  00131E  C0C9  FFD9         	movff	strchr@ptr,fsr2l
  4362  001322  C0CA  FFDA         	movff	strchr@ptr+1,fsr2h
  4363  001326  0012               	return	
  4364  001328                     __end_ofPL49:
  4365                           	opt stack 0
  4366                           tosu	equ	0xFFF
  4367                           tosh	equ	0xFFE
  4368                           tosl	equ	0xFFD
  4369                           pclath	equ	0xFFA
  4370                           tblptru	equ	0xFF8
  4371                           tblptrh	equ	0xFF7
  4372                           tblptrl	equ	0xFF6
  4373                           tablat	equ	0xFF5
  4374                           prodh	equ	0xFF4
  4375                           prodl	equ	0xFF3
  4376                           intcon	equ	0xFF2
  4377                           intcon2	equ	0xFF1
  4378                           postinc0	equ	0xFEE
  4379                           wreg	equ	0xFE8
  4380                           indf1	equ	0xFE7
  4381                           postdec1	equ	0xFE5
  4382                           fsr1h	equ	0xFE2
  4383                           fsr1l	equ	0xFE1
  4384                           indf2	equ	0xFDF
  4385                           postinc2	equ	0xFDE
  4386                           plusw2	equ	0xFDB
  4387                           fsr2h	equ	0xFDA
  4388                           fsr2l	equ	0xFD9
  4389                           status	equ	0xFD8
  4390                           
  4391 ;; *************** function _SigfoxCommManager *****************
  4392 ;; Defined at:
  4393 ;;		line 249 in file "mcc_generated_files/eusart2.c"
  4394 ;; Parameters:    Size  Location     Type
  4395 ;;  SigfoxComman    1    wreg     enum E6710
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;  SigfoxComman    1   20[BANK0 ] enum E6710
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  1    wreg      enum E6665
  4400 ;; Registers used:
  4401 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 3F/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4407 ;;      Params:         0       0       0       0       0       0       0
  4408 ;;      Locals:         0       1       0       0       0       0       0
  4409 ;;      Temps:          0       0       0       0       0       0       0
  4410 ;;      Totals:         0       1       0       0       0       0       0
  4411 ;;Total ram usage:        1 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; Hardware stack levels required when called:    7
  4414 ;; This function calls:
  4415 ;;		_SigfoxCommandSelector
  4416 ;;		_SigfoxTXReady
  4417 ;;		_SigfoxTransmit
  4418 ;;		_SigfoxVerifyTransactionStatus
  4419 ;; This function is called by:
  4420 ;;		_SigfoxTask
  4421 ;; This function uses a non-reentrant model
  4422 ;;
  4423                           
  4424                           	psect	text27
  4425  001008                     __ptext27:
  4426                           	opt stack 0
  4427  001008                     _SigfoxCommManager:
  4428                           	opt stack 20
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;incstack = 0
  4432                           ;SigfoxCommManager@SigfoxCommand stored from wreg
  4433  001008  0100               	movlb	0	; () banked
  4434  00100A  6FD8               	movwf	SigfoxCommManager@SigfoxCommand& (0+255),b
  4435                           
  4436                           ;eusart2.c: 251: SigfoxTransactionResult = TASK_ON_COURSE;
  4437  00100C  0E01               	movlw	1
  4438  00100E  6FF1               	movwf	_SigfoxTransactionResult& (0+255),b
  4439                           
  4440                           ;eusart2.c: 252: switch(SigfoxCommManagerState){
  4441  001010  D01C               	goto	l2803
  4442  001012                     l2775:
  4443                           
  4444                           ; BSR set to: 0
  4445                           ;eusart2.c: 254: if(SigfoxTXReady()){
  4446  001012  EC82  F00A         	call	_SigfoxTXReady	;wreg free
  4447  001016  0900               	iorlw	0
  4448  001018  E01D               	bz	l2805
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;eusart2.c: 255: SigfoxCommandSelector(SigfoxCommand);
  4452  00101A  51D8               	movf	SigfoxCommManager@SigfoxCommand& (0+255),w,b
  4453  00101C  EC27  F005         	call	_SigfoxCommandSelector
  4454                           
  4455                           ;eusart2.c: 256: SigfoxCommManagerState = TASK_DETECT_TRANSACTION_END_SM;
  4456  001020  0E01               	movlw	1
  4457  001022  0100               	movlb	0	; () banked
  4458  001024  6F91               	movwf	_SigfoxCommManagerState& (0+255),b
  4459                           
  4460                           ; BSR set to: 0
  4461                           ;eusart2.c: 257: SigfoxTransmit();
  4462  001026  EC9F  F00A         	call	_SigfoxTransmit	;wreg free
  4463  00102A  0C01               	retlw	1
  4464  00102C                     l2783:
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;eusart2.c: 261: if(SigfoxTimeOutTimer == 0){
  4468  00102C  5187               	movf	_SigfoxTimeOutTimer& (0+255),w,b
  4469  00102E  E104               	bnz	l2791
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;eusart2.c: 262: PIE3bits.TX2IE = 0;
  4473  001030  98A3               	bcf	4003,4,c	;volatile
  4474                           
  4475                           ;eusart2.c: 263: PIE3bits.RC2IE = 0;
  4476  001032  9AA3               	bcf	4003,5,c	;volatile
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;eusart2.c: 264: return(SigfoxVerifyTransactionStatus());
  4480  001034  EFAA  F009         	goto	_SigfoxVerifyTransactionStatus	;wreg free
  4481  001038                     l2791:
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;eusart2.c: 265: }
  4485                           ;eusart2.c: 266: if(SigfoxMsgReceivedFlag){
  4486  001038  5190               	movf	_SigfoxMsgReceivedFlag& (0+255),w,b
  4487  00103A  E00C               	bz	l2805
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;eusart2.c: 267: SigfoxTimeOutTimer = 0;
  4491  00103C  6B87               	clrf	_SigfoxTimeOutTimer& (0+255),b
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;eusart2.c: 268: return(SigfoxVerifyTransactionStatus());
  4495  00103E  EFAA  F009         	goto	_SigfoxVerifyTransactionStatus	;wreg free
  4496  001042                     l298:
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;eusart2.c: 272: SigfoxCommManagerState = TASK_SEND_COMMAND_SM;
  4500  001042  6B91               	clrf	_SigfoxCommManagerState& (0+255),b
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;eusart2.c: 273: SigfoxTxDelay = 2;
  4504  001044  0E02               	movlw	2
  4505  001046  6F86               	movwf	_SigfoxTxDelay& (0+255),b
  4506                           
  4507                           ;eusart2.c: 274: break;
  4508  001048  0C01               	retlw	1
  4509  00104A                     l2803:
  4510                           
  4511                           ; BSR set to: 0
  4512  00104A  5191               	movf	_SigfoxCommManagerState& (0+255),w,b
  4513                           
  4514                           ; Switch size 1, requested type "space"
  4515                           ; Number of cases is 2, Range of values is 0 to 1
  4516                           ; switch strategies available:
  4517                           ; Name         Instructions Cycles
  4518                           ; simple_byte            7     4 (average)
  4519                           ;	Chosen strategy is simple_byte
  4520  00104C  E0E2               	bz	l2775
  4521  00104E  0A01               	xorlw	1	; case 1
  4522  001050  E0ED               	bz	l2783
  4523  001052  D7F7               	goto	l298
  4524  001054                     l2805:
  4525                           
  4526                           ; BSR set to: 0
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;eusart2.c: 276: return(TASK_ON_COURSE);
  4530  001054  0C01               	retlw	1	;funcret
  4531  001056                     __end_of_SigfoxCommManager:
  4532                           	opt stack 0
  4533                           tosu	equ	0xFFF
  4534                           tosh	equ	0xFFE
  4535                           tosl	equ	0xFFD
  4536                           pclath	equ	0xFFA
  4537                           tblptru	equ	0xFF8
  4538                           tblptrh	equ	0xFF7
  4539                           tblptrl	equ	0xFF6
  4540                           tablat	equ	0xFF5
  4541                           prodh	equ	0xFF4
  4542                           prodl	equ	0xFF3
  4543                           intcon	equ	0xFF2
  4544                           intcon2	equ	0xFF1
  4545                           postinc0	equ	0xFEE
  4546                           wreg	equ	0xFE8
  4547                           indf1	equ	0xFE7
  4548                           postdec1	equ	0xFE5
  4549                           fsr1h	equ	0xFE2
  4550                           fsr1l	equ	0xFE1
  4551                           indf2	equ	0xFDF
  4552                           postinc2	equ	0xFDE
  4553                           plusw2	equ	0xFDB
  4554                           fsr2h	equ	0xFDA
  4555                           fsr2l	equ	0xFD9
  4556                           status	equ	0xFD8
  4557                           
  4558 ;; *************** function _SigfoxVerifyTransactionStatus *****************
  4559 ;; Defined at:
  4560 ;;		line 229 in file "mcc_generated_files/eusart2.c"
  4561 ;; Parameters:    Size  Location     Type
  4562 ;;		None
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;		None
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  1    wreg      enum E6665
  4567 ;; Registers used:
  4568 ;;		wreg, status,2, status,0
  4569 ;; Tracked objects:
  4570 ;;		On entry : 3F/0
  4571 ;;		On exit  : 3F/0
  4572 ;;		Unchanged: 0/0
  4573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4574 ;;      Params:         0       0       0       0       0       0       0
  4575 ;;      Locals:         0       0       0       0       0       0       0
  4576 ;;      Temps:          0       0       0       0       0       0       0
  4577 ;;      Totals:         0       0       0       0       0       0       0
  4578 ;;Total ram usage:        0 bytes
  4579 ;; Hardware stack levels used:    1
  4580 ;; Hardware stack levels required when called:    5
  4581 ;; This function calls:
  4582 ;;		Nothing
  4583 ;; This function is called by:
  4584 ;;		_SigfoxCommManager
  4585 ;; This function uses a non-reentrant model
  4586 ;;
  4587                           
  4588                           	psect	text28
  4589  001354                     __ptext28:
  4590                           	opt stack 0
  4591  001354                     _SigfoxVerifyTransactionStatus:
  4592                           	opt stack 21
  4593                           
  4594                           ;eusart2.c: 231: SigfoxTxDelay = 2;
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;incstack = 0
  4598  001354  0E02               	movlw	2
  4599  001356  0100               	movlb	0	; () banked
  4600  001358  6F86               	movwf	_SigfoxTxDelay& (0+255),b
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;eusart2.c: 232: SigfoxCommManagerState = TASK_SEND_COMMAND_SM;
  4604  00135A  6B91               	clrf	_SigfoxCommManagerState& (0+255),b
  4605                           
  4606                           ;eusart2.c: 233: if(SigfoxMsgReceivedFlag){
  4607  00135C  5190               	movf	_SigfoxMsgReceivedFlag& (0+255),w,b
  4608  00135E  E004               	bz	l1715
  4609                           
  4610                           ; BSR set to: 0
  4611                           ;eusart2.c: 234: SigfoxTransactionResult = TASK_DATA_READY;
  4612  001360  0E02               	movlw	2
  4613  001362  6FF1               	movwf	_SigfoxTransactionResult& (0+255),b
  4614                           
  4615                           ; BSR set to: 0
  4616                           ;eusart2.c: 235: SigfoxMsgReceivedFlag = 0;
  4617  001364  6B90               	clrf	_SigfoxMsgReceivedFlag& (0+255),b
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;eusart2.c: 236: return(TASK_DATA_READY);
  4621  001366  0C02               	retlw	2
  4622  001368                     l1715:
  4623                           
  4624                           ; BSR set to: 0
  4625                           ;eusart2.c: 237: }
  4626                           ;eusart2.c: 238: if(SigfoxTransactionAttemps){
  4627  001368  518A               	movf	_SigfoxTransactionAttemps& (0+255),w,b
  4628  00136A  E001               	bz	l1719
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;eusart2.c: 239: SigfoxTransactionAttemps--;
  4632  00136C  078A               	decf	_SigfoxTransactionAttemps& (0+255),f,b
  4633  00136E                     l1719:
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;eusart2.c: 240: }
  4637                           ;eusart2.c: 241: if(SigfoxTransactionAttemps == 0){
  4638  00136E  518A               	movf	_SigfoxTransactionAttemps& (0+255),w,b
  4639  001370  E104               	bnz	l1729
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;eusart2.c: 242: SFX_STATE = TASK_RESET_TASK;
  4643  001372  0E01               	movlw	1
  4644  001374  6FF2               	movwf	_SFX_STATE& (0+255),b
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;eusart2.c: 243: SigfoxTransactionResult = TASK_NO_SENSOR_FOUND;
  4648  001376  6BF1               	clrf	_SigfoxTransactionResult& (0+255),b
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;eusart2.c: 244: return(TASK_NO_SENSOR_FOUND);
  4652  001378  0C00               	retlw	0
  4653  00137A                     l1729:
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;eusart2.c: 245: }
  4657                           ;eusart2.c: 246: SigfoxTransactionResult = TASK_ON_COURSE;
  4658  00137A  0E01               	movlw	1
  4659  00137C  6FF1               	movwf	_SigfoxTransactionResult& (0+255),b
  4660                           
  4661                           ; BSR set to: 0
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;eusart2.c: 247: return(TASK_ON_COURSE);
  4665  00137E  0C01               	retlw	1	;funcret
  4666  001380                     __end_of_SigfoxVerifyTransactionStatus:
  4667                           	opt stack 0
  4668                           tosu	equ	0xFFF
  4669                           tosh	equ	0xFFE
  4670                           tosl	equ	0xFFD
  4671                           pclath	equ	0xFFA
  4672                           tblptru	equ	0xFF8
  4673                           tblptrh	equ	0xFF7
  4674                           tblptrl	equ	0xFF6
  4675                           tablat	equ	0xFF5
  4676                           prodh	equ	0xFF4
  4677                           prodl	equ	0xFF3
  4678                           intcon	equ	0xFF2
  4679                           intcon2	equ	0xFF1
  4680                           postinc0	equ	0xFEE
  4681                           wreg	equ	0xFE8
  4682                           indf1	equ	0xFE7
  4683                           postdec1	equ	0xFE5
  4684                           fsr1h	equ	0xFE2
  4685                           fsr1l	equ	0xFE1
  4686                           indf2	equ	0xFDF
  4687                           postinc2	equ	0xFDE
  4688                           plusw2	equ	0xFDB
  4689                           fsr2h	equ	0xFDA
  4690                           fsr2l	equ	0xFD9
  4691                           status	equ	0xFD8
  4692                           
  4693 ;; *************** function _SigfoxTransmit *****************
  4694 ;; Defined at:
  4695 ;;		line 211 in file "mcc_generated_files/eusart2.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;		None
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;		None
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  1    wreg      void 
  4702 ;; Registers used:
  4703 ;;		None
  4704 ;; Tracked objects:
  4705 ;;		On entry : 3F/0
  4706 ;;		On exit  : 3F/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4709 ;;      Params:         0       0       0       0       0       0       0
  4710 ;;      Locals:         0       0       0       0       0       0       0
  4711 ;;      Temps:          0       0       0       0       0       0       0
  4712 ;;      Totals:         0       0       0       0       0       0       0
  4713 ;;Total ram usage:        0 bytes
  4714 ;; Hardware stack levels used:    1
  4715 ;; Hardware stack levels required when called:    5
  4716 ;; This function calls:
  4717 ;;		Nothing
  4718 ;; This function is called by:
  4719 ;;		_SigfoxCommManager
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           	psect	text29
  4724  00153E                     __ptext29:
  4725                           	opt stack 0
  4726  00153E                     _SigfoxTransmit:
  4727                           	opt stack 21
  4728                           
  4729                           ;eusart2.c: 213: SigfoxTXBufferPtr = 0;
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;incstack = 0
  4733  00153E  0100               	movlb	0	; () banked
  4734  001540  6B89               	clrf	_SigfoxTXBufferPtr& (0+255),b
  4735                           
  4736                           ;eusart2.c: 214: PIE3bits.TX2IE = 1;
  4737  001542  88A3               	bsf	4003,4,c	;volatile
  4738                           
  4739                           ; BSR set to: 0
  4740  001544  0012               	return		;funcret
  4741  001546                     __end_of_SigfoxTransmit:
  4742                           	opt stack 0
  4743                           tosu	equ	0xFFF
  4744                           tosh	equ	0xFFE
  4745                           tosl	equ	0xFFD
  4746                           pclath	equ	0xFFA
  4747                           tblptru	equ	0xFF8
  4748                           tblptrh	equ	0xFF7
  4749                           tblptrl	equ	0xFF6
  4750                           tablat	equ	0xFF5
  4751                           prodh	equ	0xFF4
  4752                           prodl	equ	0xFF3
  4753                           intcon	equ	0xFF2
  4754                           intcon2	equ	0xFF1
  4755                           postinc0	equ	0xFEE
  4756                           wreg	equ	0xFE8
  4757                           indf1	equ	0xFE7
  4758                           postdec1	equ	0xFE5
  4759                           fsr1h	equ	0xFE2
  4760                           fsr1l	equ	0xFE1
  4761                           indf2	equ	0xFDF
  4762                           postinc2	equ	0xFDE
  4763                           plusw2	equ	0xFDB
  4764                           fsr2h	equ	0xFDA
  4765                           fsr2l	equ	0xFD9
  4766                           status	equ	0xFD8
  4767                           
  4768 ;; *************** function _SigfoxTXReady *****************
  4769 ;; Defined at:
  4770 ;;		line 218 in file "mcc_generated_files/eusart2.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;		None
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;		None
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      unsigned char 
  4777 ;; Registers used:
  4778 ;;		wreg, status,2
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 3F/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4784 ;;      Params:         0       0       0       0       0       0       0
  4785 ;;      Locals:         0       0       0       0       0       0       0
  4786 ;;      Temps:          0       0       0       0       0       0       0
  4787 ;;      Totals:         0       0       0       0       0       0       0
  4788 ;;Total ram usage:        0 bytes
  4789 ;; Hardware stack levels used:    1
  4790 ;; Hardware stack levels required when called:    5
  4791 ;; This function calls:
  4792 ;;		Nothing
  4793 ;; This function is called by:
  4794 ;;		_SigfoxCommManager
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           	psect	text30
  4799  001504                     __ptext30:
  4800                           	opt stack 0
  4801  001504                     _SigfoxTXReady:
  4802                           	opt stack 21
  4803                           
  4804                           ;eusart2.c: 219: if(!SigfoxTxDelay){
  4805                           
  4806                           ; BSR set to: 0
  4807                           ;incstack = 0
  4808  001504  0100               	movlb	0	; () banked
  4809  001506  5186               	movf	_SigfoxTxDelay& (0+255),w,b
  4810  001508  E103               	bnz	l1699
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;eusart2.c: 221: return(!PIE3bits.TX2IE);
  4814  00150A  A8A3               	btfss	4003,4,c	;volatile
  4815  00150C  0C01               	retlw	1
  4816  00150E  0C00               	retlw	0
  4817  001510                     l1699:
  4818                           
  4819                           ; BSR set to: 0
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;eusart2.c: 222: }
  4823                           ;eusart2.c: 223: return(0);
  4824  001510  0C00               	retlw	0	;funcret
  4825  001512                     __end_of_SigfoxTXReady:
  4826                           	opt stack 0
  4827                           tosu	equ	0xFFF
  4828                           tosh	equ	0xFFE
  4829                           tosl	equ	0xFFD
  4830                           pclath	equ	0xFFA
  4831                           tblptru	equ	0xFF8
  4832                           tblptrh	equ	0xFF7
  4833                           tblptrl	equ	0xFF6
  4834                           tablat	equ	0xFF5
  4835                           prodh	equ	0xFF4
  4836                           prodl	equ	0xFF3
  4837                           intcon	equ	0xFF2
  4838                           intcon2	equ	0xFF1
  4839                           postinc0	equ	0xFEE
  4840                           wreg	equ	0xFE8
  4841                           indf1	equ	0xFE7
  4842                           postdec1	equ	0xFE5
  4843                           fsr1h	equ	0xFE2
  4844                           fsr1l	equ	0xFE1
  4845                           indf2	equ	0xFDF
  4846                           postinc2	equ	0xFDE
  4847                           plusw2	equ	0xFDB
  4848                           fsr2h	equ	0xFDA
  4849                           fsr2l	equ	0xFD9
  4850                           status	equ	0xFD8
  4851                           
  4852 ;; *************** function _SigfoxCommandSelector *****************
  4853 ;; Defined at:
  4854 ;;		line 173 in file "mcc_generated_files/eusart2.c"
  4855 ;; Parameters:    Size  Location     Type
  4856 ;;  SigfoxComman    1    wreg     enum E6710
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;  SigfoxComman    1   19[BANK0 ] enum E6710
  4859 ;;  SFX_COMMAND_    4   11[BANK0 ] const unsigned char [4]
  4860 ;;  SigfoxRomCom    2   17[BANK0 ] PTR const unsigned char 
  4861 ;;		 -> SigfoxCommandsDefinitions(60), 
  4862 ;;  SFX_COMMAND_    2   15[BANK0 ] const unsigned char [2]
  4863 ;; Return value:  Size  Location     Type
  4864 ;;                  1    wreg      void 
  4865 ;; Registers used:
  4866 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4867 ;; Tracked objects:
  4868 ;;		On entry : 3F/0
  4869 ;;		On exit  : 0/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4872 ;;      Params:         0       0       0       0       0       0       0
  4873 ;;      Locals:         0       9       0       0       0       0       0
  4874 ;;      Temps:          0       0       0       0       0       0       0
  4875 ;;      Totals:         0       9       0       0       0       0       0
  4876 ;;Total ram usage:        9 bytes
  4877 ;; Hardware stack levels used:    1
  4878 ;; Hardware stack levels required when called:    6
  4879 ;; This function calls:
  4880 ;;		_strcat
  4881 ;;		_strcpy
  4882 ;; This function is called by:
  4883 ;;		_SigfoxCommManager
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887                           	psect	text31
  4888  000A4E                     __ptext31:
  4889                           	opt stack 0
  4890  000A4E                     _SigfoxCommandSelector:
  4891                           	opt stack 20
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;incstack = 0
  4895                           ;SigfoxCommandSelector@SigfoxCommand stored from wreg
  4896  000A4E  0100               	movlb	0	; () banked
  4897  000A50  6FD7               	movwf	SigfoxCommandSelector@SigfoxCommand& (0+255),b
  4898                           
  4899                           ;eusart2.c: 175: const char *SigfoxRomCommandStrPtr;
  4900                           ;eusart2.c: 176: const char SFX_COMMAND_TAIL_STR[] = {0x0d, 0};
  4901  000A52  0E08               	movlw	low SigfoxCommandSelector@F6862
  4902  000A54  6EF6               	movwf	tblptrl,c
  4903  000A56                     	if	1	;There is more than 1 active tblptr byte
  4904  000A56  0E06               	movlw	high SigfoxCommandSelector@F6862
  4905  000A58  6EF7               	movwf	tblptrh,c
  4906  000A5A                     	endif
  4907  000A5A                     	if	1	;There are 3 active tblptr bytes
  4908  000A5A  0E00               	movlw	low (SigfoxCommandSelector@F6862 shr (0+16))
  4909  000A5C  6EF8               	movwf	tblptru,c
  4910  000A5E                     	endif
  4911  000A5E  0009               	tblrd		*+
  4912  000A60  CFF5 F0D3          	movff	tablat,SigfoxCommandSelector@SFX_COMMAND_TAIL_STR
  4913  000A64  000A               	tblrd		*-
  4914  000A66  CFF5 F0D4          	movff	tablat,SigfoxCommandSelector@SFX_COMMAND_TAIL_STR+1
  4915                           
  4916                           ;eusart2.c: 177: const char SFX_COMMAND_TAIL_ACK_STR[] = {',','1',0x0d, 0};
  4917  000A6A  0E01               	movlw	low SigfoxCommandSelector@F6864
  4918  000A6C  6EF6               	movwf	tblptrl,c
  4919  000A6E                     	if	1	;There is more than 1 active tblptr byte
  4920  000A6E  0E06               	movlw	high SigfoxCommandSelector@F6864
  4921  000A70  6EF7               	movwf	tblptrh,c
  4922  000A72                     	endif
  4923  000A72                     	if	1	;There are 3 active tblptr bytes
  4924  000A72  0E00               	movlw	low (SigfoxCommandSelector@F6864 shr (0+16))
  4925  000A74  6EF8               	movwf	tblptru,c
  4926  000A76                     	endif
  4927  000A76  0009               	tblrd		*+
  4928  000A78  CFF5 F0CF          	movff	tablat,SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR
  4929  000A7C  0009               	tblrd		*+
  4930  000A7E  CFF5 F0D0          	movff	tablat,SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR+1
  4931  000A82  0009               	tblrd		*+
  4932  000A84  CFF5 F0D1          	movff	tablat,SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR+2
  4933  000A88  000A               	tblrd		*-
  4934  000A8A  CFF5 F0D2          	movff	tablat,SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR+3
  4935                           
  4936                           ;eusart2.c: 179: SigfoxTimeOutTimer = 5;
  4937  000A8E  0E05               	movlw	5
  4938  000A90  6F87               	movwf	_SigfoxTimeOutTimer& (0+255),b
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;eusart2.c: 180: SigfoxRomCommandStrPtr = SigfoxCommandsDefinitions[SigfoxCommand];
  4942  000A92  51D7               	movf	SigfoxCommandSelector@SigfoxCommand& (0+255),w,b
  4943  000A94  0D0A               	mullw	10
  4944  000A96  0E0A               	movlw	low _SigfoxCommandsDefinitions
  4945  000A98  24F3               	addwf	prodl,w,c
  4946  000A9A  6FD5               	movwf	SigfoxCommandSelector@SigfoxRomCommandStrPtr& (0+255),b
  4947  000A9C  0E06               	movlw	high _SigfoxCommandsDefinitions
  4948  000A9E  20F4               	addwfc	prodh,w,c
  4949  000AA0  6FD6               	movwf	(SigfoxCommandSelector@SigfoxRomCommandStrPtr+1)& (0+255),b
  4950                           
  4951                           ;eusart2.c: 181: switch(SigfoxCommand){
  4952  000AA2  D019               	goto	l2759
  4953  000AA4                     l2745:
  4954                           
  4955                           ; BSR set to: 0
  4956                           ;eusart2.c: 183: strcpy(SigfoxTXBuffer,SigfoxRomCommandStrPtr);
  4957  000AA4  D838               	call	PL6	;call to abstracted procedure
  4958  000AA6  ECF7  F008         	call	_strcpy	;wreg free
  4959  000AAA  0012               	return	
  4960  000AAC                     l2749:
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;eusart2.c: 186: case SFX_CMD_SEND_STATUS:
  4964                           ;eusart2.c: 187: case SFX_CMD_ADJ_PWR:
  4965                           ;eusart2.c: 188: strcpy(SigfoxTXBuffer,SigfoxRomCommandStrPtr);
  4966  000AAC  D834               	call	PL6	;call to abstracted procedure
  4967  000AAE  ECF7  F008         	call	_strcpy	;wreg free
  4968                           
  4969                           ;eusart2.c: 189: break;
  4970  000AB2  D01D               	goto	l2761
  4971  000AB4                     l2751:
  4972                           
  4973                           ; BSR set to: 0
  4974                           ;eusart2.c: 191: case SFX_CMD_SEND_MSG_WAIT_ACK:
  4975                           ;eusart2.c: 192: SigfoxTimeOutTimer = 30;
  4976  000AB4  0E1E               	movlw	30
  4977  000AB6  6F87               	movwf	_SigfoxTimeOutTimer& (0+255),b
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;eusart2.c: 193: strcpy(SigfoxTXBuffer,SigfoxRomCommandStrPtr);
  4981  000AB8  D82E               	call	PL6	;call to abstracted procedure
  4982  000ABA  ECF7  F008         	call	_strcpy	;wreg free
  4983                           
  4984                           ;eusart2.c: 194: strcat(SigfoxTXBuffer,SigfoxPayloadBuffer);
  4985  000ABE  0E95               	movlw	low _SigfoxTXBuffer
  4986  000AC0  0100               	movlb	0	; () banked
  4987  000AC2  6FC9               	movwf	strcat@to& (0+255),b
  4988  000AC4  0E00               	movlw	high _SigfoxTXBuffer
  4989  000AC6  6FCA               	movwf	(strcat@to+1)& (0+255),b
  4990  000AC8  0E00               	movlw	low _SigfoxPayloadBuffer
  4991  000ACA  6FCB               	movwf	strcat@from& (0+255),b
  4992  000ACC  0E01               	movlw	high _SigfoxPayloadBuffer
  4993  000ACE  6FCC               	movwf	(strcat@from+1)& (0+255),b
  4994  000AD0  EC2B  F008         	call	_strcat	;wreg free
  4995                           
  4996                           ;eusart2.c: 195: break;
  4997  000AD4  D00C               	goto	l2761
  4998  000AD6                     l2759:
  4999                           
  5000                           ; BSR set to: 0
  5001  000AD6  51D7               	movf	SigfoxCommandSelector@SigfoxCommand& (0+255),w,b
  5002                           
  5003                           ; Switch size 1, requested type "space"
  5004                           ; Number of cases is 6, Range of values is 0 to 6
  5005                           ; switch strategies available:
  5006                           ; Name         Instructions Cycles
  5007                           ; simple_byte           19    10 (average)
  5008                           ;	Chosen strategy is simple_byte
  5009  000AD8  E0E5               	bz	l2745
  5010  000ADA  0A01               	xorlw	1	; case 1
  5011  000ADC  E0EB               	bz	l2751
  5012  000ADE  0A03               	xorlw	3	; case 2
  5013  000AE0  E0E9               	bz	l2751
  5014  000AE2  0A01               	xorlw	1	; case 3
  5015  000AE4  E0E3               	bz	l2749
  5016  000AE6  0A07               	xorlw	7	; case 4
  5017  000AE8  E0E1               	bz	l2749
  5018  000AEA  0A02               	xorlw	2	; case 6
  5019  000AEC  E0DF               	bz	l2749
  5020  000AEE                     l2761:
  5021                           
  5022                           ;eusart2.c: 197: if(SigfoxCommand == SFX_CMD_SEND_MSG_WAIT_ACK){
  5023  000AEE  0E02               	movlw	2
  5024  000AF0  0100               	movlb	0	; () banked
  5025  000AF2  19D7               	xorwf	SigfoxCommandSelector@SigfoxCommand& (0+255),w,b
  5026  000AF4  E108               	bnz	l2765
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;eusart2.c: 198: strcat(SigfoxTXBuffer,SFX_COMMAND_TAIL_ACK_STR);
  5030  000AF6  D818               	call	PL32	;call to abstracted procedure
  5031  000AF8  0ECF               	movlw	low SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR
  5032  000AFA  6FCB               	movwf	strcat@from& (0+255),b
  5033  000AFC  0E00               	movlw	high SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR
  5034  000AFE  6FCC               	movwf	(strcat@from+1)& (0+255),b
  5035  000B00  EC2B  F008         	call	_strcat	;wreg free
  5036                           
  5037                           ;eusart2.c: 199: }
  5038  000B04  0012               	return	
  5039  000B06                     l2765:
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;eusart2.c: 200: else
  5043                           ;eusart2.c: 201: {
  5044                           ;eusart2.c: 202: strcat(SigfoxTXBuffer,SFX_COMMAND_TAIL_STR);
  5045  000B06  D810               	call	PL32	;call to abstracted procedure
  5046  000B08  0ED3               	movlw	low SigfoxCommandSelector@SFX_COMMAND_TAIL_STR
  5047  000B0A  6FCB               	movwf	strcat@from& (0+255),b
  5048  000B0C  0E00               	movlw	high SigfoxCommandSelector@SFX_COMMAND_TAIL_STR
  5049  000B0E  6FCC               	movwf	(strcat@from+1)& (0+255),b
  5050  000B10  EC2B  F008         	call	_strcat	;wreg free
  5051  000B14  0012               	return		;funcret
  5052  000B16                     __end_of_SigfoxCommandSelector:
  5053                           	opt stack 0
  5054  000B16                     PL6:
  5055                           	opt stack 20
  5056  000B16  0E95               	movlw	low _SigfoxTXBuffer
  5057  000B18  6FC9               	movwf	strcpy@to& (0+255),b
  5058  000B1A  0E00               	movlw	high _SigfoxTXBuffer
  5059  000B1C  6FCA               	movwf	(strcpy@to+1)& (0+255),b
  5060  000B1E  C0D5  F0CB         	movff	SigfoxCommandSelector@SigfoxRomCommandStrPtr,strcpy@from
  5061  000B22  C0D6  F0CC         	movff	SigfoxCommandSelector@SigfoxRomCommandStrPtr+1,strcpy@from+1
  5062  000B26  0012               	return	
  5063  000B28                     __end_ofPL6:
  5064                           	opt stack 0
  5065  000B28                     PL32:
  5066                           	opt stack 20
  5067  000B28  0E95               	movlw	low _SigfoxTXBuffer
  5068  000B2A  6FC9               	movwf	strcat@to& (0+255),b
  5069  000B2C  0E00               	movlw	high _SigfoxTXBuffer
  5070  000B2E  6FCA               	movwf	(strcat@to+1)& (0+255),b
  5071  000B30  0012               	return	
  5072  000B32                     __end_ofPL32:
  5073                           	opt stack 0
  5074                           tosu	equ	0xFFF
  5075                           tosh	equ	0xFFE
  5076                           tosl	equ	0xFFD
  5077                           pclath	equ	0xFFA
  5078                           tblptru	equ	0xFF8
  5079                           tblptrh	equ	0xFF7
  5080                           tblptrl	equ	0xFF6
  5081                           tablat	equ	0xFF5
  5082                           prodh	equ	0xFF4
  5083                           prodl	equ	0xFF3
  5084                           intcon	equ	0xFF2
  5085                           intcon2	equ	0xFF1
  5086                           postinc0	equ	0xFEE
  5087                           wreg	equ	0xFE8
  5088                           indf1	equ	0xFE7
  5089                           postdec1	equ	0xFE5
  5090                           fsr1h	equ	0xFE2
  5091                           fsr1l	equ	0xFE1
  5092                           indf2	equ	0xFDF
  5093                           postinc2	equ	0xFDE
  5094                           plusw2	equ	0xFDB
  5095                           fsr2h	equ	0xFDA
  5096                           fsr2l	equ	0xFD9
  5097                           status	equ	0xFD8
  5098                           
  5099 ;; *************** function _strcpy *****************
  5100 ;; Defined at:
  5101 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcpy.c"
  5102 ;; Parameters:    Size  Location     Type
  5103 ;;  to              2    5[BANK0 ] PTR unsigned char 
  5104 ;;		 -> SigfoxTXBuffer(35), 
  5105 ;;  from            2    7[BANK0 ] PTR const unsigned char 
  5106 ;;		 -> SigfoxCommandsDefinitions(60), 
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;  cp              2    9[BANK0 ] PTR unsigned char 
  5109 ;;		 -> SigfoxTXBuffer(35), 
  5110 ;; Return value:  Size  Location     Type
  5111 ;;                  2    5[BANK0 ] PTR unsigned char 
  5112 ;; Registers used:
  5113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5114 ;; Tracked objects:
  5115 ;;		On entry : 3F/0
  5116 ;;		On exit  : 0/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5119 ;;      Params:         0       4       0       0       0       0       0
  5120 ;;      Locals:         0       2       0       0       0       0       0
  5121 ;;      Temps:          0       0       0       0       0       0       0
  5122 ;;      Totals:         0       6       0       0       0       0       0
  5123 ;;Total ram usage:        6 bytes
  5124 ;; Hardware stack levels used:    1
  5125 ;; Hardware stack levels required when called:    5
  5126 ;; This function calls:
  5127 ;;		Nothing
  5128 ;; This function is called by:
  5129 ;;		_SigfoxCommandSelector
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           	psect	text32
  5134  0011EE                     __ptext32:
  5135                           	opt stack 0
  5136  0011EE                     _strcpy:
  5137                           	opt stack 20
  5138                           
  5139                           ;incstack = 0
  5140  0011EE  C0C9  F0CD         	movff	strcpy@to,strcpy@cp
  5141  0011F2  C0CA  F0CE         	movff	strcpy@to+1,strcpy@cp+1
  5142  0011F6  D005               	goto	l2673
  5143  0011F8                     l2671:
  5144  0011F8  0100               	movlb	0	; () banked
  5145  0011FA  4BCD               	infsnz	strcpy@cp& (0+255),f,b
  5146  0011FC  2BCE               	incf	(strcpy@cp+1)& (0+255),f,b
  5147  0011FE  4BCB               	infsnz	strcpy@from& (0+255),f,b
  5148  001200  2BCC               	incf	(strcpy@from+1)& (0+255),f,b
  5149  001202                     l2673:
  5150  001202  C0CB  FFF6         	movff	strcpy@from,tblptrl
  5151  001206  C0CC  FFF7         	movff	strcpy@from+1,tblptrh
  5152  00120A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5153  00120A  6AF8               	clrf	tblptru,c
  5154  00120C                     	endif
  5155  00120C                     	if	0	;tblptru may be non-zero
  5156  00120C                     	endif
  5157  00120C  C0CD  FFD9         	movff	strcpy@cp,fsr2l
  5158  001210  C0CE  FFDA         	movff	strcpy@cp+1,fsr2h
  5159  001214  0008               	tblrd		*
  5160  001216  CFF5 FFDF          	movff	tablat,indf2
  5161  00121A  50DF               	movf	indf2,w,c
  5162  00121C  E1ED               	bnz	l2671
  5163  00121E  C0C9  F0C9         	movff	strcpy@to,?_strcpy
  5164  001222  C0CA  F0CA         	movff	strcpy@to+1,?_strcpy+1
  5165  001226  0012               	return		;funcret
  5166  001228                     __end_of_strcpy:
  5167                           	opt stack 0
  5168                           tosu	equ	0xFFF
  5169                           tosh	equ	0xFFE
  5170                           tosl	equ	0xFFD
  5171                           pclath	equ	0xFFA
  5172                           tblptru	equ	0xFF8
  5173                           tblptrh	equ	0xFF7
  5174                           tblptrl	equ	0xFF6
  5175                           tablat	equ	0xFF5
  5176                           prodh	equ	0xFF4
  5177                           prodl	equ	0xFF3
  5178                           intcon	equ	0xFF2
  5179                           intcon2	equ	0xFF1
  5180                           postinc0	equ	0xFEE
  5181                           wreg	equ	0xFE8
  5182                           indf1	equ	0xFE7
  5183                           postdec1	equ	0xFE5
  5184                           fsr1h	equ	0xFE2
  5185                           fsr1l	equ	0xFE1
  5186                           indf2	equ	0xFDF
  5187                           postinc2	equ	0xFDE
  5188                           plusw2	equ	0xFDB
  5189                           fsr2h	equ	0xFDA
  5190                           fsr2l	equ	0xFD9
  5191                           status	equ	0xFD8
  5192                           
  5193 ;; *************** function _strcat *****************
  5194 ;; Defined at:
  5195 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcat.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;  to              2    5[BANK0 ] PTR unsigned char 
  5198 ;;		 -> SigfoxTXBuffer(35), 
  5199 ;;  from            2    7[BANK0 ] PTR const unsigned char 
  5200 ;;		 -> SigfoxPayloadBuffer(25), SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR(4), SigfoxCommandSelector@SFX_COMMAND_TA
      +IL_STR(2), 
  5201 ;; Auto vars:     Size  Location     Type
  5202 ;;  cp              2    9[BANK0 ] PTR unsigned char 
  5203 ;;		 -> SigfoxTXBuffer(35), 
  5204 ;; Return value:  Size  Location     Type
  5205 ;;                  2    5[BANK0 ] PTR unsigned char 
  5206 ;; Registers used:
  5207 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5208 ;; Tracked objects:
  5209 ;;		On entry : 3F/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5213 ;;      Params:         0       4       0       0       0       0       0
  5214 ;;      Locals:         0       2       0       0       0       0       0
  5215 ;;      Temps:          0       0       0       0       0       0       0
  5216 ;;      Totals:         0       6       0       0       0       0       0
  5217 ;;Total ram usage:        6 bytes
  5218 ;; Hardware stack levels used:    1
  5219 ;; Hardware stack levels required when called:    5
  5220 ;; This function calls:
  5221 ;;		Nothing
  5222 ;; This function is called by:
  5223 ;;		_SigfoxCommandSelector
  5224 ;; This function uses a non-reentrant model
  5225 ;;
  5226                           
  5227                           	psect	text33
  5228  001056                     __ptext33:
  5229                           	opt stack 0
  5230  001056                     _strcat:
  5231                           	opt stack 20
  5232                           
  5233                           ;incstack = 0
  5234  001056  C0C9  F0CD         	movff	strcat@to,strcat@cp
  5235  00105A  C0CA  F0CE         	movff	strcat@to+1,strcat@cp+1
  5236  00105E  D003               	goto	l2683
  5237  001060                     l2681:
  5238  001060  0100               	movlb	0	; () banked
  5239  001062  4BCD               	infsnz	strcat@cp& (0+255),f,b
  5240  001064  2BCE               	incf	(strcat@cp+1)& (0+255),f,b
  5241  001066                     l2683:
  5242  001066  C0CD  FFD9         	movff	strcat@cp,fsr2l
  5243  00106A  C0CE  FFDA         	movff	strcat@cp+1,fsr2h
  5244  00106E  50DF               	movf	indf2,w,c
  5245  001070  E006               	bz	l2687
  5246  001072  D7F6               	goto	l2681
  5247  001074                     l2685:
  5248  001074  0100               	movlb	0	; () banked
  5249  001076  4BCD               	infsnz	strcat@cp& (0+255),f,b
  5250  001078  2BCE               	incf	(strcat@cp+1)& (0+255),f,b
  5251  00107A  4BCB               	infsnz	strcat@from& (0+255),f,b
  5252  00107C  2BCC               	incf	(strcat@from+1)& (0+255),f,b
  5253  00107E                     l2687:
  5254  00107E  C0CB  FFD9         	movff	strcat@from,fsr2l
  5255  001082  C0CC  FFDA         	movff	strcat@from+1,fsr2h
  5256  001086  C0CD  FFE1         	movff	strcat@cp,fsr1l
  5257  00108A  C0CE  FFE2         	movff	strcat@cp+1,fsr1h
  5258  00108E  CFDF FFE7          	movff	indf2,indf1
  5259  001092  50E7               	movf	indf1,w,c
  5260  001094  E1EF               	bnz	l2685
  5261  001096  C0C9  F0C9         	movff	strcat@to,?_strcat
  5262  00109A  C0CA  F0CA         	movff	strcat@to+1,?_strcat+1
  5263  00109E  0012               	return		;funcret
  5264  0010A0                     __end_of_strcat:
  5265                           	opt stack 0
  5266                           tosu	equ	0xFFF
  5267                           tosh	equ	0xFFE
  5268                           tosl	equ	0xFFD
  5269                           pclath	equ	0xFFA
  5270                           tblptru	equ	0xFF8
  5271                           tblptrh	equ	0xFF7
  5272                           tblptrl	equ	0xFF6
  5273                           tablat	equ	0xFF5
  5274                           prodh	equ	0xFF4
  5275                           prodl	equ	0xFF3
  5276                           intcon	equ	0xFF2
  5277                           intcon2	equ	0xFF1
  5278                           postinc0	equ	0xFEE
  5279                           wreg	equ	0xFE8
  5280                           indf1	equ	0xFE7
  5281                           postdec1	equ	0xFE5
  5282                           fsr1h	equ	0xFE2
  5283                           fsr1l	equ	0xFE1
  5284                           indf2	equ	0xFDF
  5285                           postinc2	equ	0xFDE
  5286                           plusw2	equ	0xFDB
  5287                           fsr2h	equ	0xFDA
  5288                           fsr2l	equ	0xFD9
  5289                           status	equ	0xFD8
  5290                           
  5291 ;; *************** function _ProtocolTaskBuildFrame *****************
  5292 ;; Defined at:
  5293 ;;		line 95 in file "sfxProtocoll.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;  EVENT           1    wreg     enum E6699
  5296 ;; Auto vars:     Size  Location     Type
  5297 ;;  EVENT           1   28[BANK0 ] enum E6699
  5298 ;;  dataField       4   29[BANK0 ] unsigned long 
  5299 ;;  protFrameDes    2   36[BANK0 ] PTR const unsigned char 
  5300 ;;		 -> SIT_FRAME_POWERUP_SF_DESC(5), SIT_FRAME_TRACKER_SF_ID_DESC(8), 
  5301 ;;  totalBits       2   33[BANK0 ] int 
  5302 ;;  dataSize        1   35[BANK0 ] unsigned char 
  5303 ;; Return value:  Size  Location     Type
  5304 ;;                  1    wreg      unsigned char 
  5305 ;; Registers used:
  5306 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5307 ;; Tracked objects:
  5308 ;;		On entry : 3F/0
  5309 ;;		On exit  : 3E/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5312 ;;      Params:         0       0       0       0       0       0       0
  5313 ;;      Locals:         0      10       0       0       0       0       0
  5314 ;;      Temps:          0       2       0       0       0       0       0
  5315 ;;      Totals:         0      12       0       0       0       0       0
  5316 ;;Total ram usage:       12 bytes
  5317 ;; Hardware stack levels used:    1
  5318 ;; Hardware stack levels required when called:    7
  5319 ;; This function calls:
  5320 ;;		_ProtocolAddFrameData
  5321 ;;		_ProtocolGetValidity
  5322 ;;		_SigfoxTaskLoadPayloadBuffer
  5323 ;; This function is called by:
  5324 ;;		_ProtocolTask
  5325 ;; This function uses a non-reentrant model
  5326 ;;
  5327                           
  5328                           	psect	text34
  5329  000658                     __ptext34:
  5330                           	opt stack 0
  5331  000658                     _ProtocolTaskBuildFrame:
  5332                           	opt stack 22
  5333                           
  5334                           ;incstack = 0
  5335                           ;ProtocolTaskBuildFrame@EVENT stored from wreg
  5336  000658  0100               	movlb	0	; () banked
  5337  00065A  6FE0               	movwf	ProtocolTaskBuildFrame@EVENT& (0+255),b
  5338                           
  5339                           ;sfxProtocoll.c: 97: int totalBits = 12 * 8;
  5340  00065C  6BE6               	clrf	(ProtocolTaskBuildFrame@totalBits+1)& (0+255),b
  5341  00065E  0E60               	movlw	96
  5342  000660  6FE5               	movwf	ProtocolTaskBuildFrame@totalBits& (0+255),b
  5343                           
  5344                           ;sfxProtocoll.c: 98: unsigned long dataField;
  5345                           ;sfxProtocoll.c: 99: uint8_t dataSize;
  5346                           ;sfxProtocoll.c: 100: const uint8_t *protFrameDescPtr;
  5347                           ;sfxProtocoll.c: 102: switch(EVENT){
  5348  000662  D009               	goto	l3139
  5349  000664                     l3129:
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;sfxProtocoll.c: 104: protFrameDescPtr = SIT_FRAME_TRACKER_SF_ID_DESC;
  5353  000664  0E46               	movlw	low _SIT_FRAME_TRACKER_SF_ID_DESC
  5354  000666  6FE8               	movwf	ProtocolTaskBuildFrame@protFrameDescPtr& (0+255),b
  5355  000668  0E06               	movlw	high _SIT_FRAME_TRACKER_SF_ID_DESC
  5356  00066A  D003               	goto	L6
  5357  00066C                     l3131:
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;sfxProtocoll.c: 107: protFrameDescPtr = SIT_FRAME_POWERUP_SF_DESC;
  5361  00066C  0E4E               	movlw	low _SIT_FRAME_POWERUP_SF_DESC
  5362  00066E  6FE8               	movwf	ProtocolTaskBuildFrame@protFrameDescPtr& (0+255),b
  5363  000670  0E06               	movlw	high _SIT_FRAME_POWERUP_SF_DESC
  5364  000672                     L6:
  5365  000672  6FE9               	movwf	(ProtocolTaskBuildFrame@protFrameDescPtr+1)& (0+255),b
  5366                           
  5367                           ;sfxProtocoll.c: 108: break;
  5368  000674  D00F               	goto	l3141
  5369  000676                     l3139:
  5370                           
  5371                           ; BSR set to: 0
  5372  000676  51E0               	movf	ProtocolTaskBuildFrame@EVENT& (0+255),w,b
  5373                           
  5374                           ; Switch size 1, requested type "space"
  5375                           ; Number of cases is 6, Range of values is 1 to 6
  5376                           ; switch strategies available:
  5377                           ; Name         Instructions Cycles
  5378                           ; simple_byte           19    10 (average)
  5379                           ;	Chosen strategy is simple_byte
  5380  000678  0A01               	xorlw	1	; case 1
  5381  00067A  E0F4               	bz	l3129
  5382  00067C  0A03               	xorlw	3	; case 2
  5383  00067E  E0F6               	bz	l3131
  5384  000680  0A01               	xorlw	1	; case 3
  5385  000682  B4D8               	btfsc	status,2,c
  5386  000684  0C00               	retlw	0
  5387  000686  0A07               	xorlw	7	; case 4
  5388  000688  B4D8               	btfsc	status,2,c
  5389  00068A  0C00               	retlw	0
  5390  00068C  0A01               	xorlw	1	; case 5
  5391  00068E  A4D8               	btfss	status,2,c
  5392  000690  0A03               	xorlw	3	; case 6
  5393  000692  0C00               	retlw	0
  5394  000694                     l3141:
  5395                           
  5396                           ; BSR set to: 0
  5397                           ;sfxProtocoll.c: 116: ProtocolAddFrameData(EVENT, 3);
  5398  000694  51E0               	movf	ProtocolTaskBuildFrame@EVENT& (0+255),w,b
  5399  000696  D8A7               	call	PL26	;call to abstracted procedure
  5400  000698  0E03               	movlw	3
  5401  00069A  6FCD               	movwf	ProtocolAddFrameData@DataRepSize& (0+255),b
  5402  00069C  EC92  F004         	call	_ProtocolAddFrameData	;wreg free
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;sfxProtocoll.c: 117: totalBits -= 3;
  5406  0006A0  0EFD               	movlw	253
  5407  0006A2  27E5               	addwf	ProtocolTaskBuildFrame@totalBits& (0+255),f,b
  5408  0006A4  0EFF               	movlw	255
  5409  0006A6  23E6               	addwfc	(ProtocolTaskBuildFrame@totalBits+1)& (0+255),f,b
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;sfxProtocoll.c: 118: ProtocolAddFrameData(protFrameDescPtr[0], 05);
  5413  0006A8  D891               	call	PL12	;call to abstracted procedure
  5414  0006AA  D89D               	call	PL26	;call to abstracted procedure
  5415  0006AC  0E05               	movlw	5
  5416  0006AE  6FCD               	movwf	ProtocolAddFrameData@DataRepSize& (0+255),b
  5417  0006B0  EC92  F004         	call	_ProtocolAddFrameData	;wreg free
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;sfxProtocoll.c: 119: totalBits -= 05;
  5421  0006B4  0EFB               	movlw	251
  5422  0006B6  27E5               	addwf	ProtocolTaskBuildFrame@totalBits& (0+255),f,b
  5423  0006B8  0EFF               	movlw	255
  5424  0006BA  23E6               	addwfc	(ProtocolTaskBuildFrame@totalBits+1)& (0+255),f,b
  5425                           
  5426                           ; BSR set to: 0
  5427                           ;sfxProtocoll.c: 120: protFrameDescPtr++;
  5428  0006BC  4BE8               	infsnz	ProtocolTaskBuildFrame@protFrameDescPtr& (0+255),f,b
  5429  0006BE  2BE9               	incf	(ProtocolTaskBuildFrame@protFrameDescPtr+1)& (0+255),f,b
  5430  0006C0  D049               	goto	l3177
  5431  0006C2                     l3151:
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;sfxProtocoll.c: 124: dataField = (unsigned long) ProtocolGetValidity(protFrameDescPtr[1
      +                          ]);
  5435  0006C2  29E8               	incf	ProtocolTaskBuildFrame@protFrameDescPtr& (0+255),w,b
  5436  0006C4  6FDE               	movwf	??_ProtocolTaskBuildFrame& (0+255),b
  5437  0006C6  0E00               	movlw	0
  5438  0006C8  21E9               	addwfc	(ProtocolTaskBuildFrame@protFrameDescPtr+1)& (0+255),w,b
  5439  0006CA  6FDF               	movwf	(??_ProtocolTaskBuildFrame+1)& (0+255),b
  5440  0006CC  C0DE  FFF6         	movff	??_ProtocolTaskBuildFrame,tblptrl
  5441  0006D0  C0DF  FFF7         	movff	??_ProtocolTaskBuildFrame+1,tblptrh
  5442  0006D4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5443  0006D4  6AF8               	clrf	tblptru,c
  5444  0006D6                     	endif
  5445  0006D6                     	if	0	;tblptru may be non-zero
  5446  0006D6                     	endif
  5447  0006D6  0008               	tblrd		*
  5448  0006D8  50F5               	movf	tablat,w,c
  5449  0006DA  ECC0  F009         	call	_ProtocolGetValidity
  5450  0006DE  D87E               	call	PL24	;call to abstracted procedure
  5451                           
  5452                           ; BSR set to: 0
  5453                           ;sfxProtocoll.c: 125: dataSize = 2;
  5454  0006E0  0E02               	movlw	2
  5455  0006E2  D011               	goto	L9
  5456  0006E4                     l3155:
  5457                           
  5458                           ; BSR set to: 0
  5459                           ;sfxProtocoll.c: 128: dataField = (unsigned long)sysVarBattery;
  5460  0006E4  51F3               	movf	_sysVarBattery& (0+255),w,b
  5461  0006E6  D87A               	call	PL24	;call to abstracted procedure
  5462                           
  5463                           ;sfxProtocoll.c: 129: dataSize = 6;
  5464  0006E8  0E06               	movlw	6
  5465  0006EA  D00D               	goto	L9
  5466  0006EC                     l3157:
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;sfxProtocoll.c: 132: dataField = (unsigned long)sysVarMainInput;
  5470  0006EC  5193               	movf	_sysVarMainInput& (0+255),w,b
  5471  0006EE  D876               	call	PL24	;call to abstracted procedure
  5472                           
  5473                           ;sfxProtocoll.c: 133: dataSize = 1;
  5474  0006F0  0E01               	movlw	1
  5475  0006F2  D009               	goto	L9
  5476  0006F4                     l710:
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;sfxProtocoll.c: 136: dataField = (unsigned long)sysVarGpsLat;
  5480  0006F4  C070  F0E1         	movff	_sysVarGpsLat,ProtocolTaskBuildFrame@dataField
  5481  0006F8  C071  F0E2         	movff	_sysVarGpsLat+1,ProtocolTaskBuildFrame@dataField+1
  5482  0006FC  C072  F0E3         	movff	_sysVarGpsLat+2,ProtocolTaskBuildFrame@dataField+2
  5483  000700  C073  F0E4         	movff	_sysVarGpsLat+3,ProtocolTaskBuildFrame@dataField+3
  5484  000704  D00A               	goto	l3161
  5485  000706                     L9:
  5486  000706  6FE7               	movwf	ProtocolTaskBuildFrame@dataSize& (0+255),b
  5487                           
  5488                           ;sfxProtocoll.c: 138: break;
  5489  000708  D036               	goto	l3179
  5490  00070A                     l711:
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;sfxProtocoll.c: 140: dataField = (unsigned long)sysVarGpsLong;
  5494  00070A  C06C  F0E1         	movff	_sysVarGpsLong,ProtocolTaskBuildFrame@dataField
  5495  00070E  C06D  F0E2         	movff	_sysVarGpsLong+1,ProtocolTaskBuildFrame@dataField+1
  5496  000712  C06E  F0E3         	movff	_sysVarGpsLong+2,ProtocolTaskBuildFrame@dataField+2
  5497  000716  C06F  F0E4         	movff	_sysVarGpsLong+3,ProtocolTaskBuildFrame@dataField+3
  5498  00071A                     l3161:
  5499                           
  5500                           ; BSR set to: 0
  5501                           ;sfxProtocoll.c: 141: dataSize = 28;
  5502  00071A  0E1C               	movlw	28
  5503  00071C  D7F4               	goto	L9
  5504  00071E                     l3163:
  5505                           
  5506                           ; BSR set to: 0
  5507                           ;sfxProtocoll.c: 144: dataField = (unsigned long)sysVarGpsSpeed;
  5508  00071E  C07C  F0E1         	movff	_sysVarGpsSpeed,ProtocolTaskBuildFrame@dataField
  5509  000722  C07D  F0E2         	movff	_sysVarGpsSpeed+1,ProtocolTaskBuildFrame@dataField+1
  5510  000726  6BE3               	clrf	(ProtocolTaskBuildFrame@dataField+2)& (0+255),b
  5511  000728  6BE4               	clrf	(ProtocolTaskBuildFrame@dataField+3)& (0+255),b
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;sfxProtocoll.c: 145: dataSize = 8;
  5515  00072A  0E08               	movlw	8
  5516  00072C  D7EC               	goto	L9
  5517  00072E                     l3167:
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;sfxProtocoll.c: 148: dataField = (unsigned long)sysVarGpsCourse;
  5521  00072E  C07A  F0E1         	movff	_sysVarGpsCourse,ProtocolTaskBuildFrame@dataField
  5522  000732  C07B  F0E2         	movff	_sysVarGpsCourse+1,ProtocolTaskBuildFrame@dataField+1
  5523  000736  0E00               	movlw	0
  5524  000738  BFE2               	btfsc	(ProtocolTaskBuildFrame@dataField+1)& (0+255),7,b
  5525  00073A  0EFF               	movlw	-1
  5526  00073C  6FE3               	movwf	(ProtocolTaskBuildFrame@dataField+2)& (0+255),b
  5527  00073E  6FE4               	movwf	(ProtocolTaskBuildFrame@dataField+3)& (0+255),b
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;sfxProtocoll.c: 149: dataSize = 9;
  5531  000740  0E09               	movlw	9
  5532  000742  D7E1               	goto	L9
  5533  000744                     l3171:
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;sfxProtocoll.c: 152: dataField = (unsigned long)sysVarGpsOdometer;
  5537  000744  C078  F0E1         	movff	_sysVarGpsOdometer,ProtocolTaskBuildFrame@dataField
  5538  000748  C079  F0E2         	movff	_sysVarGpsOdometer+1,ProtocolTaskBuildFrame@dataField+1
  5539  00074C  6BE3               	clrf	(ProtocolTaskBuildFrame@dataField+2)& (0+255),b
  5540  00074E  6BE4               	clrf	(ProtocolTaskBuildFrame@dataField+3)& (0+255),b
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;sfxProtocoll.c: 153: dataSize = 16;
  5544  000750  0E10               	movlw	16
  5545  000752  D7D9               	goto	L9
  5546  000754                     l3177:
  5547                           
  5548                           ; BSR set to: 0
  5549  000754  D83B               	call	PL12	;call to abstracted procedure
  5550                           
  5551                           ; Switch size 1, requested type "space"
  5552                           ; Number of cases is 8, Range of values is 11 to 127
  5553                           ; switch strategies available:
  5554                           ; Name         Instructions Cycles
  5555                           ; simple_byte           25    13 (average)
  5556                           ;	Chosen strategy is simple_byte
  5557  000756  0A0B               	xorlw	11	; case 11
  5558  000758  E0C5               	bz	l3155
  5559  00075A  0A1D               	xorlw	29	; case 22
  5560  00075C  E0CB               	bz	l710
  5561  00075E  0A0E               	xorlw	14	; case 24
  5562  000760  E0D4               	bz	l711
  5563  000762  0A02               	xorlw	2	; case 26
  5564  000764  E0DC               	bz	l3163
  5565  000766  0A01               	xorlw	1	; case 27
  5566  000768  E0E2               	bz	l3167
  5567  00076A  0A3B               	xorlw	59	; case 32
  5568  00076C  E0EB               	bz	l3171
  5569  00076E  0A5E               	xorlw	94	; case 126
  5570  000770  E0BD               	bz	l3157
  5571  000772  0A01               	xorlw	1	; case 127
  5572  000774  E0A6               	bz	l3151
  5573  000776                     l3179:
  5574                           
  5575                           ; BSR set to: 0
  5576                           ;sfxProtocoll.c: 156: ProtocolAddFrameData(dataField,dataSize);
  5577  000776  C0E1  F0C9         	movff	ProtocolTaskBuildFrame@dataField,ProtocolAddFrameData@Data
  5578  00077A  C0E2  F0CA         	movff	ProtocolTaskBuildFrame@dataField+1,ProtocolAddFrameData@Data+1
  5579  00077E  C0E3  F0CB         	movff	ProtocolTaskBuildFrame@dataField+2,ProtocolAddFrameData@Data+2
  5580  000782  C0E4  F0CC         	movff	ProtocolTaskBuildFrame@dataField+3,ProtocolAddFrameData@Data+3
  5581  000786  C0E7  F0CD         	movff	ProtocolTaskBuildFrame@dataSize,ProtocolAddFrameData@DataRepSize
  5582  00078A  EC92  F004         	call	_ProtocolAddFrameData	;wreg free
  5583                           
  5584                           ; BSR set to: 0
  5585                           ;sfxProtocoll.c: 157: totalBits -= dataSize;
  5586  00078E  51E7               	movf	ProtocolTaskBuildFrame@dataSize& (0+255),w,b
  5587  000790  5FE5               	subwf	ProtocolTaskBuildFrame@totalBits& (0+255),f,b
  5588  000792  0E00               	movlw	0
  5589  000794  5BE6               	subwfb	(ProtocolTaskBuildFrame@totalBits+1)& (0+255),f,b
  5590                           
  5591                           ; BSR set to: 0
  5592                           ;sfxProtocoll.c: 158: if(totalBits < 0){
  5593  000796  BFE6               	btfsc	(ProtocolTaskBuildFrame@totalBits+1)& (0+255),7,b
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;sfxProtocoll.c: 159: return(0);
  5597  000798  0C00               	retlw	0
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;sfxProtocoll.c: 160: }
  5601                           ;sfxProtocoll.c: 161: protFrameDescPtr++;
  5602  00079A  4BE8               	infsnz	ProtocolTaskBuildFrame@protFrameDescPtr& (0+255),f,b
  5603  00079C  2BE9               	incf	(ProtocolTaskBuildFrame@protFrameDescPtr+1)& (0+255),f,b
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;sfxProtocoll.c: 162: }while(*protFrameDescPtr != 0);
  5607  00079E  D816               	call	PL12	;call to abstracted procedure
  5608  0007A0  E1D9               	bnz	l3177
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;sfxProtocoll.c: 163: if(totalBits>0){
  5612  0007A2  BFE6               	btfsc	(ProtocolTaskBuildFrame@totalBits+1)& (0+255),7,b
  5613  0007A4  D00C               	goto	l3197
  5614  0007A6  51E6               	movf	(ProtocolTaskBuildFrame@totalBits+1)& (0+255),w,b
  5615  0007A8  E102               	bnz	u1920
  5616  0007AA  05E5               	decf	ProtocolTaskBuildFrame@totalBits& (0+255),w,b
  5617  0007AC  E308               	bnc	l3197
  5618  0007AE                     u1920:
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;sfxProtocoll.c: 164: ProtocolAddFrameData(0,totalBits);
  5622  0007AE  6BC9               	clrf	ProtocolAddFrameData@Data& (0+255),b
  5623  0007B0  6BCA               	clrf	(ProtocolAddFrameData@Data+1)& (0+255),b
  5624  0007B2  6BCB               	clrf	(ProtocolAddFrameData@Data+2)& (0+255),b
  5625  0007B4  6BCC               	clrf	(ProtocolAddFrameData@Data+3)& (0+255),b
  5626  0007B6  C0E5  F0CD         	movff	ProtocolTaskBuildFrame@totalBits,ProtocolAddFrameData@DataRepSize
  5627  0007BA  EC92  F004         	call	_ProtocolAddFrameData	;wreg free
  5628  0007BE                     l3197:
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;sfxProtocoll.c: 165: }
  5632                           ;sfxProtocoll.c: 181: SigfoxTaskLoadPayloadBuffer(protDataShifter);
  5633  0007BE  0EB8               	movlw	low _protDataShifter
  5634  0007C0  6FC9               	movwf	SigfoxTaskLoadPayloadBuffer@rawData& (0+255),b
  5635  0007C2  0E00               	movlw	high _protDataShifter
  5636  0007C4  6FCA               	movwf	(SigfoxTaskLoadPayloadBuffer@rawData+1)& (0+255),b
  5637  0007C6  EC9B  F006         	call	_SigfoxTaskLoadPayloadBuffer	;wreg free
  5638                           
  5639                           ; BSR set to: 1
  5640                           ;sfxProtocoll.c: 183: return(1);
  5641  0007CA  0C01               	retlw	1	;funcret
  5642  0007CC                     __end_of_ProtocolTaskBuildFrame:
  5643                           	opt stack 0
  5644  0007CC                     PL12:
  5645                           	opt stack 22
  5646  0007CC  C0E8  FFF6         	movff	ProtocolTaskBuildFrame@protFrameDescPtr,tblptrl
  5647  0007D0  C0E9  FFF7         	movff	ProtocolTaskBuildFrame@protFrameDescPtr+1,tblptrh
  5648  0007D4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5649  0007D4  6AF8               	clrf	tblptru,c
  5650  0007D6                     	endif
  5651  0007D6                     	if	0	;tblptru may be non-zero
  5652  0007D6                     	endif
  5653  0007D6  0008               	tblrd		*
  5654  0007D8  50F5               	movf	tablat,w,c
  5655  0007DA  0012               	return	
  5656  0007DC                     __end_ofPL12:
  5657                           	opt stack 0
  5658  0007DC                     PL24:
  5659                           	opt stack 22
  5660  0007DC  6FE1               	movwf	ProtocolTaskBuildFrame@dataField& (0+255),b
  5661  0007DE  6BE2               	clrf	(ProtocolTaskBuildFrame@dataField+1)& (0+255),b
  5662  0007E0  6BE3               	clrf	(ProtocolTaskBuildFrame@dataField+2)& (0+255),b
  5663  0007E2  6BE4               	clrf	(ProtocolTaskBuildFrame@dataField+3)& (0+255),b
  5664  0007E4  0012               	return	
  5665  0007E6                     __end_ofPL24:
  5666                           	opt stack 0
  5667  0007E6                     PL26:
  5668                           	opt stack 22
  5669  0007E6  6FC9               	movwf	ProtocolAddFrameData@Data& (0+255),b
  5670  0007E8  6BCA               	clrf	(ProtocolAddFrameData@Data+1)& (0+255),b
  5671  0007EA  6BCB               	clrf	(ProtocolAddFrameData@Data+2)& (0+255),b
  5672  0007EC  6BCC               	clrf	(ProtocolAddFrameData@Data+3)& (0+255),b
  5673  0007EE  0012               	return	
  5674  0007F0                     __end_ofPL26:
  5675                           	opt stack 0
  5676                           tosu	equ	0xFFF
  5677                           tosh	equ	0xFFE
  5678                           tosl	equ	0xFFD
  5679                           pclath	equ	0xFFA
  5680                           tblptru	equ	0xFF8
  5681                           tblptrh	equ	0xFF7
  5682                           tblptrl	equ	0xFF6
  5683                           tablat	equ	0xFF5
  5684                           prodh	equ	0xFF4
  5685                           prodl	equ	0xFF3
  5686                           intcon	equ	0xFF2
  5687                           intcon2	equ	0xFF1
  5688                           postinc0	equ	0xFEE
  5689                           wreg	equ	0xFE8
  5690                           indf1	equ	0xFE7
  5691                           postdec1	equ	0xFE5
  5692                           fsr1h	equ	0xFE2
  5693                           fsr1l	equ	0xFE1
  5694                           indf2	equ	0xFDF
  5695                           postinc2	equ	0xFDE
  5696                           plusw2	equ	0xFDB
  5697                           fsr2h	equ	0xFDA
  5698                           fsr2l	equ	0xFD9
  5699                           status	equ	0xFD8
  5700                           
  5701 ;; *************** function _SigfoxTaskLoadPayloadBuffer *****************
  5702 ;; Defined at:
  5703 ;;		line 420 in file "mcc_generated_files/eusart2.c"
  5704 ;; Parameters:    Size  Location     Type
  5705 ;;  rawData         2    5[BANK0 ] PTR unsigned char 
  5706 ;;		 -> protDataShifter(12), 
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;  buffer          1   14[BANK0 ] unsigned char 
  5709 ;;  payloadBuffe    1   13[BANK0 ] unsigned char 
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  1    wreg      void 
  5712 ;; Registers used:
  5713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5714 ;; Tracked objects:
  5715 ;;		On entry : 3F/0
  5716 ;;		On exit  : 3F/1
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5719 ;;      Params:         0       2       0       0       0       0       0
  5720 ;;      Locals:         0       6       0       0       0       0       0
  5721 ;;      Temps:          0       2       0       0       0       0       0
  5722 ;;      Totals:         0      10       0       0       0       0       0
  5723 ;;Total ram usage:       10 bytes
  5724 ;; Hardware stack levels used:    1
  5725 ;; Hardware stack levels required when called:    5
  5726 ;; This function calls:
  5727 ;;		Nothing
  5728 ;; This function is called by:
  5729 ;;		_ProtocolTaskBuildFrame
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           	psect	text35
  5734  000D36                     __ptext35:
  5735                           	opt stack 0
  5736  000D36                     _SigfoxTaskLoadPayloadBuffer:
  5737                           	opt stack 23
  5738                           
  5739                           ;eusart2.c: 421: uint8_t payloadBufferPtr, buffer;
  5740                           ;eusart2.c: 423: for(payloadBufferPtr = 0; payloadBufferPtr < 12; payloadBufferPtr++){
  5741                           
  5742                           ;incstack = 0
  5743  000D36  0100               	movlb	0	; () banked
  5744  000D38  6BD1               	clrf	SigfoxTaskLoadPayloadBuffer@payloadBufferPtr& (0+255),b
  5745  000D3A                     l2953:
  5746                           
  5747                           ; BSR set to: 0
  5748  000D3A  0E0B               	movlw	11
  5749  000D3C  65D1               	cpfsgt	SigfoxTaskLoadPayloadBuffer@payloadBufferPtr& (0+255),b
  5750  000D3E  D001               	goto	l2957
  5751  000D40  D038               	goto	l363
  5752  000D42                     l2957:
  5753                           
  5754                           ; BSR set to: 0
  5755                           ;eusart2.c: 424: buffer = (rawData[payloadBufferPtr] >> 4) & 0x0F;
  5756  000D42  D83A               	call	PL14	;call to abstracted procedure
  5757  000D44  6FCB               	movwf	??_SigfoxTaskLoadPayloadBuffer& (0+255),b
  5758  000D46  39CB               	swapf	??_SigfoxTaskLoadPayloadBuffer& (0+255),w,b
  5759  000D48  0B0F               	andlw	15
  5760  000D4A  6FD2               	movwf	SigfoxTaskLoadPayloadBuffer@buffer& (0+255),b
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;eusart2.c: 425: SigfoxPayloadBuffer[2 * payloadBufferPtr] = (buffer < 10)? (buffer + '0
      +                          '): (buffer - 10 + 'A');
  5764  000D4C  0E09               	movlw	9
  5765  000D4E  65D2               	cpfsgt	SigfoxTaskLoadPayloadBuffer@buffer& (0+255),b
  5766  000D50  D002               	goto	l2963
  5767                           
  5768                           ; BSR set to: 0
  5769  000D52  0E37               	movlw	55
  5770  000D54  D001               	goto	L10
  5771  000D56                     l2963:
  5772                           
  5773                           ; BSR set to: 0
  5774  000D56  0E30               	movlw	48
  5775  000D58                     L10:
  5776  000D58  25D2               	addwf	SigfoxTaskLoadPayloadBuffer@buffer& (0+255),w,b
  5777  000D5A  6FCD               	movwf	_SigfoxTaskLoadPayloadBuffer$800& (0+255),b
  5778  000D5C  6BCE               	clrf	(_SigfoxTaskLoadPayloadBuffer$800+1)& (0+255),b
  5779  000D5E  0E00               	movlw	0
  5780  000D60  23CE               	addwfc	(_SigfoxTaskLoadPayloadBuffer$800+1)& (0+255),f,b
  5781                           
  5782                           ; BSR set to: 0
  5783  000D62  51D1               	movf	SigfoxTaskLoadPayloadBuffer@payloadBufferPtr& (0+255),w,b
  5784  000D64  6FCB               	movwf	??_SigfoxTaskLoadPayloadBuffer& (0+255),b
  5785  000D66  6BCC               	clrf	(??_SigfoxTaskLoadPayloadBuffer+1)& (0+255),b
  5786  000D68  90D8               	bcf	status,0,c
  5787  000D6A  37CB               	rlcf	??_SigfoxTaskLoadPayloadBuffer& (0+255),f,b
  5788  000D6C  37CC               	rlcf	(??_SigfoxTaskLoadPayloadBuffer+1)& (0+255),f,b
  5789  000D6E  0E00               	movlw	low _SigfoxPayloadBuffer
  5790  000D70  25CB               	addwf	??_SigfoxTaskLoadPayloadBuffer& (0+255),w,b
  5791  000D72  6ED9               	movwf	fsr2l,c
  5792  000D74  0E01               	movlw	high _SigfoxPayloadBuffer
  5793  000D76  21CC               	addwfc	(??_SigfoxTaskLoadPayloadBuffer+1)& (0+255),w,b
  5794  000D78  6EDA               	movwf	fsr2h,c
  5795  000D7A  C0CD  FFDF         	movff	_SigfoxTaskLoadPayloadBuffer$800,indf2
  5796                           
  5797                           ; BSR set to: 0
  5798                           ;eusart2.c: 426: buffer = rawData[payloadBufferPtr] & 0x0F;
  5799  000D7E  D81C               	call	PL14	;call to abstracted procedure
  5800  000D80  0B0F               	andlw	15
  5801  000D82  6FD2               	movwf	SigfoxTaskLoadPayloadBuffer@buffer& (0+255),b
  5802                           
  5803                           ;eusart2.c: 427: SigfoxPayloadBuffer[2 * payloadBufferPtr + 1] = (buffer < 10)? (buffer 
      +                          + '0'): (buffer - 10 + 'A');
  5804  000D84  0E09               	movlw	9
  5805  000D86  65D2               	cpfsgt	SigfoxTaskLoadPayloadBuffer@buffer& (0+255),b
  5806  000D88  D002               	goto	l2971
  5807                           
  5808                           ; BSR set to: 0
  5809  000D8A  0E37               	movlw	55
  5810  000D8C  D001               	goto	L11
  5811  000D8E                     l2971:
  5812                           
  5813                           ; BSR set to: 0
  5814  000D8E  0E30               	movlw	48
  5815  000D90                     L11:
  5816  000D90  25D2               	addwf	SigfoxTaskLoadPayloadBuffer@buffer& (0+255),w,b
  5817  000D92  6FCF               	movwf	_SigfoxTaskLoadPayloadBuffer$801& (0+255),b
  5818  000D94  6BD0               	clrf	(_SigfoxTaskLoadPayloadBuffer$801+1)& (0+255),b
  5819  000D96  0E00               	movlw	0
  5820  000D98  23D0               	addwfc	(_SigfoxTaskLoadPayloadBuffer$801+1)& (0+255),f,b
  5821                           
  5822                           ; BSR set to: 0
  5823  000D9A  51D1               	movf	SigfoxTaskLoadPayloadBuffer@payloadBufferPtr& (0+255),w,b
  5824  000D9C  0D02               	mullw	2
  5825  000D9E  0E01               	movlw	low (_SigfoxPayloadBuffer+1)
  5826  000DA0  24F3               	addwf	prodl,w,c
  5827  000DA2  6ED9               	movwf	fsr2l,c
  5828  000DA4  0E01               	movlw	high (_SigfoxPayloadBuffer+1)
  5829  000DA6  20F4               	addwfc	prodh,w,c
  5830  000DA8  6EDA               	movwf	fsr2h,c
  5831  000DAA  C0CF  FFDF         	movff	_SigfoxTaskLoadPayloadBuffer$801,indf2
  5832                           
  5833                           ; BSR set to: 0
  5834  000DAE  2BD1               	incf	SigfoxTaskLoadPayloadBuffer@payloadBufferPtr& (0+255),f,b
  5835  000DB0  D7C4               	goto	l2953
  5836  000DB2                     l363:
  5837                           
  5838                           ; BSR set to: 0
  5839                           ;eusart2.c: 428: }
  5840                           ;eusart2.c: 429: SigfoxPayloadBuffer[24] = 0;
  5841  000DB2  0101               	movlb	1	; () banked
  5842  000DB4  6B18               	clrf	(_SigfoxPayloadBuffer+24)& (0+255),b
  5843                           
  5844                           ; BSR set to: 1
  5845  000DB6  0012               	return		;funcret
  5846  000DB8                     __end_of_SigfoxTaskLoadPayloadBuffer:
  5847                           	opt stack 0
  5848  000DB8                     PL14:
  5849                           	opt stack 23
  5850  000DB8  51D1               	movf	SigfoxTaskLoadPayloadBuffer@payloadBufferPtr& (0+255),w,b
  5851  000DBA  25C9               	addwf	SigfoxTaskLoadPayloadBuffer@rawData& (0+255),w,b
  5852  000DBC  6ED9               	movwf	fsr2l,c
  5853  000DBE  0E00               	movlw	0
  5854  000DC0  21CA               	addwfc	(SigfoxTaskLoadPayloadBuffer@rawData+1)& (0+255),w,b
  5855  000DC2  6EDA               	movwf	fsr2h,c
  5856  000DC4  50DF               	movf	indf2,w,c
  5857  000DC6  0012               	return	
  5858  000DC8                     __end_ofPL14:
  5859                           	opt stack 0
  5860                           tosu	equ	0xFFF
  5861                           tosh	equ	0xFFE
  5862                           tosl	equ	0xFFD
  5863                           pclath	equ	0xFFA
  5864                           tblptru	equ	0xFF8
  5865                           tblptrh	equ	0xFF7
  5866                           tblptrl	equ	0xFF6
  5867                           tablat	equ	0xFF5
  5868                           prodh	equ	0xFF4
  5869                           prodl	equ	0xFF3
  5870                           intcon	equ	0xFF2
  5871                           intcon2	equ	0xFF1
  5872                           postinc0	equ	0xFEE
  5873                           wreg	equ	0xFE8
  5874                           indf1	equ	0xFE7
  5875                           postdec1	equ	0xFE5
  5876                           fsr1h	equ	0xFE2
  5877                           fsr1l	equ	0xFE1
  5878                           indf2	equ	0xFDF
  5879                           postinc2	equ	0xFDE
  5880                           plusw2	equ	0xFDB
  5881                           fsr2h	equ	0xFDA
  5882                           fsr2l	equ	0xFD9
  5883                           status	equ	0xFD8
  5884                           
  5885 ;; *************** function _ProtocolGetValidity *****************
  5886 ;; Defined at:
  5887 ;;		line 52 in file "sfxProtocoll.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;  variableID      1    wreg     unsigned char 
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;  variableID      1    6[BANK0 ] unsigned char 
  5892 ;;  taskResponse    1    7[BANK0 ] enum E6688
  5893 ;; Return value:  Size  Location     Type
  5894 ;;                  1    wreg      enum E6688
  5895 ;; Registers used:
  5896 ;;		wreg, status,2, status,0, cstack
  5897 ;; Tracked objects:
  5898 ;;		On entry : 3F/0
  5899 ;;		On exit  : 3F/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5902 ;;      Params:         0       0       0       0       0       0       0
  5903 ;;      Locals:         0       2       0       0       0       0       0
  5904 ;;      Temps:          0       0       0       0       0       0       0
  5905 ;;      Totals:         0       2       0       0       0       0       0
  5906 ;;Total ram usage:        2 bytes
  5907 ;; Hardware stack levels used:    1
  5908 ;; Hardware stack levels required when called:    6
  5909 ;; This function calls:
  5910 ;;		_gpsTaskGetVarValidity
  5911 ;;		_powerTaskGetVarValidity
  5912 ;; This function is called by:
  5913 ;;		_ProtocolTaskBuildFrame
  5914 ;; This function uses a non-reentrant model
  5915 ;;
  5916                           
  5917                           	psect	text36
  5918  001380                     __ptext36:
  5919                           	opt stack 0
  5920  001380                     _ProtocolGetValidity:
  5921                           	opt stack 22
  5922                           
  5923                           ; BSR set to: 1
  5924                           ;incstack = 0
  5925                           ;ProtocolGetValidity@variableID stored from wreg
  5926  001380  0100               	movlb	0	; () banked
  5927  001382  6FCA               	movwf	ProtocolGetValidity@variableID& (0+255),b
  5928                           
  5929                           ;sfxProtocoll.c: 53: dataQualifier_t taskResponse;
  5930                           ;sfxProtocoll.c: 54: taskResponse = gpsTaskGetVarValidity(variableID);
  5931  001384  51CA               	movf	ProtocolGetValidity@variableID& (0+255),w,b
  5932  001386  ECA6  F00A         	call	_gpsTaskGetVarValidity
  5933  00138A  0100               	movlb	0	; () banked
  5934  00138C  6FCB               	movwf	ProtocolGetValidity@taskResponse& (0+255),b
  5935                           
  5936                           ; BSR set to: 0
  5937                           ;sfxProtocoll.c: 55: if(taskResponse != UNKNOWN_SENSOR){
  5938  00138E  0E04               	movlw	4
  5939  001390  19CB               	xorwf	ProtocolGetValidity@taskResponse& (0+255),w,b
  5940  001392  E002               	bz	l2043
  5941                           
  5942                           ; BSR set to: 0
  5943                           ;sfxProtocoll.c: 56: return(taskResponse);
  5944  001394  51CB               	movf	ProtocolGetValidity@taskResponse& (0+255),w,b
  5945  001396  0012               	return	
  5946  001398                     l2043:
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;sfxProtocoll.c: 57: }
  5950                           ;sfxProtocoll.c: 58: taskResponse = powerTaskGetVarValidity(variableID);
  5951  001398  51CA               	movf	ProtocolGetValidity@variableID& (0+255),w,b
  5952  00139A  EC89  F00A         	call	_powerTaskGetVarValidity
  5953  00139E  6FCB               	movwf	ProtocolGetValidity@taskResponse& (0+255),b
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;sfxProtocoll.c: 59: if(taskResponse != UNKNOWN_SENSOR){
  5957  0013A0  0E04               	movlw	4
  5958  0013A2  19CB               	xorwf	ProtocolGetValidity@taskResponse& (0+255),w,b
  5959  0013A4  E002               	bz	l2051
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;sfxProtocoll.c: 60: return(taskResponse);
  5963  0013A6  51CB               	movf	ProtocolGetValidity@taskResponse& (0+255),w,b
  5964  0013A8  0012               	return	
  5965  0013AA                     l2051:
  5966                           
  5967                           ; BSR set to: 0
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;sfxProtocoll.c: 61: }
  5971                           ;sfxProtocoll.c: 62: return(UNKNOWN_SENSOR);
  5972  0013AA  0C04               	retlw	4	;funcret
  5973  0013AC                     __end_of_ProtocolGetValidity:
  5974                           	opt stack 0
  5975                           tosu	equ	0xFFF
  5976                           tosh	equ	0xFFE
  5977                           tosl	equ	0xFFD
  5978                           pclath	equ	0xFFA
  5979                           tblptru	equ	0xFF8
  5980                           tblptrh	equ	0xFF7
  5981                           tblptrl	equ	0xFF6
  5982                           tablat	equ	0xFF5
  5983                           prodh	equ	0xFF4
  5984                           prodl	equ	0xFF3
  5985                           intcon	equ	0xFF2
  5986                           intcon2	equ	0xFF1
  5987                           postinc0	equ	0xFEE
  5988                           wreg	equ	0xFE8
  5989                           indf1	equ	0xFE7
  5990                           postdec1	equ	0xFE5
  5991                           fsr1h	equ	0xFE2
  5992                           fsr1l	equ	0xFE1
  5993                           indf2	equ	0xFDF
  5994                           postinc2	equ	0xFDE
  5995                           plusw2	equ	0xFDB
  5996                           fsr2h	equ	0xFDA
  5997                           fsr2l	equ	0xFD9
  5998                           status	equ	0xFD8
  5999                           
  6000 ;; *************** function _powerTaskGetVarValidity *****************
  6001 ;; Defined at:
  6002 ;;		line 137 in file "powerTask.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;  variableID      1    wreg     unsigned char 
  6005 ;; Auto vars:     Size  Location     Type
  6006 ;;  variableID      1    5[BANK0 ] unsigned char 
  6007 ;; Return value:  Size  Location     Type
  6008 ;;                  1    wreg      enum E6688
  6009 ;; Registers used:
  6010 ;;		wreg, status,2, status,0
  6011 ;; Tracked objects:
  6012 ;;		On entry : 3F/0
  6013 ;;		On exit  : 3F/0
  6014 ;;		Unchanged: 0/0
  6015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6016 ;;      Params:         0       0       0       0       0       0       0
  6017 ;;      Locals:         0       1       0       0       0       0       0
  6018 ;;      Temps:          0       0       0       0       0       0       0
  6019 ;;      Totals:         0       1       0       0       0       0       0
  6020 ;;Total ram usage:        1 bytes
  6021 ;; Hardware stack levels used:    1
  6022 ;; Hardware stack levels required when called:    5
  6023 ;; This function calls:
  6024 ;;		Nothing
  6025 ;; This function is called by:
  6026 ;;		_ProtocolGetValidity
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030                           	psect	text37
  6031  001512                     __ptext37:
  6032                           	opt stack 0
  6033  001512                     _powerTaskGetVarValidity:
  6034                           	opt stack 22
  6035                           
  6036                           ; BSR set to: 0
  6037                           ;incstack = 0
  6038                           ;powerTaskGetVarValidity@variableID stored from wreg
  6039  001512  0100               	movlb	0	; () banked
  6040  001514  6FC9               	movwf	powerTaskGetVarValidity@variableID& (0+255),b
  6041                           
  6042                           ;powerTask.c: 138: if(variableID == 0x0B){
  6043  001516  0E0B               	movlw	11
  6044  001518  19C9               	xorwf	powerTaskGetVarValidity@variableID& (0+255),w,b
  6045  00151A  E101               	bnz	l1839
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;powerTask.c: 139: return(SENSOR_READ);
  6049  00151C  0C00               	retlw	0
  6050  00151E                     l1839:
  6051                           
  6052                           ; BSR set to: 0
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;powerTask.c: 140: }
  6056                           ;powerTask.c: 141: return(UNKNOWN_SENSOR);
  6057  00151E  0C04               	retlw	4	;funcret
  6058  001520                     __end_of_powerTaskGetVarValidity:
  6059                           	opt stack 0
  6060                           tosu	equ	0xFFF
  6061                           tosh	equ	0xFFE
  6062                           tosl	equ	0xFFD
  6063                           pclath	equ	0xFFA
  6064                           tblptru	equ	0xFF8
  6065                           tblptrh	equ	0xFF7
  6066                           tblptrl	equ	0xFF6
  6067                           tablat	equ	0xFF5
  6068                           prodh	equ	0xFF4
  6069                           prodl	equ	0xFF3
  6070                           intcon	equ	0xFF2
  6071                           intcon2	equ	0xFF1
  6072                           postinc0	equ	0xFEE
  6073                           wreg	equ	0xFE8
  6074                           indf1	equ	0xFE7
  6075                           postdec1	equ	0xFE5
  6076                           fsr1h	equ	0xFE2
  6077                           fsr1l	equ	0xFE1
  6078                           indf2	equ	0xFDF
  6079                           postinc2	equ	0xFDE
  6080                           plusw2	equ	0xFDB
  6081                           fsr2h	equ	0xFDA
  6082                           fsr2l	equ	0xFD9
  6083                           status	equ	0xFD8
  6084                           
  6085 ;; *************** function _gpsTaskGetVarValidity *****************
  6086 ;; Defined at:
  6087 ;;		line 728 in file "mcc_generated_files/eusart1.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;  variableID      1    wreg     unsigned char 
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;  variableID      1    5[BANK0 ] unsigned char 
  6092 ;; Return value:  Size  Location     Type
  6093 ;;                  1    wreg      enum E6672
  6094 ;; Registers used:
  6095 ;;		wreg
  6096 ;; Tracked objects:
  6097 ;;		On entry : 3F/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6101 ;;      Params:         0       0       0       0       0       0       0
  6102 ;;      Locals:         0       1       0       0       0       0       0
  6103 ;;      Temps:          0       0       0       0       0       0       0
  6104 ;;      Totals:         0       1       0       0       0       0       0
  6105 ;;Total ram usage:        1 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; Hardware stack levels required when called:    5
  6108 ;; This function calls:
  6109 ;;		Nothing
  6110 ;; This function is called by:
  6111 ;;		_ProtocolGetValidity
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           	psect	text38
  6116  00154C                     __ptext38:
  6117                           	opt stack 0
  6118  00154C                     _gpsTaskGetVarValidity:
  6119                           	opt stack 22
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;incstack = 0
  6123                           ;gpsTaskGetVarValidity@variableID stored from wreg
  6124  00154C  0100               	movlb	0	; () banked
  6125  00154E  6FC9               	movwf	gpsTaskGetVarValidity@variableID& (0+255),b
  6126                           
  6127                           ;eusart1.c: 730: return(UNKNOWN_SENSOR);
  6128  001550  0C04               	retlw	4	;funcret
  6129  001552                     __end_of_gpsTaskGetVarValidity:
  6130                           	opt stack 0
  6131                           tosu	equ	0xFFF
  6132                           tosh	equ	0xFFE
  6133                           tosl	equ	0xFFD
  6134                           pclath	equ	0xFFA
  6135                           tblptru	equ	0xFF8
  6136                           tblptrh	equ	0xFF7
  6137                           tblptrl	equ	0xFF6
  6138                           tablat	equ	0xFF5
  6139                           prodh	equ	0xFF4
  6140                           prodl	equ	0xFF3
  6141                           intcon	equ	0xFF2
  6142                           intcon2	equ	0xFF1
  6143                           postinc0	equ	0xFEE
  6144                           wreg	equ	0xFE8
  6145                           indf1	equ	0xFE7
  6146                           postdec1	equ	0xFE5
  6147                           fsr1h	equ	0xFE2
  6148                           fsr1l	equ	0xFE1
  6149                           indf2	equ	0xFDF
  6150                           postinc2	equ	0xFDE
  6151                           plusw2	equ	0xFDB
  6152                           fsr2h	equ	0xFDA
  6153                           fsr2l	equ	0xFD9
  6154                           status	equ	0xFD8
  6155                           
  6156 ;; *************** function _ProtocolAddFrameData *****************
  6157 ;; Defined at:
  6158 ;;		line 64 in file "sfxProtocoll.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;  Data            4    5[BANK0 ] unsigned long 
  6161 ;;  DataRepSize     1    9[BANK0 ] unsigned char 
  6162 ;; Auto vars:     Size  Location     Type
  6163 ;;  longMask        4   20[BANK0 ] unsigned long 
  6164 ;;  bytes           1   25[BANK0 ] unsigned char 
  6165 ;;  i               1   24[BANK0 ] unsigned char 
  6166 ;;  toLeft          1   19[BANK0 ] unsigned char 
  6167 ;; Return value:  Size  Location     Type
  6168 ;;                  1    wreg      void 
  6169 ;; Registers used:
  6170 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 3F/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6176 ;;      Params:         0       5       0       0       0       0       0
  6177 ;;      Locals:         0       7       0       0       0       0       0
  6178 ;;      Temps:          0       9       0       0       0       0       0
  6179 ;;      Totals:         0      21       0       0       0       0       0
  6180 ;;Total ram usage:       21 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; Hardware stack levels required when called:    5
  6183 ;; This function calls:
  6184 ;;		Nothing
  6185 ;; This function is called by:
  6186 ;;		_ProtocolTaskBuildFrame
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text39
  6191  000924                     __ptext39:
  6192                           	opt stack 0
  6193  000924                     _ProtocolAddFrameData:
  6194                           	opt stack 23
  6195                           
  6196                           ;sfxProtocoll.c: 65: uint8_t toLeft, i, bytes;
  6197                           ;sfxProtocoll.c: 66: unsigned long longMask;
  6198                           ;sfxProtocoll.c: 68: toLeft = DataRepSize / 8;
  6199                           
  6200                           ;incstack = 0
  6201  000924  0100               	movlb	0	; () banked
  6202  000926  39CD               	swapf	ProtocolAddFrameData@DataRepSize& (0+255),w,b
  6203  000928  46E8               	rlncf	wreg,f,c
  6204  00092A  0B1F               	andlw	31
  6205  00092C  6FD7               	movwf	ProtocolAddFrameData@toLeft& (0+255),b
  6206                           
  6207                           ; BSR set to: 0
  6208                           ;sfxProtocoll.c: 69: for(i = 0; i < toLeft; i++){
  6209  00092E  6BDC               	clrf	ProtocolAddFrameData@i& (0+255),b
  6210  000930  D013               	goto	l2997
  6211  000932                     l678:
  6212                           
  6213                           ; BSR set to: 0
  6214                           ;sfxProtocoll.c: 70: for(bytes = 0; bytes < 11; bytes++){
  6215  000932  6BDD               	clrf	ProtocolAddFrameData@bytes& (0+255),b
  6216  000934                     l2983:
  6217                           
  6218                           ; BSR set to: 0
  6219  000934  0E0A               	movlw	10
  6220  000936  65DD               	cpfsgt	ProtocolAddFrameData@bytes& (0+255),b
  6221  000938  D001               	goto	l2987
  6222  00093A  D00B               	goto	l2993
  6223  00093C                     l2987:
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;sfxProtocoll.c: 71: protDataShifter[bytes] = protDataShifter[bytes + 1];
  6227  00093C  D881               	call	PL20	;call to abstracted procedure
  6228  00093E  0EB8               	movlw	low _protDataShifter
  6229  000940  25DD               	addwf	ProtocolAddFrameData@bytes& (0+255),w,b
  6230  000942  6EE1               	movwf	fsr1l,c
  6231  000944  6AE2               	clrf	fsr1h,c
  6232  000946  0E00               	movlw	high _protDataShifter
  6233  000948  22E2               	addwfc	fsr1h,f,c
  6234  00094A  CFDF FFE7          	movff	indf2,indf1
  6235                           
  6236                           ; BSR set to: 0
  6237  00094E  2BDD               	incf	ProtocolAddFrameData@bytes& (0+255),f,b
  6238  000950  D7F1               	goto	l2983
  6239  000952                     l2993:
  6240                           
  6241                           ; BSR set to: 0
  6242                           ;sfxProtocoll.c: 72: }
  6243                           ;sfxProtocoll.c: 73: protDataShifter[bytes] = 0;
  6244  000952  D86F               	call	PL4	;call to abstracted procedure
  6245  000954  6ADF               	clrf	indf2,c
  6246                           
  6247                           ; BSR set to: 0
  6248  000956  2BDC               	incf	ProtocolAddFrameData@i& (0+255),f,b
  6249  000958                     l2997:
  6250                           
  6251                           ; BSR set to: 0
  6252  000958  51D7               	movf	ProtocolAddFrameData@toLeft& (0+255),w,b
  6253  00095A  5DDC               	subwf	ProtocolAddFrameData@i& (0+255),w,b
  6254  00095C  E3EA               	bnc	l678
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;sfxProtocoll.c: 74: }
  6258                           ;sfxProtocoll.c: 75: toLeft = DataRepSize % 8;
  6259  00095E  51CD               	movf	ProtocolAddFrameData@DataRepSize& (0+255),w,b
  6260  000960  0B07               	andlw	7
  6261  000962  6FD7               	movwf	ProtocolAddFrameData@toLeft& (0+255),b
  6262                           
  6263                           ; BSR set to: 0
  6264                           ;sfxProtocoll.c: 76: for(i = 0; i < toLeft; i++){
  6265  000964  6BDC               	clrf	ProtocolAddFrameData@i& (0+255),b
  6266  000966  D01B               	goto	l3023
  6267  000968                     l683:
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;sfxProtocoll.c: 77: for(bytes = 0; bytes < 12; bytes++){
  6271  000968  6BDD               	clrf	ProtocolAddFrameData@bytes& (0+255),b
  6272  00096A                     l3003:
  6273                           
  6274                           ; BSR set to: 0
  6275  00096A  0E0B               	movlw	11
  6276  00096C  65DD               	cpfsgt	ProtocolAddFrameData@bytes& (0+255),b
  6277  00096E  D001               	goto	l3007
  6278  000970  D012               	goto	l3019
  6279  000972                     l3007:
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;sfxProtocoll.c: 78: protDataShifter[bytes] = (protDataShifter[bytes] * 2);
  6283  000972  D85F               	call	PL4	;call to abstracted procedure
  6284  000974  50DF               	movf	indf2,w,c
  6285  000976  0D02               	mullw	2
  6286  000978  D85C               	call	PL4	;call to abstracted procedure
  6287  00097A  CFF3 FFDF          	movff	prodl,indf2
  6288                           
  6289                           ; BSR set to: 0
  6290                           ;sfxProtocoll.c: 79: if(protDataShifter[bytes + 1] & 0x80){
  6291  00097E  D860               	call	PL20	;call to abstracted procedure
  6292  000980  AEDF               	btfss	indf2,7,c
  6293  000982  D004               	goto	l3013
  6294                           
  6295                           ; BSR set to: 0
  6296                           ;sfxProtocoll.c: 80: protDataShifter[bytes] |= 1;
  6297  000984  D856               	call	PL4	;call to abstracted procedure
  6298  000986  0E00               	movlw	0
  6299  000988  80DB               	bsf	plusw2,0,c
  6300                           
  6301                           ;sfxProtocoll.c: 81: }
  6302  00098A  D003               	goto	l3015
  6303  00098C                     l3013:
  6304                           
  6305                           ; BSR set to: 0
  6306                           ;sfxProtocoll.c: 82: else{
  6307                           ;sfxProtocoll.c: 83: protDataShifter[bytes] &= 0xFE;
  6308  00098C  D852               	call	PL4	;call to abstracted procedure
  6309  00098E  0EFE               	movlw	254
  6310  000990  16DF               	andwf	indf2,f,c
  6311  000992                     l3015:
  6312                           
  6313                           ; BSR set to: 0
  6314  000992  2BDD               	incf	ProtocolAddFrameData@bytes& (0+255),f,b
  6315  000994  D7EA               	goto	l3003
  6316  000996                     l3019:
  6317                           
  6318                           ; BSR set to: 0
  6319                           ;sfxProtocoll.c: 84: }
  6320                           ;sfxProtocoll.c: 85: }
  6321                           ;sfxProtocoll.c: 86: protDataShifter[bytes] &= 0xFE;
  6322  000996  D84D               	call	PL4	;call to abstracted procedure
  6323  000998  0EFE               	movlw	254
  6324  00099A  16DF               	andwf	indf2,f,c
  6325                           
  6326                           ; BSR set to: 0
  6327  00099C  2BDC               	incf	ProtocolAddFrameData@i& (0+255),f,b
  6328  00099E                     l3023:
  6329                           
  6330                           ; BSR set to: 0
  6331  00099E  51D7               	movf	ProtocolAddFrameData@toLeft& (0+255),w,b
  6332  0009A0  5DDC               	subwf	ProtocolAddFrameData@i& (0+255),w,b
  6333  0009A2  E3E2               	bnc	l683
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;sfxProtocoll.c: 87: }
  6337                           ;sfxProtocoll.c: 88: longMask = 1;
  6338  0009A4  0E01               	movlw	1
  6339  0009A6  6FD8               	movwf	ProtocolAddFrameData@longMask& (0+255),b
  6340  0009A8  6BD9               	clrf	(ProtocolAddFrameData@longMask+1)& (0+255),b
  6341  0009AA  6BDA               	clrf	(ProtocolAddFrameData@longMask+2)& (0+255),b
  6342  0009AC  6BDB               	clrf	(ProtocolAddFrameData@longMask+3)& (0+255),b
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;sfxProtocoll.c: 89: longMask = ((longMask << DataRepSize) - 1) & Data;
  6346  0009AE  C0CD  F0CE         	movff	ProtocolAddFrameData@DataRepSize,??_ProtocolAddFrameData
  6347  0009B2  C0D8  F0CF         	movff	ProtocolAddFrameData@longMask,??_ProtocolAddFrameData+1
  6348  0009B6  C0D9  F0D0         	movff	ProtocolAddFrameData@longMask+1,??_ProtocolAddFrameData+2
  6349  0009BA  C0DA  F0D1         	movff	ProtocolAddFrameData@longMask+2,??_ProtocolAddFrameData+3
  6350  0009BE  C0DB  F0D2         	movff	ProtocolAddFrameData@longMask+3,??_ProtocolAddFrameData+4
  6351  0009C2  2BCE               	incf	??_ProtocolAddFrameData& (0+255),f,b
  6352  0009C4  D005               	goto	u1750
  6353  0009C6                     u1755:
  6354  0009C6  90D8               	bcf	status,0,c
  6355  0009C8  37CF               	rlcf	(??_ProtocolAddFrameData+1)& (0+255),f,b
  6356  0009CA  37D0               	rlcf	(??_ProtocolAddFrameData+2)& (0+255),f,b
  6357  0009CC  37D1               	rlcf	(??_ProtocolAddFrameData+3)& (0+255),f,b
  6358  0009CE  37D2               	rlcf	(??_ProtocolAddFrameData+4)& (0+255),f,b
  6359  0009D0                     u1750:
  6360  0009D0  2FCE               	decfsz	??_ProtocolAddFrameData& (0+255),f,b
  6361  0009D2  D7F9               	goto	u1755
  6362  0009D4  0EFF               	movlw	255
  6363  0009D6  25CF               	addwf	(??_ProtocolAddFrameData+1)& (0+255),w,b
  6364  0009D8  6FD3               	movwf	(??_ProtocolAddFrameData+5)& (0+255),b
  6365  0009DA  0EFF               	movlw	255
  6366  0009DC  21D0               	addwfc	(??_ProtocolAddFrameData+2)& (0+255),w,b
  6367  0009DE  6FD4               	movwf	(??_ProtocolAddFrameData+6)& (0+255),b
  6368  0009E0  0EFF               	movlw	255
  6369  0009E2  21D1               	addwfc	(??_ProtocolAddFrameData+3)& (0+255),w,b
  6370  0009E4  6FD5               	movwf	(??_ProtocolAddFrameData+7)& (0+255),b
  6371  0009E6  0EFF               	movlw	255
  6372  0009E8  21D2               	addwfc	(??_ProtocolAddFrameData+4)& (0+255),w,b
  6373  0009EA  6FD6               	movwf	(??_ProtocolAddFrameData+8)& (0+255),b
  6374  0009EC  51C9               	movf	ProtocolAddFrameData@Data& (0+255),w,b
  6375  0009EE  15D3               	andwf	(??_ProtocolAddFrameData+5)& (0+255),w,b
  6376  0009F0  6FD8               	movwf	ProtocolAddFrameData@longMask& (0+255),b
  6377  0009F2  51CA               	movf	(ProtocolAddFrameData@Data+1)& (0+255),w,b
  6378  0009F4  15D4               	andwf	(??_ProtocolAddFrameData+6)& (0+255),w,b
  6379  0009F6  6FD9               	movwf	(ProtocolAddFrameData@longMask+1)& (0+255),b
  6380  0009F8  51CB               	movf	(ProtocolAddFrameData@Data+2)& (0+255),w,b
  6381  0009FA  15D5               	andwf	(??_ProtocolAddFrameData+7)& (0+255),w,b
  6382  0009FC  6FDA               	movwf	(ProtocolAddFrameData@longMask+2)& (0+255),b
  6383  0009FE  51CC               	movf	(ProtocolAddFrameData@Data+3)& (0+255),w,b
  6384  000A00  15D6               	andwf	(??_ProtocolAddFrameData+8)& (0+255),w,b
  6385  000A02  6FDB               	movwf	(ProtocolAddFrameData@longMask+3)& (0+255),b
  6386                           
  6387                           ; BSR set to: 0
  6388                           ;sfxProtocoll.c: 90: for(i = 11; i > 7; i--){
  6389  000A04  0E0B               	movlw	11
  6390  000A06  6FDC               	movwf	ProtocolAddFrameData@i& (0+255),b
  6391  000A08  0E08               	movlw	8
  6392  000A0A  61DC               	cpfslt	ProtocolAddFrameData@i& (0+255),b
  6393  000A0C  D001               	goto	l3033
  6394  000A0E  0C08               	retlw	8
  6395  000A10                     l3033:
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;sfxProtocoll.c: 91: protDataShifter[i] |= (longMask & 0xFF);
  6399  000A10  0EB8               	movlw	low _protDataShifter
  6400  000A12  25DC               	addwf	ProtocolAddFrameData@i& (0+255),w,b
  6401  000A14  6ED9               	movwf	fsr2l,c
  6402  000A16  6ADA               	clrf	fsr2h,c
  6403  000A18  0E00               	movlw	high _protDataShifter
  6404  000A1A  22DA               	addwfc	fsr2h,f,c
  6405  000A1C  51D8               	movf	ProtocolAddFrameData@longMask& (0+255),w,b
  6406  000A1E  12DF               	iorwf	indf2,f,c
  6407                           
  6408                           ; BSR set to: 0
  6409                           ;sfxProtocoll.c: 92: longMask = (longMask>>8);
  6410  000A20  51D9               	movf	(ProtocolAddFrameData@longMask+1)& (0+255),w,b
  6411  000A22  6FD8               	movwf	ProtocolAddFrameData@longMask& (0+255),b
  6412  000A24  51DA               	movf	(ProtocolAddFrameData@longMask+2)& (0+255),w,b
  6413  000A26  6FD9               	movwf	(ProtocolAddFrameData@longMask+1)& (0+255),b
  6414  000A28  51DB               	movf	(ProtocolAddFrameData@longMask+3)& (0+255),w,b
  6415  000A2A  6FDA               	movwf	(ProtocolAddFrameData@longMask+2)& (0+255),b
  6416  000A2C  6BDB               	clrf	(ProtocolAddFrameData@longMask+3)& (0+255),b
  6417                           
  6418                           ; BSR set to: 0
  6419  000A2E  07DC               	decf	ProtocolAddFrameData@i& (0+255),f,b
  6420  000A30  D7EB               	goto	L12
  6421  000A32                     __end_of_ProtocolAddFrameData:
  6422                           	opt stack 0
  6423  000A32                     PL4:
  6424                           	opt stack 23
  6425  000A32  0EB8               	movlw	low _protDataShifter
  6426  000A34  25DD               	addwf	ProtocolAddFrameData@bytes& (0+255),w,b
  6427  000A36  6ED9               	movwf	fsr2l,c
  6428  000A38  6ADA               	clrf	fsr2h,c
  6429  000A3A  0E00               	movlw	high _protDataShifter
  6430  000A3C  22DA               	addwfc	fsr2h,f,c
  6431  000A3E  0012               	return	
  6432  000A40                     __end_ofPL4:
  6433                           	opt stack 0
  6434  000A40                     PL20:
  6435                           	opt stack 23
  6436  000A40  0EB9               	movlw	low (_protDataShifter+1)
  6437  000A42  25DD               	addwf	ProtocolAddFrameData@bytes& (0+255),w,b
  6438  000A44  6ED9               	movwf	fsr2l,c
  6439  000A46  6ADA               	clrf	fsr2h,c
  6440  000A48  0E00               	movlw	high (_protDataShifter+1)
  6441  000A4A  22DA               	addwfc	fsr2h,f,c
  6442  000A4C  0012               	return	
  6443  000A4E                     __end_ofPL20:
  6444                           	opt stack 0
  6445                           tosu	equ	0xFFF
  6446                           tosh	equ	0xFFE
  6447                           tosl	equ	0xFFD
  6448                           pclath	equ	0xFFA
  6449                           tblptru	equ	0xFF8
  6450                           tblptrh	equ	0xFF7
  6451                           tblptrl	equ	0xFF6
  6452                           tablat	equ	0xFF5
  6453                           prodh	equ	0xFF4
  6454                           prodl	equ	0xFF3
  6455                           intcon	equ	0xFF2
  6456                           intcon2	equ	0xFF1
  6457                           postinc0	equ	0xFEE
  6458                           wreg	equ	0xFE8
  6459                           indf1	equ	0xFE7
  6460                           postdec1	equ	0xFE5
  6461                           fsr1h	equ	0xFE2
  6462                           fsr1l	equ	0xFE1
  6463                           indf2	equ	0xFDF
  6464                           postinc2	equ	0xFDE
  6465                           plusw2	equ	0xFDB
  6466                           fsr2h	equ	0xFDA
  6467                           fsr2l	equ	0xFD9
  6468                           status	equ	0xFD8
  6469                           
  6470 ;; *************** function _ProtocolSetNextMeasTime *****************
  6471 ;; Defined at:
  6472 ;;		line 17 in file "sfxProtocoll.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;		None
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;		None
  6477 ;; Return value:  Size  Location     Type
  6478 ;;                  1    wreg      unsigned char 
  6479 ;; Registers used:
  6480 ;;		wreg, status,2, status,0, cstack
  6481 ;; Tracked objects:
  6482 ;;		On entry : 0/0
  6483 ;;		On exit  : 3F/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6486 ;;      Params:         0       0       0       0       0       0       0
  6487 ;;      Locals:         0       0       0       0       0       0       0
  6488 ;;      Temps:          0       0       0       0       0       0       0
  6489 ;;      Totals:         0       0       0       0       0       0       0
  6490 ;;Total ram usage:        0 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; Hardware stack levels required when called:    6
  6493 ;; This function calls:
  6494 ;;		___almod
  6495 ;; This function is called by:
  6496 ;;		_ProtocolTask
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           	psect	text40
  6501  000DC8                     __ptext40:
  6502                           	opt stack 0
  6503  000DC8                     _ProtocolSetNextMeasTime:
  6504                           	opt stack 23
  6505                           
  6506                           ;sfxProtocoll.c: 19: if(!protVarSystemSynchronizedFlag){
  6507                           
  6508                           ; BSR set to: 0
  6509                           ;incstack = 0
  6510  000DC8  0100               	movlb	0	; () banked
  6511  000DCA  5183               	movf	_protVarSystemSynchronizedFlag& (0+255),w,b
  6512  000DCC  E10E               	bnz	l3093
  6513                           
  6514                           ; BSR set to: 0
  6515                           ;sfxProtocoll.c: 20: if(sysVarGpsValidFlag){
  6516  000DCE  5194               	movf	_sysVarGpsValidFlag& (0+255),w,b
  6517  000DD0  E00C               	bz	l3093
  6518                           
  6519                           ; BSR set to: 0
  6520                           ;sfxProtocoll.c: 21: protVarSystemSynchronizedFlag = 1;
  6521  000DD2  0E01               	movlw	1
  6522  000DD4  6F83               	movwf	_protVarSystemSynchronizedFlag& (0+255),b
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;sfxProtocoll.c: 22: protVarMeasurementTimer = 600 - (sysVarGpsDayTime % 600);
  6526  000DD6  D81B               	call	PL2	;call to abstracted procedure
  6527  000DD8  EC00  F006         	call	___almod	;wreg free
  6528  000DDC  D828               	call	PL10	;call to abstracted procedure
  6529                           
  6530                           ; BSR set to: 0
  6531                           ;sfxProtocoll.c: 23: protVarCommunicationTimer = 600 - (sysVarGpsDayTime % 600);
  6532  000DDE  D817               	call	PL2	;call to abstracted procedure
  6533  000DE0  EC00  F006         	call	___almod	;wreg free
  6534  000DE4  EC24  F009         	call	PL8	;call to abstracted procedure
  6535                           
  6536                           ; BSR set to: 0
  6537                           ;sfxProtocoll.c: 24: return(0);
  6538  000DE8  0C00               	retlw	0
  6539  000DEA                     l3093:
  6540                           
  6541                           ; BSR set to: 0
  6542                           ;sfxProtocoll.c: 25: }
  6543                           ;sfxProtocoll.c: 26: }
  6544                           ;sfxProtocoll.c: 27: if(protVarMeasurementTimer == 0){
  6545  000DEA  EC9A  F007         	call	PL34	;call to abstracted procedure
  6546  000DEE  E10E               	bnz	l3105
  6547                           
  6548                           ; BSR set to: 0
  6549                           ;sfxProtocoll.c: 28: if(!protVarSystemSynchronizedFlag){
  6550  000DF0  5183               	movf	_protVarSystemSynchronizedFlag& (0+255),w,b
  6551  000DF2  E107               	bnz	l3099
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;sfxProtocoll.c: 29: protVarMeasurementTimer = 300;
  6555  000DF4  0E2C               	movlw	44
  6556  000DF6  6F64               	movwf	_protVarMeasurementTimer& (0+255),b
  6557  000DF8  0E01               	movlw	1
  6558  000DFA  6F65               	movwf	(_protVarMeasurementTimer+1)& (0+255),b
  6559  000DFC  6B66               	clrf	(_protVarMeasurementTimer+2)& (0+255),b
  6560  000DFE  6B67               	clrf	(_protVarMeasurementTimer+3)& (0+255),b
  6561                           
  6562                           ;sfxProtocoll.c: 30: }
  6563  000E00  0C01               	retlw	1
  6564  000E02                     l3099:
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;sfxProtocoll.c: 31: else{
  6568                           ;sfxProtocoll.c: 32: protVarMeasurementTimer = 600 - (sysVarGpsDayTime % 600);
  6569  000E02  D805               	call	PL2	;call to abstracted procedure
  6570  000E04  EC00  F006         	call	___almod	;wreg free
  6571  000E08  D812               	call	PL10	;call to abstracted procedure
  6572                           
  6573                           ; BSR set to: 0
  6574                           ;sfxProtocoll.c: 33: }
  6575                           ;sfxProtocoll.c: 34: return(1);
  6576  000E0A  0C01               	retlw	1
  6577  000E0C                     l3105:
  6578                           
  6579                           ; BSR set to: 0
  6580                           
  6581                           ; BSR set to: 0
  6582                           ;sfxProtocoll.c: 35: }
  6583                           ;sfxProtocoll.c: 36: return(0);
  6584  000E0C  0C00               	retlw	0	;funcret
  6585  000E0E                     __end_of_ProtocolSetNextMeasTime:
  6586                           	opt stack 0
  6587  000E0E                     PL2:
  6588                           	opt stack 23
  6589  000E0E  C068  F0C9         	movff	_sysVarGpsDayTime,___almod@dividend
  6590  000E12  C069  F0CA         	movff	_sysVarGpsDayTime+1,___almod@dividend+1
  6591  000E16  C06A  F0CB         	movff	_sysVarGpsDayTime+2,___almod@dividend+2
  6592  000E1A  C06B  F0CC         	movff	_sysVarGpsDayTime+3,___almod@dividend+3
  6593  000E1E  0E58               	movlw	88
  6594  000E20  6FCD               	movwf	___almod@divisor& (0+255),b
  6595  000E22  0E02               	movlw	2
  6596  000E24  6FCE               	movwf	(___almod@divisor+1)& (0+255),b
  6597  000E26  0E00               	movlw	0
  6598  000E28  6FCF               	movwf	(___almod@divisor+2)& (0+255),b
  6599  000E2A  6FD0               	movwf	(___almod@divisor+3)& (0+255),b
  6600  000E2C  0C00               	retlw	0
  6601  000E2E                     __end_ofPL2:
  6602                           	opt stack 0
  6603  000E2E                     PL10:
  6604                           	opt stack 23
  6605  000E2E  51C9               	movf	?___almod& (0+255),w,b
  6606  000E30  0858               	sublw	88
  6607  000E32  6F64               	movwf	_protVarMeasurementTimer& (0+255),b
  6608  000E34  0E02               	movlw	2
  6609  000E36  55CA               	subfwb	(?___almod+1)& (0+255),w,b
  6610  000E38  6F65               	movwf	(_protVarMeasurementTimer+1)& (0+255),b
  6611  000E3A  0E00               	movlw	0
  6612  000E3C  55CB               	subfwb	(?___almod+2)& (0+255),w,b
  6613  000E3E  6F66               	movwf	(_protVarMeasurementTimer+2)& (0+255),b
  6614  000E40  0E00               	movlw	0
  6615  000E42  55CC               	subfwb	(?___almod+3)& (0+255),w,b
  6616  000E44  6F67               	movwf	(_protVarMeasurementTimer+3)& (0+255),b
  6617  000E46  0012               	return	
  6618  000E48                     __end_ofPL10:
  6619                           	opt stack 0
  6620                           tosu	equ	0xFFF
  6621                           tosh	equ	0xFFE
  6622                           tosl	equ	0xFFD
  6623                           pclath	equ	0xFFA
  6624                           tblptru	equ	0xFF8
  6625                           tblptrh	equ	0xFF7
  6626                           tblptrl	equ	0xFF6
  6627                           tablat	equ	0xFF5
  6628                           prodh	equ	0xFF4
  6629                           prodl	equ	0xFF3
  6630                           intcon	equ	0xFF2
  6631                           intcon2	equ	0xFF1
  6632                           postinc0	equ	0xFEE
  6633                           wreg	equ	0xFE8
  6634                           indf1	equ	0xFE7
  6635                           postdec1	equ	0xFE5
  6636                           fsr1h	equ	0xFE2
  6637                           fsr1l	equ	0xFE1
  6638                           indf2	equ	0xFDF
  6639                           postinc2	equ	0xFDE
  6640                           plusw2	equ	0xFDB
  6641                           fsr2h	equ	0xFDA
  6642                           fsr2l	equ	0xFD9
  6643                           status	equ	0xFD8
  6644                           
  6645 ;; *************** function _ProtocolSetNextCommTime *****************
  6646 ;; Defined at:
  6647 ;;		line 38 in file "sfxProtocoll.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;		None
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;		None
  6652 ;; Return value:  Size  Location     Type
  6653 ;;                  1    wreg      unsigned char 
  6654 ;; Registers used:
  6655 ;;		wreg, status,2, status,0, cstack
  6656 ;; Tracked objects:
  6657 ;;		On entry : 3F/0
  6658 ;;		On exit  : 3F/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6661 ;;      Params:         0       0       0       0       0       0       0
  6662 ;;      Locals:         0       0       0       0       0       0       0
  6663 ;;      Temps:          0       0       0       0       0       0       0
  6664 ;;      Totals:         0       0       0       0       0       0       0
  6665 ;;Total ram usage:        0 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    6
  6668 ;; This function calls:
  6669 ;;		___almod
  6670 ;; This function is called by:
  6671 ;;		_ProtocolTask
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           	psect	text41
  6676  001228                     __ptext41:
  6677                           	opt stack 0
  6678  001228                     _ProtocolSetNextCommTime:
  6679                           	opt stack 23
  6680                           
  6681                           ;sfxProtocoll.c: 40: protVarSystemSynchronizedFlag = 1;
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;incstack = 0
  6685  001228  0E01               	movlw	1
  6686  00122A  0100               	movlb	0	; () banked
  6687  00122C  6F83               	movwf	_protVarSystemSynchronizedFlag& (0+255),b
  6688                           
  6689                           ;sfxProtocoll.c: 42: if(!protVarSystemSynchronizedFlag){
  6690  00122E  5183               	movf	_protVarSystemSynchronizedFlag& (0+255),w,b
  6691  001230  E101               	bnz	l3115
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;sfxProtocoll.c: 43: return(0);
  6695  001232  0C00               	retlw	0
  6696  001234                     l3115:
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;sfxProtocoll.c: 44: }
  6700                           ;sfxProtocoll.c: 46: if(protVarCommunicationTimer == 0){
  6701  001234  EC95  F007         	call	PL30	;call to abstracted procedure
  6702  001238  E106               	bnz	l3123
  6703                           
  6704                           ; BSR set to: 0
  6705                           ;sfxProtocoll.c: 47: protVarCommunicationTimer = 600 - (sysVarGpsDayTime % 600) ;
  6706  00123A  EC07  F007         	call	PL2	;call to abstracted procedure
  6707  00123E  EC00  F006         	call	___almod	;wreg free
  6708  001242  D802               	call	PL8	;call to abstracted procedure
  6709                           
  6710                           ; BSR set to: 0
  6711                           ;sfxProtocoll.c: 48: return(1);
  6712  001244  0C01               	retlw	1
  6713  001246                     l3123:
  6714                           
  6715                           ; BSR set to: 0
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;sfxProtocoll.c: 49: }
  6719                           ;sfxProtocoll.c: 50: return(0);
  6720  001246  0C00               	retlw	0	;funcret
  6721  001248                     __end_of_ProtocolSetNextCommTime:
  6722                           	opt stack 0
  6723  001248                     PL8:
  6724                           	opt stack 23
  6725  001248  51C9               	movf	?___almod& (0+255),w,b
  6726  00124A  0858               	sublw	88
  6727  00124C  6F60               	movwf	_protVarCommunicationTimer& (0+255),b
  6728  00124E  0E02               	movlw	2
  6729  001250  55CA               	subfwb	(?___almod+1)& (0+255),w,b
  6730  001252  6F61               	movwf	(_protVarCommunicationTimer+1)& (0+255),b
  6731  001254  0E00               	movlw	0
  6732  001256  55CB               	subfwb	(?___almod+2)& (0+255),w,b
  6733  001258  6F62               	movwf	(_protVarCommunicationTimer+2)& (0+255),b
  6734  00125A  0E00               	movlw	0
  6735  00125C  55CC               	subfwb	(?___almod+3)& (0+255),w,b
  6736  00125E  6F63               	movwf	(_protVarCommunicationTimer+3)& (0+255),b
  6737  001260  0012               	return	
  6738  001262                     __end_ofPL8:
  6739                           	opt stack 0
  6740                           tosu	equ	0xFFF
  6741                           tosh	equ	0xFFE
  6742                           tosl	equ	0xFFD
  6743                           pclath	equ	0xFFA
  6744                           tblptru	equ	0xFF8
  6745                           tblptrh	equ	0xFF7
  6746                           tblptrl	equ	0xFF6
  6747                           tablat	equ	0xFF5
  6748                           prodh	equ	0xFF4
  6749                           prodl	equ	0xFF3
  6750                           intcon	equ	0xFF2
  6751                           intcon2	equ	0xFF1
  6752                           postinc0	equ	0xFEE
  6753                           wreg	equ	0xFE8
  6754                           indf1	equ	0xFE7
  6755                           postdec1	equ	0xFE5
  6756                           fsr1h	equ	0xFE2
  6757                           fsr1l	equ	0xFE1
  6758                           indf2	equ	0xFDF
  6759                           postinc2	equ	0xFDE
  6760                           plusw2	equ	0xFDB
  6761                           fsr2h	equ	0xFDA
  6762                           fsr2l	equ	0xFD9
  6763                           status	equ	0xFD8
  6764                           
  6765 ;; *************** function ___almod *****************
  6766 ;; Defined at:
  6767 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\almod.c"
  6768 ;; Parameters:    Size  Location     Type
  6769 ;;  dividend        4    5[BANK0 ] long 
  6770 ;;  divisor         4    9[BANK0 ] long 
  6771 ;; Auto vars:     Size  Location     Type
  6772 ;;  sign            1   14[BANK0 ] unsigned char 
  6773 ;;  counter         1   13[BANK0 ] unsigned char 
  6774 ;; Return value:  Size  Location     Type
  6775 ;;                  4    5[BANK0 ] long 
  6776 ;; Registers used:
  6777 ;;		wreg, status,2, status,0
  6778 ;; Tracked objects:
  6779 ;;		On entry : 3F/0
  6780 ;;		On exit  : 3F/0
  6781 ;;		Unchanged: 0/0
  6782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6783 ;;      Params:         0       8       0       0       0       0       0
  6784 ;;      Locals:         0       2       0       0       0       0       0
  6785 ;;      Temps:          0       0       0       0       0       0       0
  6786 ;;      Totals:         0      10       0       0       0       0       0
  6787 ;;Total ram usage:       10 bytes
  6788 ;; Hardware stack levels used:    1
  6789 ;; Hardware stack levels required when called:    5
  6790 ;; This function calls:
  6791 ;;		Nothing
  6792 ;; This function is called by:
  6793 ;;		_ProtocolSetNextMeasTime
  6794 ;;		_ProtocolSetNextCommTime
  6795 ;; This function uses a non-reentrant model
  6796 ;;
  6797                           
  6798                           	psect	text42
  6799  000C00                     __ptext42:
  6800                           	opt stack 0
  6801  000C00                     ___almod:
  6802                           	opt stack 23
  6803                           
  6804                           ; BSR set to: 0
  6805                           ;incstack = 0
  6806  000C00  0100               	movlb	0	; () banked
  6807  000C02  6BD2               	clrf	___almod@sign& (0+255),b
  6808                           
  6809                           ; BSR set to: 0
  6810  000C04  AFCC               	btfss	(___almod@dividend+3)& (0+255),7,b
  6811  000C06  D003               	goto	l3049
  6812                           
  6813                           ; BSR set to: 0
  6814  000C08  D840               	call	PL47	;call to abstracted procedure
  6815                           
  6816                           ; BSR set to: 0
  6817  000C0A  0E01               	movlw	1
  6818  000C0C  6FD2               	movwf	___almod@sign& (0+255),b
  6819  000C0E                     l3049:
  6820                           
  6821                           ; BSR set to: 0
  6822  000C0E  AFD0               	btfss	(___almod@divisor+3)& (0+255),7,b
  6823  000C10  D008               	goto	l3053
  6824                           
  6825                           ; BSR set to: 0
  6826  000C12  1FD0               	comf	(___almod@divisor+3)& (0+255),f,b
  6827  000C14  1FCF               	comf	(___almod@divisor+2)& (0+255),f,b
  6828  000C16  1FCE               	comf	(___almod@divisor+1)& (0+255),f,b
  6829  000C18  6DCD               	negf	___almod@divisor& (0+255),b
  6830  000C1A  0E00               	movlw	0
  6831  000C1C  23CE               	addwfc	(___almod@divisor+1)& (0+255),f,b
  6832  000C1E  23CF               	addwfc	(___almod@divisor+2)& (0+255),f,b
  6833  000C20  23D0               	addwfc	(___almod@divisor+3)& (0+255),f,b
  6834  000C22                     l3053:
  6835                           
  6836                           ; BSR set to: 0
  6837  000C22  51CD               	movf	___almod@divisor& (0+255),w,b
  6838  000C24  11CE               	iorwf	(___almod@divisor+1)& (0+255),w,b
  6839  000C26  11CF               	iorwf	(___almod@divisor+2)& (0+255),w,b
  6840  000C28  11D0               	iorwf	(___almod@divisor+3)& (0+255),w,b
  6841  000C2A  E023               	bz	l3069
  6842                           
  6843                           ; BSR set to: 0
  6844  000C2C  0E01               	movlw	1
  6845  000C2E  6FD1               	movwf	___almod@counter& (0+255),b
  6846  000C30  D006               	goto	l3059
  6847  000C32                     l3057:
  6848                           
  6849                           ; BSR set to: 0
  6850  000C32  90D8               	bcf	status,0,c
  6851  000C34  37CD               	rlcf	___almod@divisor& (0+255),f,b
  6852  000C36  37CE               	rlcf	(___almod@divisor+1)& (0+255),f,b
  6853  000C38  37CF               	rlcf	(___almod@divisor+2)& (0+255),f,b
  6854  000C3A  37D0               	rlcf	(___almod@divisor+3)& (0+255),f,b
  6855  000C3C  2BD1               	incf	___almod@counter& (0+255),f,b
  6856  000C3E                     l3059:
  6857                           
  6858                           ; BSR set to: 0
  6859  000C3E  AFD0               	btfss	(___almod@divisor+3)& (0+255),7,b
  6860  000C40  D7F8               	goto	l3057
  6861  000C42                     l3061:
  6862                           
  6863                           ; BSR set to: 0
  6864  000C42  51CD               	movf	___almod@divisor& (0+255),w,b
  6865  000C44  5DC9               	subwf	___almod@dividend& (0+255),w,b
  6866  000C46  51CE               	movf	(___almod@divisor+1)& (0+255),w,b
  6867  000C48  59CA               	subwfb	(___almod@dividend+1)& (0+255),w,b
  6868  000C4A  51CF               	movf	(___almod@divisor+2)& (0+255),w,b
  6869  000C4C  59CB               	subwfb	(___almod@dividend+2)& (0+255),w,b
  6870  000C4E  51D0               	movf	(___almod@divisor+3)& (0+255),w,b
  6871  000C50  59CC               	subwfb	(___almod@dividend+3)& (0+255),w,b
  6872  000C52  E308               	bnc	l3065
  6873                           
  6874                           ; BSR set to: 0
  6875  000C54  51CD               	movf	___almod@divisor& (0+255),w,b
  6876  000C56  5FC9               	subwf	___almod@dividend& (0+255),f,b
  6877  000C58  51CE               	movf	(___almod@divisor+1)& (0+255),w,b
  6878  000C5A  5BCA               	subwfb	(___almod@dividend+1)& (0+255),f,b
  6879  000C5C  51CF               	movf	(___almod@divisor+2)& (0+255),w,b
  6880  000C5E  5BCB               	subwfb	(___almod@dividend+2)& (0+255),f,b
  6881  000C60  51D0               	movf	(___almod@divisor+3)& (0+255),w,b
  6882  000C62  5BCC               	subwfb	(___almod@dividend+3)& (0+255),f,b
  6883  000C64                     l3065:
  6884                           
  6885                           ; BSR set to: 0
  6886  000C64  90D8               	bcf	status,0,c
  6887  000C66  33D0               	rrcf	(___almod@divisor+3)& (0+255),f,b
  6888  000C68  33CF               	rrcf	(___almod@divisor+2)& (0+255),f,b
  6889  000C6A  33CE               	rrcf	(___almod@divisor+1)& (0+255),f,b
  6890  000C6C  33CD               	rrcf	___almod@divisor& (0+255),f,b
  6891                           
  6892                           ; BSR set to: 0
  6893  000C6E  2FD1               	decfsz	___almod@counter& (0+255),f,b
  6894  000C70  D7E8               	goto	l3061
  6895  000C72                     l3069:
  6896                           
  6897                           ; BSR set to: 0
  6898  000C72  51D2               	movf	___almod@sign& (0+255),w,b
  6899  000C74  E001               	bz	l3073
  6900                           
  6901                           ; BSR set to: 0
  6902  000C76  D809               	call	PL47	;call to abstracted procedure
  6903  000C78                     l3073:
  6904                           
  6905                           ; BSR set to: 0
  6906  000C78  C0C9  F0C9         	movff	___almod@dividend,?___almod
  6907  000C7C  C0CA  F0CA         	movff	___almod@dividend+1,?___almod+1
  6908  000C80  C0CB  F0CB         	movff	___almod@dividend+2,?___almod+2
  6909  000C84  C0CC  F0CC         	movff	___almod@dividend+3,?___almod+3
  6910                           
  6911                           ; BSR set to: 0
  6912  000C88  0012               	return		;funcret
  6913  000C8A                     __end_of___almod:
  6914                           	opt stack 0
  6915  000C8A                     PL47:
  6916                           	opt stack 23
  6917  000C8A  1FCC               	comf	(___almod@dividend+3)& (0+255),f,b
  6918  000C8C  1FCB               	comf	(___almod@dividend+2)& (0+255),f,b
  6919  000C8E  1FCA               	comf	(___almod@dividend+1)& (0+255),f,b
  6920  000C90  6DC9               	negf	___almod@dividend& (0+255),b
  6921  000C92  0E00               	movlw	0
  6922  000C94  23CA               	addwfc	(___almod@dividend+1)& (0+255),f,b
  6923  000C96  23CB               	addwfc	(___almod@dividend+2)& (0+255),f,b
  6924  000C98  23CC               	addwfc	(___almod@dividend+3)& (0+255),f,b
  6925  000C9A  0C00               	retlw	0
  6926  000C9C                     __end_ofPL47:
  6927                           	opt stack 0
  6928                           tosu	equ	0xFFF
  6929                           tosh	equ	0xFFE
  6930                           tosl	equ	0xFFD
  6931                           pclath	equ	0xFFA
  6932                           tblptru	equ	0xFF8
  6933                           tblptrh	equ	0xFF7
  6934                           tblptrl	equ	0xFF6
  6935                           tablat	equ	0xFF5
  6936                           prodh	equ	0xFF4
  6937                           prodl	equ	0xFF3
  6938                           intcon	equ	0xFF2
  6939                           intcon2	equ	0xFF1
  6940                           postinc0	equ	0xFEE
  6941                           wreg	equ	0xFE8
  6942                           indf1	equ	0xFE7
  6943                           postdec1	equ	0xFE5
  6944                           fsr1h	equ	0xFE2
  6945                           fsr1l	equ	0xFE1
  6946                           indf2	equ	0xFDF
  6947                           postinc2	equ	0xFDE
  6948                           plusw2	equ	0xFDB
  6949                           fsr2h	equ	0xFDA
  6950                           fsr2l	equ	0xFD9
  6951                           status	equ	0xFD8
  6952                           
  6953 ;; *************** function _INTERRUPT_InterruptManager *****************
  6954 ;; Defined at:
  6955 ;;		line 64 in file "mcc_generated_files/interrupt_manager.c"
  6956 ;; Parameters:    Size  Location     Type
  6957 ;;		None
  6958 ;; Auto vars:     Size  Location     Type
  6959 ;;		None
  6960 ;; Return value:  Size  Location     Type
  6961 ;;                  1    wreg      void 
  6962 ;; Registers used:
  6963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
  6964 ;; Tracked objects:
  6965 ;;		On entry : 0/0
  6966 ;;		On exit  : 0/0
  6967 ;;		Unchanged: 0/0
  6968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6969 ;;      Params:         0       0       0       0       0       0       0
  6970 ;;      Locals:         0       0       0       0       0       0       0
  6971 ;;      Temps:          0       4       0       0       0       0       0
  6972 ;;      Totals:         0       4       0       0       0       0       0
  6973 ;;Total ram usage:        4 bytes
  6974 ;; Hardware stack levels used:    1
  6975 ;; Hardware stack levels required when called:    4
  6976 ;; This function calls:
  6977 ;;		_EUSART2_GPRS_Transmit_ISR
  6978 ;;		_EUSART2_Receive_ISR
  6979 ;;		_EUSART2_Transmit_ISR
  6980 ;;		_TMR0_ISR
  6981 ;; This function is called by:
  6982 ;;		Interrupt level 2
  6983 ;; This function uses a non-reentrant model
  6984 ;;
  6985                           
  6986                           	psect	intcode
  6987  000008                     __pintcode:
  6988                           	opt stack 0
  6989  000008                     _INTERRUPT_InterruptManager:
  6990                           	opt stack 20
  6991                           
  6992                           ; BSR set to: 0
  6993                           ;incstack = 0
  6994  000008  8201               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6995  00000A  CFFA F0C5          	movff	pclath,??_INTERRUPT_InterruptManager
  6996  00000E  CFFB F0C6          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6997  000012  CFD9 F0C7          	movff	fsr2l,??_INTERRUPT_InterruptManager+2
  6998  000016  CFDA F0C8          	movff	fsr2h,??_INTERRUPT_InterruptManager+3
  6999                           
  7000                           ;interrupt_manager.c: 67: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  7001  00001A  BAF2               	btfsc	intcon,5,c	;volatile
  7002  00001C  A4F2               	btfss	intcon,2,c	;volatile
  7003  00001E  D003               	goto	i2l89
  7004                           
  7005                           ;interrupt_manager.c: 68: {
  7006                           ;interrupt_manager.c: 69: TMR0_ISR();
  7007  000020  ECEB  F009         	call	_TMR0_ISR	;wreg free
  7008                           
  7009                           ;interrupt_manager.c: 70: }
  7010  000024  D014               	goto	i2l97
  7011  000026                     i2l89:
  7012                           
  7013                           ;interrupt_manager.c: 73: else if(INTCONbits.PEIE == 1 && PIE3bits.TX2IE == 1 && PIR3bit
      +                          s.TX2IF == 1)
  7014  000026  BCF2               	btfsc	intcon,6,c	;volatile
  7015  000028  A8A3               	btfss	4003,4,c	;volatile
  7016  00002A  D00B               	goto	i2l91
  7017  00002C  A8A4               	btfss	4004,4,c	;volatile
  7018  00002E  D009               	goto	i2l91
  7019                           
  7020                           ;interrupt_manager.c: 74: {
  7021                           ;interrupt_manager.c: 75: if(usartSemaphore == SFX_OWNER){
  7022  000030  0100               	movlb	0	; () banked
  7023  000032  0592               	decf	_usartSemaphore& (0+255),w,b
  7024  000034  E103               	bnz	i2l3347
  7025                           
  7026                           ; BSR set to: 0
  7027                           ;interrupt_manager.c: 76: EUSART2_Transmit_ISR();
  7028  000036  ECD6  F009         	call	_EUSART2_Transmit_ISR	;wreg free
  7029                           
  7030                           ;interrupt_manager.c: 77: }
  7031  00003A  D009               	goto	i2l97
  7032  00003C                     i2l3347:
  7033                           
  7034                           ; BSR set to: 0
  7035                           ;interrupt_manager.c: 78: else{
  7036                           ;interrupt_manager.c: 79: EUSART2_GPRS_Transmit_ISR();
  7037  00003C  ECAF  F00A         	call	_EUSART2_GPRS_Transmit_ISR	;wreg free
  7038  000040  D006               	goto	i2l97
  7039  000042                     i2l91:
  7040                           
  7041                           ;interrupt_manager.c: 83: else if(INTCONbits.PEIE == 1 && PIE3bits.RC2IE == 1 && PIR3bit
      +                          s.RC2IF == 1)
  7042  000042  BCF2               	btfsc	intcon,6,c	;volatile
  7043  000044  AAA3               	btfss	4003,5,c	;volatile
  7044  000046  D003               	goto	i2l97
  7045  000048  BAA4               	btfsc	4004,5,c	;volatile
  7046                           
  7047                           ;interrupt_manager.c: 84: {
  7048                           ;interrupt_manager.c: 85: EUSART2_Receive_ISR();
  7049  00004A  EC50  F008         	call	_EUSART2_Receive_ISR	;wreg free
  7050  00004E                     i2l97:
  7051  00004E  C0C8  FFDA         	movff	??_INTERRUPT_InterruptManager+3,fsr2h
  7052  000052  C0C7  FFD9         	movff	??_INTERRUPT_InterruptManager+2,fsr2l
  7053  000056  C0C6  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7054  00005A  C0C5  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7055  00005E  9201               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7056  000060  0011               	retfie		f
  7057  000062                     __end_of_INTERRUPT_InterruptManager:
  7058                           	opt stack 0
  7059                           tosu	equ	0xFFF
  7060                           tosh	equ	0xFFE
  7061                           tosl	equ	0xFFD
  7062                           pclatu	equ	0xFFB
  7063                           pclath	equ	0xFFA
  7064                           tblptru	equ	0xFF8
  7065                           tblptrh	equ	0xFF7
  7066                           tblptrl	equ	0xFF6
  7067                           tablat	equ	0xFF5
  7068                           prodh	equ	0xFF4
  7069                           prodl	equ	0xFF3
  7070                           intcon	equ	0xFF2
  7071                           intcon2	equ	0xFF1
  7072                           postinc0	equ	0xFEE
  7073                           wreg	equ	0xFE8
  7074                           indf1	equ	0xFE7
  7075                           postdec1	equ	0xFE5
  7076                           fsr1h	equ	0xFE2
  7077                           fsr1l	equ	0xFE1
  7078                           indf2	equ	0xFDF
  7079                           postinc2	equ	0xFDE
  7080                           plusw2	equ	0xFDB
  7081                           fsr2h	equ	0xFDA
  7082                           fsr2l	equ	0xFD9
  7083                           status	equ	0xFD8
  7084                           
  7085 ;; *************** function _TMR0_ISR *****************
  7086 ;; Defined at:
  7087 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  7088 ;; Parameters:    Size  Location     Type
  7089 ;;		None
  7090 ;; Auto vars:     Size  Location     Type
  7091 ;;		None
  7092 ;; Return value:  Size  Location     Type
  7093 ;;                  1    wreg      void 
  7094 ;; Registers used:
  7095 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7101 ;;      Params:         0       0       0       0       0       0       0
  7102 ;;      Locals:         0       0       0       0       0       0       0
  7103 ;;      Temps:          0       0       0       0       0       0       0
  7104 ;;      Totals:         0       0       0       0       0       0       0
  7105 ;;Total ram usage:        0 bytes
  7106 ;; Hardware stack levels used:    1
  7107 ;; Hardware stack levels required when called:    3
  7108 ;; This function calls:
  7109 ;;		Absolute function
  7110 ;;		_systemMainTimer
  7111 ;; This function is called by:
  7112 ;;		_INTERRUPT_InterruptManager
  7113 ;; This function uses a non-reentrant model
  7114 ;;
  7115                           
  7116                           	psect	text44
  7117  0013D6                     __ptext44:
  7118                           	opt stack 0
  7119  0013D6                     _TMR0_ISR:
  7120                           	opt stack 20
  7121                           
  7122                           ;tmr0.c: 105: INTCONbits.TMR0IF = 0;
  7123                           
  7124                           ;incstack = 0
  7125  0013D6  94F2               	bcf	intcon,2,c	;volatile
  7126                           
  7127                           ;tmr0.c: 109: TMR0H = timer0ReloadVal >> 8;
  7128  0013D8  C0EC  FFD7         	movff	_timer0ReloadVal+1,4055	;volatile
  7129                           
  7130                           ;tmr0.c: 110: TMR0L = (uint8_t) timer0ReloadVal;
  7131  0013DC  C0EB  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  7132                           
  7133                           ;tmr0.c: 112: if(TMR0_InterruptHandler)
  7134  0013E0  0100               	movlb	0	; () banked
  7135  0013E2  51ED               	movf	_TMR0_InterruptHandler& (0+255),w,b
  7136  0013E4  11EE               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  7137  0013E6  B4D8               	btfsc	status,2,c
  7138  0013E8  0012               	return	
  7139                           
  7140                           ; BSR set to: 0
  7141                           ;tmr0.c: 113: {
  7142                           ;tmr0.c: 114: TMR0_InterruptHandler();
  7143  0013EA  0005               	push	
  7144  0013EC  6EFA               	movwf	pclath,c
  7145  0013EE  51ED               	movf	_TMR0_InterruptHandler& (0+255),w,b
  7146  0013F0  6EFD               	movwf	tosl,c
  7147  0013F2  51EE               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  7148  0013F4  6EFE               	movwf	tosh,c
  7149  0013F6  6AFF               	clrf	tosu,c
  7150  0013F8  50FA               	movf	pclath,w,c
  7151  0013FA  0012               	return		;indir
  7152  0013FC                     __end_of_TMR0_ISR:
  7153                           	opt stack 0
  7154                           tosu	equ	0xFFF
  7155                           tosh	equ	0xFFE
  7156                           tosl	equ	0xFFD
  7157                           pclatu	equ	0xFFB
  7158                           pclath	equ	0xFFA
  7159                           tblptru	equ	0xFF8
  7160                           tblptrh	equ	0xFF7
  7161                           tblptrl	equ	0xFF6
  7162                           tablat	equ	0xFF5
  7163                           prodh	equ	0xFF4
  7164                           prodl	equ	0xFF3
  7165                           intcon	equ	0xFF2
  7166                           intcon2	equ	0xFF1
  7167                           postinc0	equ	0xFEE
  7168                           wreg	equ	0xFE8
  7169                           indf1	equ	0xFE7
  7170                           postdec1	equ	0xFE5
  7171                           fsr1h	equ	0xFE2
  7172                           fsr1l	equ	0xFE1
  7173                           indf2	equ	0xFDF
  7174                           postinc2	equ	0xFDE
  7175                           plusw2	equ	0xFDB
  7176                           fsr2h	equ	0xFDA
  7177                           fsr2l	equ	0xFD9
  7178                           status	equ	0xFD8
  7179                           
  7180 ;; *************** function _systemMainTimer *****************
  7181 ;; Defined at:
  7182 ;;		line 22 in file "main.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;		None
  7185 ;; Auto vars:     Size  Location     Type
  7186 ;;  secondMultip    1    0[BANK0 ] unsigned char 
  7187 ;; Return value:  Size  Location     Type
  7188 ;;                  1    wreg      void 
  7189 ;; Registers used:
  7190 ;;		wreg, status,2, status,0, cstack
  7191 ;; Tracked objects:
  7192 ;;		On entry : 3F/0
  7193 ;;		On exit  : 3F/0
  7194 ;;		Unchanged: 0/0
  7195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7196 ;;      Params:         0       0       0       0       0       0       0
  7197 ;;      Locals:         0       1       0       0       0       0       0
  7198 ;;      Temps:          0       0       0       0       0       0       0
  7199 ;;      Totals:         0       1       0       0       0       0       0
  7200 ;;Total ram usage:        1 bytes
  7201 ;; Hardware stack levels used:    1
  7202 ;; Hardware stack levels required when called:    2
  7203 ;; This function calls:
  7204 ;;		_ProtocolTaskTick
  7205 ;; This function is called by:
  7206 ;;		_main
  7207 ;;		_TMR0_ISR
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           	psect	text45
  7212  001296                     __ptext45:
  7213                           	opt stack 0
  7214  001296                     _systemMainTimer:
  7215                           	opt stack 20
  7216                           
  7217                           ;main.c: 23: bool secondMultiplier;
  7218                           ;main.c: 24: ProtocolTaskTick();
  7219                           
  7220                           ;incstack = 0
  7221  001296  EC62  F007         	call	_ProtocolTaskTick	;wreg free
  7222                           
  7223                           ; BSR set to: 0
  7224                           ;main.c: 25: if(secondMultiplier){
  7225  00129A  51C4               	movf	systemMainTimer@secondMultiplier& (0+255),w,b
  7226  00129C  E006               	bz	i2l2297
  7227                           
  7228                           ; BSR set to: 0
  7229                           ;main.c: 26: if(sessionTO){
  7230  00129E  5176               	movf	_sessionTO& (0+255),w,b
  7231  0012A0  1177               	iorwf	(_sessionTO+1)& (0+255),w,b
  7232  0012A2  E003               	bz	i2l2297
  7233                           
  7234                           ; BSR set to: 0
  7235                           ;main.c: 27: sessionTO--;
  7236  0012A4  0776               	decf	_sessionTO& (0+255),f,b
  7237  0012A6  A0D8               	btfss	status,0,c
  7238  0012A8  0777               	decf	(_sessionTO+1)& (0+255),f,b
  7239  0012AA                     i2l2297:
  7240                           
  7241                           ; BSR set to: 0
  7242                           ;main.c: 28: }
  7243                           ;main.c: 29: }
  7244                           ;main.c: 30: secondMultiplier = !secondMultiplier;
  7245  0012AA  51C4               	movf	systemMainTimer@secondMultiplier& (0+255),w,b
  7246  0012AC  0E01               	movlw	1
  7247  0012AE  A4D8               	btfss	status,2,c
  7248  0012B0  0E00               	movlw	0
  7249  0012B2  6FC4               	movwf	systemMainTimer@secondMultiplier& (0+255),b
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;main.c: 32: if(PORTAbits.RA2 == 0){
  7253  0012B4  B480               	btfsc	3968,2,c	;volatile
  7254  0012B6  D004               	goto	i2l2301
  7255                           
  7256                           ; BSR set to: 0
  7257                           
  7258                           ;main.c: 33: do { LATAbits.LATA2 = 1; } while(0);
  7259  0012B8  8489               	bsf	3977,2,c	;volatile
  7260                           
  7261                           ; BSR set to: 0
  7262                           ;main.c: 34: ledTimer = statusIndTimer;
  7263  0012BA  C085  F084         	movff	_statusIndTimer,_ledTimer
  7264                           
  7265                           ;main.c: 35: }
  7266  0012BE  0012               	return	
  7267  0012C0                     i2l2301:
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;main.c: 36: else{
  7271                           ;main.c: 37: ledTimer--;
  7272  0012C0  0784               	decf	_ledTimer& (0+255),f,b
  7273                           
  7274                           ; BSR set to: 0
  7275                           ;main.c: 38: if(ledTimer == 0){
  7276  0012C2  5184               	movf	_ledTimer& (0+255),w,b
  7277  0012C4  B4D8               	btfsc	status,2,c
  7278                           
  7279                           ; BSR set to: 0
  7280                           
  7281                           ;main.c: 39: do { LATAbits.LATA2 = 0; } while(0);
  7282  0012C6  9489               	bcf	3977,2,c	;volatile
  7283                           
  7284                           ; BSR set to: 0
  7285  0012C8  0012               	return		;funcret
  7286  0012CA                     __end_of_systemMainTimer:
  7287                           	opt stack 0
  7288                           tosu	equ	0xFFF
  7289                           tosh	equ	0xFFE
  7290                           tosl	equ	0xFFD
  7291                           pclatu	equ	0xFFB
  7292                           pclath	equ	0xFFA
  7293                           tblptru	equ	0xFF8
  7294                           tblptrh	equ	0xFF7
  7295                           tblptrl	equ	0xFF6
  7296                           tablat	equ	0xFF5
  7297                           prodh	equ	0xFF4
  7298                           prodl	equ	0xFF3
  7299                           intcon	equ	0xFF2
  7300                           intcon2	equ	0xFF1
  7301                           postinc0	equ	0xFEE
  7302                           wreg	equ	0xFE8
  7303                           indf1	equ	0xFE7
  7304                           postdec1	equ	0xFE5
  7305                           fsr1h	equ	0xFE2
  7306                           fsr1l	equ	0xFE1
  7307                           indf2	equ	0xFDF
  7308                           postinc2	equ	0xFDE
  7309                           plusw2	equ	0xFDB
  7310                           fsr2h	equ	0xFDA
  7311                           fsr2l	equ	0xFD9
  7312                           status	equ	0xFD8
  7313                           
  7314 ;; *************** function _ProtocolTaskTick *****************
  7315 ;; Defined at:
  7316 ;;		line 186 in file "sfxProtocoll.c"
  7317 ;; Parameters:    Size  Location     Type
  7318 ;;		None
  7319 ;; Auto vars:     Size  Location     Type
  7320 ;;		None
  7321 ;; Return value:  Size  Location     Type
  7322 ;;                  1    wreg      void 
  7323 ;; Registers used:
  7324 ;;		wreg, status,2, status,0, cstack
  7325 ;; Tracked objects:
  7326 ;;		On entry : 0/0
  7327 ;;		On exit  : 3F/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7330 ;;      Params:         0       0       0       0       0       0       0
  7331 ;;      Locals:         0       0       0       0       0       0       0
  7332 ;;      Temps:          0       0       0       0       0       0       0
  7333 ;;      Totals:         0       0       0       0       0       0       0
  7334 ;;Total ram usage:        0 bytes
  7335 ;; Hardware stack levels used:    1
  7336 ;; Hardware stack levels required when called:    1
  7337 ;; This function calls:
  7338 ;;		_SigfoxTaskTick
  7339 ;;		_powerTaskTick
  7340 ;; This function is called by:
  7341 ;;		_systemMainTimer
  7342 ;; This function uses a non-reentrant model
  7343 ;;
  7344                           
  7345                           	psect	text46
  7346  000EC4                     __ptext46:
  7347                           	opt stack 0
  7348  000EC4                     _ProtocolTaskTick:
  7349                           	opt stack 20
  7350                           
  7351                           ;sfxProtocoll.c: 187: static bool _500msToSecond;
  7352                           ;sfxProtocoll.c: 189: _500msToSecond = !_500msToSecond;
  7353                           
  7354                           ; BSR set to: 0
  7355                           ;incstack = 0
  7356  000EC4  0100               	movlb	0	; () banked
  7357  000EC6  5181               	movf	ProtocolTaskTick@_500msToSecond& (0+255),w,b
  7358  000EC8  0E01               	movlw	1
  7359  000ECA  A4D8               	btfss	status,2,c
  7360  000ECC  0E00               	movlw	0
  7361  000ECE  6F81               	movwf	ProtocolTaskTick@_500msToSecond& (0+255),b
  7362                           
  7363                           ;sfxProtocoll.c: 190: if(_500msToSecond){
  7364  000ED0  5181               	movf	ProtocolTaskTick@_500msToSecond& (0+255),w,b
  7365  000ED2  B4D8               	btfsc	status,2,c
  7366  000ED4  0012               	return	
  7367                           
  7368                           ; BSR set to: 0
  7369                           ;sfxProtocoll.c: 191: sysVarGpsDayTime++;
  7370  000ED6  2B68               	incf	_sysVarGpsDayTime& (0+255),f,b
  7371  000ED8  0E00               	movlw	0
  7372  000EDA  2369               	addwfc	(_sysVarGpsDayTime+1)& (0+255),f,b
  7373  000EDC  236A               	addwfc	(_sysVarGpsDayTime+2)& (0+255),f,b
  7374  000EDE  236B               	addwfc	(_sysVarGpsDayTime+3)& (0+255),f,b
  7375                           
  7376                           ;sfxProtocoll.c: 192: if(sysVarGpsDayTime >= 86400){
  7377  000EE0  BF6B               	btfsc	(_sysVarGpsDayTime+3)& (0+255),7,b
  7378  000EE2  D011               	goto	i2l723
  7379  000EE4  516B               	movf	(_sysVarGpsDayTime+3)& (0+255),w,b
  7380  000EE6  E107               	bnz	i2u53_40
  7381  000EE8  0E80               	movlw	128
  7382  000EEA  5D68               	subwf	_sysVarGpsDayTime& (0+255),w,b
  7383  000EEC  0E51               	movlw	81
  7384  000EEE  5969               	subwfb	(_sysVarGpsDayTime+1)& (0+255),w,b
  7385  000EF0  0E01               	movlw	1
  7386  000EF2  596A               	subwfb	(_sysVarGpsDayTime+2)& (0+255),w,b
  7387  000EF4  E308               	bnc	i2l723
  7388  000EF6                     i2u53_40:
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;sfxProtocoll.c: 193: sysVarGpsDayTime -= 86400;
  7392  000EF6  0E80               	movlw	128
  7393  000EF8  2768               	addwf	_sysVarGpsDayTime& (0+255),f,b
  7394  000EFA  0EAE               	movlw	174
  7395  000EFC  2369               	addwfc	(_sysVarGpsDayTime+1)& (0+255),f,b
  7396  000EFE  0EFE               	movlw	254
  7397  000F00  236A               	addwfc	(_sysVarGpsDayTime+2)& (0+255),f,b
  7398  000F02  0EFF               	movlw	255
  7399  000F04  236B               	addwfc	(_sysVarGpsDayTime+3)& (0+255),f,b
  7400  000F06                     i2l723:
  7401                           
  7402                           ; BSR set to: 0
  7403                           ;sfxProtocoll.c: 194: }
  7404                           ;sfxProtocoll.c: 195: if(protVarMeasurementTimer){
  7405  000F06  D816               	call	PL34	;call to abstracted procedure
  7406  000F08  E005               	bz	i2l724
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;sfxProtocoll.c: 196: protVarMeasurementTimer--;
  7410  000F0A  0764               	decf	_protVarMeasurementTimer& (0+255),f,b
  7411  000F0C  0E00               	movlw	0
  7412  000F0E  5B65               	subwfb	(_protVarMeasurementTimer+1)& (0+255),f,b
  7413  000F10  5B66               	subwfb	(_protVarMeasurementTimer+2)& (0+255),f,b
  7414  000F12  5B67               	subwfb	(_protVarMeasurementTimer+3)& (0+255),f,b
  7415  000F14                     i2l724:
  7416                           
  7417                           ; BSR set to: 0
  7418                           ;sfxProtocoll.c: 197: }
  7419                           ;sfxProtocoll.c: 198: if(protVarCommunicationTimer){
  7420  000F14  D80A               	call	PL30	;call to abstracted procedure
  7421  000F16  E005               	bz	i2l2031
  7422                           
  7423                           ; BSR set to: 0
  7424                           ;sfxProtocoll.c: 199: protVarCommunicationTimer--;
  7425  000F18  0760               	decf	_protVarCommunicationTimer& (0+255),f,b
  7426  000F1A  0E00               	movlw	0
  7427  000F1C  5B61               	subwfb	(_protVarCommunicationTimer+1)& (0+255),f,b
  7428  000F1E  5B62               	subwfb	(_protVarCommunicationTimer+2)& (0+255),f,b
  7429  000F20  5B63               	subwfb	(_protVarCommunicationTimer+3)& (0+255),f,b
  7430  000F22                     i2l2031:
  7431                           
  7432                           ; BSR set to: 0
  7433                           ;sfxProtocoll.c: 200: }
  7434                           ;sfxProtocoll.c: 202: powerTaskTick();
  7435  000F22  EC6A  F00A         	call	_powerTaskTick	;wreg free
  7436                           
  7437                           ; BSR set to: 0
  7438                           ;sfxProtocoll.c: 208: SigfoxTaskTick();
  7439  000F26  EF73  F00A         	goto	_SigfoxTaskTick	;wreg free
  7440  000F2A                     __end_of_ProtocolTaskTick:
  7441                           	opt stack 0
  7442  000F2A                     PL30:
  7443                           	opt stack 23
  7444  000F2A  5160               	movf	_protVarCommunicationTimer& (0+255),w,b
  7445  000F2C  1161               	iorwf	(_protVarCommunicationTimer+1)& (0+255),w,b
  7446  000F2E  1162               	iorwf	(_protVarCommunicationTimer+2)& (0+255),w,b
  7447  000F30  1163               	iorwf	(_protVarCommunicationTimer+3)& (0+255),w,b
  7448  000F32  0012               	return	
  7449  000F34                     __end_ofPL30:
  7450                           	opt stack 0
  7451  000F34                     PL34:
  7452                           	opt stack 23
  7453  000F34  5164               	movf	_protVarMeasurementTimer& (0+255),w,b
  7454  000F36  1165               	iorwf	(_protVarMeasurementTimer+1)& (0+255),w,b
  7455  000F38  1166               	iorwf	(_protVarMeasurementTimer+2)& (0+255),w,b
  7456  000F3A  1167               	iorwf	(_protVarMeasurementTimer+3)& (0+255),w,b
  7457  000F3C  0012               	return	
  7458  000F3E                     __end_ofPL34:
  7459                           	opt stack 0
  7460                           tosu	equ	0xFFF
  7461                           tosh	equ	0xFFE
  7462                           tosl	equ	0xFFD
  7463                           pclatu	equ	0xFFB
  7464                           pclath	equ	0xFFA
  7465                           tblptru	equ	0xFF8
  7466                           tblptrh	equ	0xFF7
  7467                           tblptrl	equ	0xFF6
  7468                           tablat	equ	0xFF5
  7469                           prodh	equ	0xFF4
  7470                           prodl	equ	0xFF3
  7471                           intcon	equ	0xFF2
  7472                           intcon2	equ	0xFF1
  7473                           postinc0	equ	0xFEE
  7474                           wreg	equ	0xFE8
  7475                           indf1	equ	0xFE7
  7476                           postdec1	equ	0xFE5
  7477                           fsr1h	equ	0xFE2
  7478                           fsr1l	equ	0xFE1
  7479                           indf2	equ	0xFDF
  7480                           postinc2	equ	0xFDE
  7481                           plusw2	equ	0xFDB
  7482                           fsr2h	equ	0xFDA
  7483                           fsr2l	equ	0xFD9
  7484                           status	equ	0xFD8
  7485                           
  7486 ;; *************** function _powerTaskTick *****************
  7487 ;; Defined at:
  7488 ;;		line 38 in file "powerTask.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;		None
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;		None
  7493 ;; Return value:  Size  Location     Type
  7494 ;;                  1    wreg      void 
  7495 ;; Registers used:
  7496 ;;		wreg, status,2, status,0
  7497 ;; Tracked objects:
  7498 ;;		On entry : 3F/0
  7499 ;;		On exit  : 3F/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7502 ;;      Params:         0       0       0       0       0       0       0
  7503 ;;      Locals:         0       0       0       0       0       0       0
  7504 ;;      Temps:          0       0       0       0       0       0       0
  7505 ;;      Totals:         0       0       0       0       0       0       0
  7506 ;;Total ram usage:        0 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; This function calls:
  7509 ;;		Nothing
  7510 ;; This function is called by:
  7511 ;;		_ProtocolTaskTick
  7512 ;; This function uses a non-reentrant model
  7513 ;;
  7514                           
  7515                           	psect	text47
  7516  0014D4                     __ptext47:
  7517                           	opt stack 0
  7518  0014D4                     _powerTaskTick:
  7519                           	opt stack 20
  7520                           
  7521                           ;powerTask.c: 39: if(powerTaskPwrReadyTimer){
  7522                           
  7523                           ; BSR set to: 0
  7524                           ;incstack = 0
  7525  0014D4  0100               	movlb	0	; () banked
  7526  0014D6  5174               	movf	_powerTaskPwrReadyTimer& (0+255),w,b
  7527  0014D8  1175               	iorwf	(_powerTaskPwrReadyTimer+1)& (0+255),w,b
  7528  0014DA  B4D8               	btfsc	status,2,c
  7529  0014DC  0012               	return	
  7530                           
  7531                           ; BSR set to: 0
  7532                           ;powerTask.c: 40: powerTaskPwrReadyTimer--;
  7533  0014DE  0774               	decf	_powerTaskPwrReadyTimer& (0+255),f,b
  7534  0014E0  A0D8               	btfss	status,0,c
  7535  0014E2  0775               	decf	(_powerTaskPwrReadyTimer+1)& (0+255),f,b
  7536                           
  7537                           ; BSR set to: 0
  7538  0014E4  0012               	return		;funcret
  7539  0014E6                     __end_of_powerTaskTick:
  7540                           	opt stack 0
  7541                           tosu	equ	0xFFF
  7542                           tosh	equ	0xFFE
  7543                           tosl	equ	0xFFD
  7544                           pclatu	equ	0xFFB
  7545                           pclath	equ	0xFFA
  7546                           tblptru	equ	0xFF8
  7547                           tblptrh	equ	0xFF7
  7548                           tblptrl	equ	0xFF6
  7549                           tablat	equ	0xFF5
  7550                           prodh	equ	0xFF4
  7551                           prodl	equ	0xFF3
  7552                           intcon	equ	0xFF2
  7553                           intcon2	equ	0xFF1
  7554                           postinc0	equ	0xFEE
  7555                           wreg	equ	0xFE8
  7556                           indf1	equ	0xFE7
  7557                           postdec1	equ	0xFE5
  7558                           fsr1h	equ	0xFE2
  7559                           fsr1l	equ	0xFE1
  7560                           indf2	equ	0xFDF
  7561                           postinc2	equ	0xFDE
  7562                           plusw2	equ	0xFDB
  7563                           fsr2h	equ	0xFDA
  7564                           fsr2l	equ	0xFD9
  7565                           status	equ	0xFD8
  7566                           
  7567 ;; *************** function _SigfoxTaskTick *****************
  7568 ;; Defined at:
  7569 ;;		line 282 in file "mcc_generated_files/eusart2.c"
  7570 ;; Parameters:    Size  Location     Type
  7571 ;;		None
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;		None
  7574 ;; Return value:  Size  Location     Type
  7575 ;;                  1    wreg      void 
  7576 ;; Registers used:
  7577 ;;		wreg, status,2, status,0
  7578 ;; Tracked objects:
  7579 ;;		On entry : 3F/0
  7580 ;;		On exit  : 3F/0
  7581 ;;		Unchanged: 0/0
  7582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7583 ;;      Params:         0       0       0       0       0       0       0
  7584 ;;      Locals:         0       0       0       0       0       0       0
  7585 ;;      Temps:          0       0       0       0       0       0       0
  7586 ;;      Totals:         0       0       0       0       0       0       0
  7587 ;;Total ram usage:        0 bytes
  7588 ;; Hardware stack levels used:    1
  7589 ;; This function calls:
  7590 ;;		Nothing
  7591 ;; This function is called by:
  7592 ;;		_ProtocolTaskTick
  7593 ;; This function uses a non-reentrant model
  7594 ;;
  7595                           
  7596                           	psect	text48
  7597  0014E6                     __ptext48:
  7598                           	opt stack 0
  7599  0014E6                     _SigfoxTaskTick:
  7600                           	opt stack 20
  7601                           
  7602                           ;eusart2.c: 283: if(SigfoxTimeOutTimer){
  7603                           
  7604                           ; BSR set to: 0
  7605                           ;incstack = 0
  7606  0014E6  0100               	movlb	0	; () banked
  7607  0014E8  5187               	movf	_SigfoxTimeOutTimer& (0+255),w,b
  7608  0014EA  E001               	bz	i2l1781
  7609                           
  7610                           ; BSR set to: 0
  7611                           ;eusart2.c: 284: SigfoxTimeOutTimer--;
  7612  0014EC  0787               	decf	_SigfoxTimeOutTimer& (0+255),f,b
  7613  0014EE                     i2l1781:
  7614                           
  7615                           ; BSR set to: 0
  7616                           ;eusart2.c: 285: }
  7617                           ;eusart2.c: 286: if(SigfoxTxDelay){
  7618  0014EE  5186               	movf	_SigfoxTxDelay& (0+255),w,b
  7619  0014F0  A4D8               	btfss	status,2,c
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;eusart2.c: 287: SigfoxTxDelay--;
  7623  0014F2  0786               	decf	_SigfoxTxDelay& (0+255),f,b
  7624                           
  7625                           ; BSR set to: 0
  7626  0014F4  0012               	return		;funcret
  7627  0014F6                     __end_of_SigfoxTaskTick:
  7628                           	opt stack 0
  7629                           tosu	equ	0xFFF
  7630                           tosh	equ	0xFFE
  7631                           tosl	equ	0xFFD
  7632                           pclatu	equ	0xFFB
  7633                           pclath	equ	0xFFA
  7634                           tblptru	equ	0xFF8
  7635                           tblptrh	equ	0xFF7
  7636                           tblptrl	equ	0xFF6
  7637                           tablat	equ	0xFF5
  7638                           prodh	equ	0xFF4
  7639                           prodl	equ	0xFF3
  7640                           intcon	equ	0xFF2
  7641                           intcon2	equ	0xFF1
  7642                           postinc0	equ	0xFEE
  7643                           wreg	equ	0xFE8
  7644                           indf1	equ	0xFE7
  7645                           postdec1	equ	0xFE5
  7646                           fsr1h	equ	0xFE2
  7647                           fsr1l	equ	0xFE1
  7648                           indf2	equ	0xFDF
  7649                           postinc2	equ	0xFDE
  7650                           plusw2	equ	0xFDB
  7651                           fsr2h	equ	0xFDA
  7652                           fsr2l	equ	0xFD9
  7653                           status	equ	0xFD8
  7654                           
  7655 ;; *************** function _EUSART2_Transmit_ISR *****************
  7656 ;; Defined at:
  7657 ;;		line 98 in file "mcc_generated_files/eusart2.c"
  7658 ;; Parameters:    Size  Location     Type
  7659 ;;		None
  7660 ;; Auto vars:     Size  Location     Type
  7661 ;;		None
  7662 ;; Return value:  Size  Location     Type
  7663 ;;                  1    wreg      void 
  7664 ;; Registers used:
  7665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7666 ;; Tracked objects:
  7667 ;;		On entry : 3F/0
  7668 ;;		On exit  : 3F/0
  7669 ;;		Unchanged: 0/0
  7670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7671 ;;      Params:         0       0       0       0       0       0       0
  7672 ;;      Locals:         0       0       0       0       0       0       0
  7673 ;;      Temps:          0       0       0       0       0       0       0
  7674 ;;      Totals:         0       0       0       0       0       0       0
  7675 ;;Total ram usage:        0 bytes
  7676 ;; Hardware stack levels used:    1
  7677 ;; Hardware stack levels required when called:    1
  7678 ;; This function calls:
  7679 ;;		_SigfoxReceive
  7680 ;; This function is called by:
  7681 ;;		_INTERRUPT_InterruptManager
  7682 ;; This function uses a non-reentrant model
  7683 ;;
  7684                           
  7685                           	psect	text49
  7686  0013AC                     __ptext49:
  7687                           	opt stack 0
  7688  0013AC                     _EUSART2_Transmit_ISR:
  7689                           	opt stack 22
  7690                           
  7691                           ;eusart2.c: 99: if(SigfoxTXBuffer[SigfoxTXBufferPtr] == 0)
  7692                           
  7693                           ; BSR set to: 0
  7694                           ;incstack = 0
  7695  0013AC  0E95               	movlw	low _SigfoxTXBuffer
  7696  0013AE  0100               	movlb	0	; () banked
  7697  0013B0  D80B               	call	PL22	;call to abstracted procedure
  7698  0013B2  E104               	bnz	i2l3225
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;eusart2.c: 100: {
  7702                           ;eusart2.c: 101: PIE3bits.TX2IE = 0;
  7703  0013B4  98A3               	bcf	4003,4,c	;volatile
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;eusart2.c: 102: SigfoxReceive();
  7707  0013B6  EC60  F00A         	call	_SigfoxReceive	;wreg free
  7708                           
  7709                           ;eusart2.c: 103: }
  7710  0013BA  D004               	goto	i2l3229
  7711  0013BC                     i2l3225:
  7712                           
  7713                           ; BSR set to: 0
  7714                           ;eusart2.c: 104: else
  7715                           ;eusart2.c: 105: {
  7716                           ;eusart2.c: 106: TXREG2 = SigfoxTXBuffer[SigfoxTXBufferPtr];
  7717  0013BC  0E95               	movlw	low _SigfoxTXBuffer
  7718  0013BE  D804               	call	PL22	;call to abstracted procedure
  7719  0013C0  6E73               	movwf	3955,c	;volatile
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;eusart2.c: 107: SigfoxTXBufferPtr++;
  7723  0013C2  2B89               	incf	_SigfoxTXBufferPtr& (0+255),f,b
  7724  0013C4                     i2l3229:
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;eusart2.c: 108: }
  7728                           ;eusart2.c: 109: PIR3bits.TX2IF = 0;
  7729  0013C4  98A4               	bcf	4004,4,c	;volatile
  7730                           
  7731                           ; BSR set to: 0
  7732  0013C6  0012               	return		;funcret
  7733  0013C8                     __end_of_EUSART2_Transmit_ISR:
  7734                           	opt stack 0
  7735  0013C8                     PL22:
  7736                           	opt stack 22
  7737  0013C8  2589               	addwf	_SigfoxTXBufferPtr& (0+255),w,b
  7738  0013CA  6ED9               	movwf	fsr2l,c
  7739  0013CC  6ADA               	clrf	fsr2h,c
  7740  0013CE  0E00               	movlw	high _SigfoxTXBuffer
  7741  0013D0  22DA               	addwfc	fsr2h,f,c
  7742  0013D2  50DF               	movf	indf2,w,c
  7743  0013D4  0012               	return	
  7744  0013D6                     __end_ofPL22:
  7745                           	opt stack 0
  7746                           tosu	equ	0xFFF
  7747                           tosh	equ	0xFFE
  7748                           tosl	equ	0xFFD
  7749                           pclatu	equ	0xFFB
  7750                           pclath	equ	0xFFA
  7751                           tblptru	equ	0xFF8
  7752                           tblptrh	equ	0xFF7
  7753                           tblptrl	equ	0xFF6
  7754                           tablat	equ	0xFF5
  7755                           prodh	equ	0xFF4
  7756                           prodl	equ	0xFF3
  7757                           intcon	equ	0xFF2
  7758                           intcon2	equ	0xFF1
  7759                           postinc0	equ	0xFEE
  7760                           wreg	equ	0xFE8
  7761                           indf1	equ	0xFE7
  7762                           postdec1	equ	0xFE5
  7763                           fsr1h	equ	0xFE2
  7764                           fsr1l	equ	0xFE1
  7765                           indf2	equ	0xFDF
  7766                           postinc2	equ	0xFDE
  7767                           plusw2	equ	0xFDB
  7768                           fsr2h	equ	0xFDA
  7769                           fsr2l	equ	0xFD9
  7770                           status	equ	0xFD8
  7771                           
  7772 ;; *************** function _SigfoxReceive *****************
  7773 ;; Defined at:
  7774 ;;		line 61 in file "mcc_generated_files/eusart2.c"
  7775 ;; Parameters:    Size  Location     Type
  7776 ;;		None
  7777 ;; Auto vars:     Size  Location     Type
  7778 ;;		None
  7779 ;; Return value:  Size  Location     Type
  7780 ;;                  1    wreg      void 
  7781 ;; Registers used:
  7782 ;;		None
  7783 ;; Tracked objects:
  7784 ;;		On entry : 3F/0
  7785 ;;		On exit  : 3F/0
  7786 ;;		Unchanged: 0/0
  7787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7788 ;;      Params:         0       0       0       0       0       0       0
  7789 ;;      Locals:         0       0       0       0       0       0       0
  7790 ;;      Temps:          0       0       0       0       0       0       0
  7791 ;;      Totals:         0       0       0       0       0       0       0
  7792 ;;Total ram usage:        0 bytes
  7793 ;; Hardware stack levels used:    1
  7794 ;; This function calls:
  7795 ;;		Nothing
  7796 ;; This function is called by:
  7797 ;;		_EUSART2_Transmit_ISR
  7798 ;; This function uses a non-reentrant model
  7799 ;;
  7800                           
  7801                           	psect	text50
  7802  0014C0                     __ptext50:
  7803                           	opt stack 0
  7804  0014C0                     _SigfoxReceive:
  7805                           	opt stack 22
  7806                           
  7807                           ;eusart2.c: 63: RCSTA2bits.CREN = 0;
  7808                           
  7809                           ; BSR set to: 0
  7810                           ;incstack = 0
  7811  0014C0  9871               	bcf	3953,4,c	;volatile
  7812                           
  7813                           ;eusart2.c: 65: SigfoxRXBufferPtr = 0;
  7814  0014C2  0100               	movlb	0	; () banked
  7815  0014C4  6B88               	clrf	_SigfoxRXBufferPtr& (0+255),b
  7816                           
  7817                           ;eusart2.c: 66: SigfoxRXBuffer[0] = 0;
  7818  0014C6  0101               	movlb	1	; () banked
  7819  0014C8  6B19               	clrf	_SigfoxRXBuffer& (0+255),b
  7820                           
  7821                           ;eusart2.c: 67: SigfoxMsgReceivedFlag = 0;
  7822  0014CA  0100               	movlb	0	; () banked
  7823  0014CC  6B90               	clrf	_SigfoxMsgReceivedFlag& (0+255),b
  7824                           
  7825                           ;eusart2.c: 69: RCSTA2bits.CREN = 1;
  7826  0014CE  8871               	bsf	3953,4,c	;volatile
  7827                           
  7828                           ;eusart2.c: 70: PIE3bits.RC2IE = 1;
  7829  0014D0  8AA3               	bsf	4003,5,c	;volatile
  7830                           
  7831                           ; BSR set to: 0
  7832  0014D2  0012               	return		;funcret
  7833  0014D4                     __end_of_SigfoxReceive:
  7834                           	opt stack 0
  7835                           tosu	equ	0xFFF
  7836                           tosh	equ	0xFFE
  7837                           tosl	equ	0xFFD
  7838                           pclatu	equ	0xFFB
  7839                           pclath	equ	0xFFA
  7840                           tblptru	equ	0xFF8
  7841                           tblptrh	equ	0xFF7
  7842                           tblptrl	equ	0xFF6
  7843                           tablat	equ	0xFF5
  7844                           prodh	equ	0xFF4
  7845                           prodl	equ	0xFF3
  7846                           intcon	equ	0xFF2
  7847                           intcon2	equ	0xFF1
  7848                           postinc0	equ	0xFEE
  7849                           wreg	equ	0xFE8
  7850                           indf1	equ	0xFE7
  7851                           postdec1	equ	0xFE5
  7852                           fsr1h	equ	0xFE2
  7853                           fsr1l	equ	0xFE1
  7854                           indf2	equ	0xFDF
  7855                           postinc2	equ	0xFDE
  7856                           plusw2	equ	0xFDB
  7857                           fsr2h	equ	0xFDA
  7858                           fsr2l	equ	0xFD9
  7859                           status	equ	0xFD8
  7860                           
  7861 ;; *************** function _EUSART2_Receive_ISR *****************
  7862 ;; Defined at:
  7863 ;;		line 120 in file "mcc_generated_files/eusart2.c"
  7864 ;; Parameters:    Size  Location     Type
  7865 ;;		None
  7866 ;; Auto vars:     Size  Location     Type
  7867 ;;  auxVar          1    0[BANK0 ] unsigned char 
  7868 ;; Return value:  Size  Location     Type
  7869 ;;                  1    wreg      void 
  7870 ;; Registers used:
  7871 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7872 ;; Tracked objects:
  7873 ;;		On entry : 0/0
  7874 ;;		On exit  : 3F/0
  7875 ;;		Unchanged: 0/0
  7876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7877 ;;      Params:         0       0       0       0       0       0       0
  7878 ;;      Locals:         0       1       0       0       0       0       0
  7879 ;;      Temps:          0       0       0       0       0       0       0
  7880 ;;      Totals:         0       1       0       0       0       0       0
  7881 ;;Total ram usage:        1 bytes
  7882 ;; Hardware stack levels used:    1
  7883 ;; This function calls:
  7884 ;;		Nothing
  7885 ;; This function is called by:
  7886 ;;		_INTERRUPT_InterruptManager
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           	psect	text51
  7891  0010A0                     __ptext51:
  7892                           	opt stack 0
  7893  0010A0                     _EUSART2_Receive_ISR:
  7894                           	opt stack 23
  7895                           
  7896                           ;eusart2.c: 121: uint8_t auxVar;
  7897                           ;eusart2.c: 123: auxVar = RCREG2;
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;incstack = 0
  7901  0010A0  CF74 F0C4          	movff	3956,EUSART2_Receive_ISR@auxVar	;volatile
  7902                           
  7903                           ;eusart2.c: 124: PIR3bits.RC2IF = 0;
  7904  0010A4  9AA4               	bcf	4004,5,c	;volatile
  7905                           
  7906                           ;eusart2.c: 125: if(1 == RCSTA2bits.OERR)
  7907  0010A6  A271               	btfss	3953,1,c	;volatile
  7908  0010A8  D005               	goto	i2l3235
  7909                           
  7910                           ;eusart2.c: 126: {
  7911                           ;eusart2.c: 127: RCSTA2bits.CREN = 0;
  7912  0010AA  9871               	bcf	3953,4,c	;volatile
  7913                           
  7914                           ;eusart2.c: 128: RCSTA2bits.CREN = 1;
  7915  0010AC  8871               	bsf	3953,4,c	;volatile
  7916                           
  7917                           ;eusart2.c: 129: SigfoxRXBufferPtr = 0;
  7918  0010AE  0100               	movlb	0	; () banked
  7919  0010B0  6B88               	clrf	_SigfoxRXBufferPtr& (0+255),b
  7920                           
  7921                           ;eusart2.c: 130: auxVar = 0;
  7922  0010B2  6BC4               	clrf	EUSART2_Receive_ISR@auxVar& (0+255),b
  7923  0010B4                     i2l3235:
  7924                           
  7925                           ;eusart2.c: 131: }
  7926                           ;eusart2.c: 132: if(SigfoxRXBufferPtr >= (22-1))
  7927  0010B4  0E14               	movlw	20
  7928  0010B6  0100               	movlb	0	; () banked
  7929  0010B8  6588               	cpfsgt	_SigfoxRXBufferPtr& (0+255),b
  7930  0010BA  D001               	goto	i2l3239
  7931                           
  7932                           ; BSR set to: 0
  7933                           ;eusart2.c: 133: {
  7934                           ;eusart2.c: 134: SigfoxRXBufferPtr = 0;
  7935  0010BC  6B88               	clrf	_SigfoxRXBufferPtr& (0+255),b
  7936  0010BE                     i2l3239:
  7937                           
  7938                           ; BSR set to: 0
  7939                           ;eusart2.c: 135: }
  7940                           ;eusart2.c: 137: if((auxVar == 0x0d)&&(SigfoxRXBufferPtr > 0)){
  7941  0010BE  0E0D               	movlw	13
  7942  0010C0  19C4               	xorwf	EUSART2_Receive_ISR@auxVar& (0+255),w,b
  7943  0010C2  E105               	bnz	i2l3247
  7944                           
  7945                           ; BSR set to: 0
  7946  0010C4  5188               	movf	_SigfoxRXBufferPtr& (0+255),w,b
  7947  0010C6  E003               	bz	i2l3247
  7948                           
  7949                           ; BSR set to: 0
  7950                           ;eusart2.c: 138: SigfoxMsgReceivedFlag = 1;
  7951  0010C8  0E01               	movlw	1
  7952  0010CA  6F90               	movwf	_SigfoxMsgReceivedFlag& (0+255),b
  7953                           
  7954                           ; BSR set to: 0
  7955                           ;eusart2.c: 139: PIE3bits.RC2IE = 0;
  7956  0010CC  9AA3               	bcf	4003,5,c	;volatile
  7957  0010CE                     i2l3247:
  7958                           
  7959                           ; BSR set to: 0
  7960                           ;eusart2.c: 140: }
  7961                           ;eusart2.c: 141: SigfoxRXBuffer[SigfoxRXBufferPtr++] = auxVar;
  7962  0010CE  D806               	call	PL18	;call to abstracted procedure
  7963  0010D0  C0C4  FFDF         	movff	EUSART2_Receive_ISR@auxVar,indf2
  7964                           
  7965                           ; BSR set to: 0
  7966  0010D4  2B88               	incf	_SigfoxRXBufferPtr& (0+255),f,b
  7967                           
  7968                           ; BSR set to: 0
  7969                           ;eusart2.c: 142: SigfoxRXBuffer[SigfoxRXBufferPtr] = 0;
  7970  0010D6  D802               	call	PL18	;call to abstracted procedure
  7971  0010D8  6ADF               	clrf	indf2,c
  7972                           
  7973                           ; BSR set to: 0
  7974  0010DA  0C00               	retlw	0	;funcret
  7975  0010DC                     __end_of_EUSART2_Receive_ISR:
  7976                           	opt stack 0
  7977  0010DC                     PL18:
  7978                           	opt stack 23
  7979  0010DC  0E19               	movlw	low _SigfoxRXBuffer
  7980  0010DE  2588               	addwf	_SigfoxRXBufferPtr& (0+255),w,b
  7981  0010E0  6ED9               	movwf	fsr2l,c
  7982  0010E2  6ADA               	clrf	fsr2h,c
  7983  0010E4  0E01               	movlw	high _SigfoxRXBuffer
  7984  0010E6  22DA               	addwfc	fsr2h,f,c
  7985  0010E8  0012               	return	
  7986  0010EA                     __end_ofPL18:
  7987                           	opt stack 0
  7988                           tosu	equ	0xFFF
  7989                           tosh	equ	0xFFE
  7990                           tosl	equ	0xFFD
  7991                           pclatu	equ	0xFFB
  7992                           pclath	equ	0xFFA
  7993                           tblptru	equ	0xFF8
  7994                           tblptrh	equ	0xFF7
  7995                           tblptrl	equ	0xFF6
  7996                           tablat	equ	0xFF5
  7997                           prodh	equ	0xFF4
  7998                           prodl	equ	0xFF3
  7999                           intcon	equ	0xFF2
  8000                           intcon2	equ	0xFF1
  8001                           postinc0	equ	0xFEE
  8002                           wreg	equ	0xFE8
  8003                           indf1	equ	0xFE7
  8004                           postdec1	equ	0xFE5
  8005                           fsr1h	equ	0xFE2
  8006                           fsr1l	equ	0xFE1
  8007                           indf2	equ	0xFDF
  8008                           postinc2	equ	0xFDE
  8009                           plusw2	equ	0xFDB
  8010                           fsr2h	equ	0xFDA
  8011                           fsr2l	equ	0xFD9
  8012                           status	equ	0xFD8
  8013                           
  8014 ;; *************** function _EUSART2_GPRS_Transmit_ISR *****************
  8015 ;; Defined at:
  8016 ;;		line 48 in file "gprs.c"
  8017 ;; Parameters:    Size  Location     Type
  8018 ;;		None
  8019 ;; Auto vars:     Size  Location     Type
  8020 ;;		None
  8021 ;; Return value:  Size  Location     Type
  8022 ;;                  1    wreg      void 
  8023 ;; Registers used:
  8024 ;;		None
  8025 ;; Tracked objects:
  8026 ;;		On entry : 3F/0
  8027 ;;		On exit  : 0/0
  8028 ;;		Unchanged: 0/0
  8029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8030 ;;      Params:         0       0       0       0       0       0       0
  8031 ;;      Locals:         0       0       0       0       0       0       0
  8032 ;;      Temps:          0       0       0       0       0       0       0
  8033 ;;      Totals:         0       0       0       0       0       0       0
  8034 ;;Total ram usage:        0 bytes
  8035 ;; Hardware stack levels used:    1
  8036 ;; This function calls:
  8037 ;;		Nothing
  8038 ;; This function is called by:
  8039 ;;		_INTERRUPT_InterruptManager
  8040 ;; This function uses a non-reentrant model
  8041 ;;
  8042                           
  8043                           	psect	text52
  8044  00155E                     __ptext52:
  8045                           	opt stack 0
  8046  00155E                     _EUSART2_GPRS_Transmit_ISR:
  8047                           	opt stack 23
  8048                           
  8049                           ; BSR set to: 0
  8050                           ;incstack = 0
  8051  00155E  0012               	return		;funcret
  8052  001560                     __end_of_EUSART2_GPRS_Transmit_ISR:
  8053                           	opt stack 0
  8054                           tosu	equ	0xFFF
  8055                           tosh	equ	0xFFE
  8056                           tosl	equ	0xFFD
  8057                           pclatu	equ	0xFFB
  8058                           pclath	equ	0xFFA
  8059                           tblptru	equ	0xFF8
  8060                           tblptrh	equ	0xFF7
  8061                           tblptrl	equ	0xFF6
  8062                           tablat	equ	0xFF5
  8063                           prodh	equ	0xFF4
  8064                           prodl	equ	0xFF3
  8065                           intcon	equ	0xFF2
  8066                           intcon2	equ	0xFF1
  8067                           postinc0	equ	0xFEE
  8068                           wreg	equ	0xFE8
  8069                           indf1	equ	0xFE7
  8070                           postdec1	equ	0xFE5
  8071                           fsr1h	equ	0xFE2
  8072                           fsr1l	equ	0xFE1
  8073                           indf2	equ	0xFDF
  8074                           postinc2	equ	0xFDE
  8075                           plusw2	equ	0xFDB
  8076                           fsr2h	equ	0xFDA
  8077                           fsr2l	equ	0xFD9
  8078                           status	equ	0xFD8
  8079                           tosu	equ	0xFFF
  8080                           tosh	equ	0xFFE
  8081                           tosl	equ	0xFFD
  8082                           pclatu	equ	0xFFB
  8083                           pclath	equ	0xFFA
  8084                           tblptru	equ	0xFF8
  8085                           tblptrh	equ	0xFF7
  8086                           tblptrl	equ	0xFF6
  8087                           tablat	equ	0xFF5
  8088                           prodh	equ	0xFF4
  8089                           prodl	equ	0xFF3
  8090                           intcon	equ	0xFF2
  8091                           intcon2	equ	0xFF1
  8092                           postinc0	equ	0xFEE
  8093                           wreg	equ	0xFE8
  8094                           indf1	equ	0xFE7
  8095                           postdec1	equ	0xFE5
  8096                           fsr1h	equ	0xFE2
  8097                           fsr1l	equ	0xFE1
  8098                           indf2	equ	0xFDF
  8099                           postinc2	equ	0xFDE
  8100                           plusw2	equ	0xFDB
  8101                           fsr2h	equ	0xFDA
  8102                           fsr2l	equ	0xFD9
  8103                           status	equ	0xFD8
  8104                           
  8105                           	psect	text53
  8106  000000                     __ptext53:
  8107                           	opt stack 0
  8108                           tosu	equ	0xFFF
  8109                           tosh	equ	0xFFE
  8110                           tosl	equ	0xFFD
  8111                           pclatu	equ	0xFFB
  8112                           pclath	equ	0xFFA
  8113                           tblptru	equ	0xFF8
  8114                           tblptrh	equ	0xFF7
  8115                           tblptrl	equ	0xFF6
  8116                           tablat	equ	0xFF5
  8117                           prodh	equ	0xFF4
  8118                           prodl	equ	0xFF3
  8119                           intcon	equ	0xFF2
  8120                           intcon2	equ	0xFF1
  8121                           postinc0	equ	0xFEE
  8122                           wreg	equ	0xFE8
  8123                           indf1	equ	0xFE7
  8124                           postdec1	equ	0xFE5
  8125                           fsr1h	equ	0xFE2
  8126                           fsr1l	equ	0xFE1
  8127                           indf2	equ	0xFDF
  8128                           postinc2	equ	0xFDE
  8129                           plusw2	equ	0xFDB
  8130                           fsr2h	equ	0xFDA
  8131                           fsr2l	equ	0xFD9
  8132                           status	equ	0xFD8
  8133                           
  8134                           	psect	param0
  8135  0000                     tosu	equ	0xFFF
  8136                           tosh	equ	0xFFE
  8137                           tosl	equ	0xFFD
  8138                           pclatu	equ	0xFFB
  8139                           pclath	equ	0xFFA
  8140                           tblptru	equ	0xFF8
  8141                           tblptrh	equ	0xFF7
  8142                           tblptrl	equ	0xFF6
  8143                           tablat	equ	0xFF5
  8144                           prodh	equ	0xFF4
  8145                           prodl	equ	0xFF3
  8146                           intcon	equ	0xFF2
  8147                           intcon2	equ	0xFF1
  8148                           postinc0	equ	0xFEE
  8149                           wreg	equ	0xFE8
  8150                           indf1	equ	0xFE7
  8151                           postdec1	equ	0xFE5
  8152                           fsr1h	equ	0xFE2
  8153                           fsr1l	equ	0xFE1
  8154                           indf2	equ	0xFDF
  8155                           postinc2	equ	0xFDE
  8156                           plusw2	equ	0xFDB
  8157                           fsr2h	equ	0xFDA
  8158                           fsr2l	equ	0xFD9
  8159                           status	equ	0xFD8
  8160                           
  8161                           	psect	temp
  8162  000001                     btemp:
  8163                           	opt stack 0
  8164  000001                     	ds	1
  8165  0000                     int$flags	set	btemp
  8166                           tosu	equ	0xFFF
  8167                           tosh	equ	0xFFE
  8168                           tosl	equ	0xFFD
  8169                           pclatu	equ	0xFFB
  8170                           pclath	equ	0xFFA
  8171                           tblptru	equ	0xFF8
  8172                           tblptrh	equ	0xFF7
  8173                           tblptrl	equ	0xFF6
  8174                           tablat	equ	0xFF5
  8175                           prodh	equ	0xFF4
  8176                           prodl	equ	0xFF3
  8177                           intcon	equ	0xFF2
  8178                           intcon2	equ	0xFF1
  8179                           postinc0	equ	0xFEE
  8180                           wreg	equ	0xFE8
  8181                           indf1	equ	0xFE7
  8182                           postdec1	equ	0xFE5
  8183                           fsr1h	equ	0xFE2
  8184                           fsr1l	equ	0xFE1
  8185                           indf2	equ	0xFDF
  8186                           postinc2	equ	0xFDE
  8187                           plusw2	equ	0xFDB
  8188                           fsr2h	equ	0xFDA
  8189                           fsr2l	equ	0xFD9
  8190                           status	equ	0xFD8
  8191                           tosu	equ	0xFFF
  8192                           tosh	equ	0xFFE
  8193                           tosl	equ	0xFFD
  8194                           pclatu	equ	0xFFB
  8195                           pclath	equ	0xFFA
  8196                           tblptru	equ	0xFF8
  8197                           tblptrh	equ	0xFF7
  8198                           tblptrl	equ	0xFF6
  8199                           tablat	equ	0xFF5
  8200                           prodh	equ	0xFF4
  8201                           prodl	equ	0xFF3
  8202                           intcon	equ	0xFF2
  8203                           intcon2	equ	0xFF1
  8204                           postinc0	equ	0xFEE
  8205                           wreg	equ	0xFE8
  8206                           indf1	equ	0xFE7
  8207                           postdec1	equ	0xFE5
  8208                           fsr1h	equ	0xFE2
  8209                           fsr1l	equ	0xFE1
  8210                           indf2	equ	0xFDF
  8211                           postinc2	equ	0xFDE
  8212                           plusw2	equ	0xFDB
  8213                           fsr2h	equ	0xFDA
  8214                           fsr2l	equ	0xFD9
  8215                           status	equ	0xFD8
  8216                           tosu	equ	0xFFF
  8217                           tosh	equ	0xFFE
  8218                           tosl	equ	0xFFD
  8219                           pclatu	equ	0xFFB
  8220                           pclath	equ	0xFFA
  8221                           tblptru	equ	0xFF8
  8222                           tblptrh	equ	0xFF7
  8223                           tblptrl	equ	0xFF6
  8224                           tablat	equ	0xFF5
  8225                           prodh	equ	0xFF4
  8226                           prodl	equ	0xFF3
  8227                           intcon	equ	0xFF2
  8228                           intcon2	equ	0xFF1
  8229                           postinc0	equ	0xFEE
  8230                           wreg	equ	0xFE8
  8231                           indf1	equ	0xFE7
  8232                           postdec1	equ	0xFE5
  8233                           fsr1h	equ	0xFE2
  8234                           fsr1l	equ	0xFE1
  8235                           indf2	equ	0xFDF
  8236                           postinc2	equ	0xFDE
  8237                           plusw2	equ	0xFDB
  8238                           fsr2h	equ	0xFDA
  8239                           fsr2l	equ	0xFD9
  8240                           status	equ	0xFD8
  8241                           tosu	equ	0xFFF
  8242                           tosh	equ	0xFFE
  8243                           tosl	equ	0xFFD
  8244                           pclatu	equ	0xFFB
  8245                           pclath	equ	0xFFA
  8246                           tblptru	equ	0xFF8
  8247                           tblptrh	equ	0xFF7
  8248                           tblptrl	equ	0xFF6
  8249                           tablat	equ	0xFF5
  8250                           prodh	equ	0xFF4
  8251                           prodl	equ	0xFF3
  8252                           intcon	equ	0xFF2
  8253                           intcon2	equ	0xFF1
  8254                           postinc0	equ	0xFEE
  8255                           wreg	equ	0xFE8
  8256                           indf1	equ	0xFE7
  8257                           postdec1	equ	0xFE5
  8258                           fsr1h	equ	0xFE2
  8259                           fsr1l	equ	0xFE1
  8260                           indf2	equ	0xFDF
  8261                           postinc2	equ	0xFDE
  8262                           plusw2	equ	0xFDB
  8263                           fsr2h	equ	0xFDA
  8264                           fsr2l	equ	0xFD9
  8265                           status	equ	0xFD8


Data Sizes:
    Strings     3
    Constant    82
    Data        4
    BSS         147
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94      0       0
    BANK0           160     39     148
    BANK1           256      0      47
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    gpsParsePtr	PTR  FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 22
		 -> NULL(NULL[0]), SigfoxRXBuffer(BANK1[22]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 22
		 -> NULL(NULL[0]), SigfoxRXBuffer(BANK1[22]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 22
		 -> NULL(NULL[0]), SigfoxRXBuffer(BANK1[22]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_1(CODE[3]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 22
		 -> NULL(NULL[0]), SigfoxRXBuffer(BANK1[22]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 60
		 -> SigfoxCommandsDefinitions(CODE[60]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 35
		 -> SigfoxTXBuffer(BANK0[35]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 35
		 -> SigfoxTXBuffer(BANK0[35]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 25
		 -> SigfoxPayloadBuffer(BANK1[25]), SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR(BANK0[4]), SigfoxCommandSelector@SFX_COMMAND_TAIL_STR(BANK0[2]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 35
		 -> SigfoxTXBuffer(BANK0[35]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 35
		 -> SigfoxTXBuffer(BANK0[35]), 

    ProtocolTaskExecute@taskPointer	PTR FTN()enum E6681 size(2) Largest target is 1
		 -> powerTask(), SigfoxTask(), 

    ProtocolTaskBuildFrame@protFrameDescPtr	PTR const unsigned char  size(2) Largest target is 8
		 -> SIT_FRAME_POWERUP_SF_DESC(CODE[5]), SIT_FRAME_TRACKER_SF_ID_DESC(CODE[8]), 

    SigfoxTaskLoadPayloadBuffer@rawData	PTR unsigned char  size(2) Largest target is 12
		 -> protDataShifter(BANK0[12]), 

    SigfoxTask@SigfoxInitCommandPtr	PTR const unsigned char  size(2) Largest target is 3
		 -> SigfoxTask@sigfoxInitCommandsROMList(BANK0[3]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 35
		 -> SigfoxTXBuffer(BANK0[35]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 35
		 -> SigfoxTXBuffer(BANK0[35]), 

    SigfoxCommandSelector@SigfoxRomCommandStrPtr	PTR const unsigned char  size(2) Largest target is 60
		 -> SigfoxCommandsDefinitions(CODE[60]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 22
		 -> NULL(NULL[0]), SigfoxRXBuffer(BANK1[22]), 

    SigfoxResponseParser@dumyPtr	PTR unsigned char  size(2) Largest target is 22
		 -> NULL(NULL[0]), SigfoxRXBuffer(BANK1[22]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> systemMainTimer(), 

    TMR0_InterruptHandler	PTR  FTN()void  size(2) Largest target is 1
		 -> systemMainTimer(), Absolute function(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    _SYSTEM_Initialize->_TMR0_Initialize
    _ProtocolTask->_ProtocolTaskBuildFrame
    _ProtocolTaskExecute->_SigfoxTask
    _SigfoxTask->_SigfoxResponseParser
    _SigfoxResponseParser->_strstr
    _strstr->_strncmp
    _strncmp->_strlen
    _SigfoxCommManager->_SigfoxCommandSelector
    _SigfoxCommandSelector->_strcat
    _SigfoxCommandSelector->_strcpy
    _ProtocolTaskBuildFrame->_ProtocolAddFrameData
    _ProtocolGetValidity->_gpsTaskGetVarValidity
    _ProtocolGetValidity->_powerTaskGetVarValidity
    _ProtocolSetNextMeasTime->___almod
    _ProtocolSetNextCommTime->___almod

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_EUSART2_Receive_ISR
    _TMR0_ISR->_systemMainTimer

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    6499
                                             38 BANK0      1     1      0
                       _ProtocolTask
              _ProtocolTaskPowerDown
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                       _setLedStatus
 ---------------------------------------------------------------------------------
 (1) _setLedStatus                                         1     1      0      45
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2      86
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                              5 BANK0      2     2      0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ProtocolTask                                         0     0      0    6345
            _ProtocolSetNextCommTime
            _ProtocolSetNextMeasTime
             _ProtocolTaskBuildFrame
                _ProtocolTaskExecute
              _ProtocolTaskPowerDown
                  _SigfoxTaskNewTask
                   _powerTaskNewTask
 ---------------------------------------------------------------------------------
 (2) _powerTaskNewTask                                     1     1      0      15
                                              5 BANK0      1     1      0
                 _powerTaskPowerDown
 ---------------------------------------------------------------------------------
 (2) _SigfoxTaskNewTask                                    1     1      0      15
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ProtocolTaskPowerDown                                0     0      0       0
                _SigfoxTaskPowerDown
                 _powerTaskPowerDown
 ---------------------------------------------------------------------------------
 (2) _ProtocolTaskExecute                                  7     3      4    2745
                                             28 BANK0      7     3      4
                         _SigfoxTask *
                          _powerTask *
 ---------------------------------------------------------------------------------
 (3) _powerTask                                            0     0      0       0
                 _powerTaskPowerDown
                     _powerTaskReset
 ---------------------------------------------------------------------------------
 (4) _powerTaskReset                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _powerTaskPowerDown                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _SigfoxTask                                           6     6      0    2249
                                             22 BANK0      6     6      0
                  _SigfoxCommManager
               _SigfoxResponseParser
                _SigfoxTaskPowerDown
                    _SigfoxTaskReset
 ---------------------------------------------------------------------------------
 (4) _SigfoxTaskReset                                      0     0      0       0
                 _EUSART2_Initialize
 ---------------------------------------------------------------------------------
 (5) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SigfoxTaskPowerDown                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SigfoxResponseParser                                 2     2      0    1002
                                             20 BANK0      2     2      0
                             _strstr
 ---------------------------------------------------------------------------------
 (5) _strstr                                               4     0      4    1001
                                             16 BANK0      4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (6) _strncmp                                              7     1      6     326
                                              9 BANK0      7     1      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     154
                                              5 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (6) _strchr                                               5     1      4     216
                                              5 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (4) _SigfoxCommManager                                    1     1      0    1176
                                             20 BANK0      1     1      0
              _SigfoxCommandSelector
                      _SigfoxTXReady
                     _SigfoxTransmit
      _SigfoxVerifyTransactionStatus
 ---------------------------------------------------------------------------------
 (5) _SigfoxVerifyTransactionStatus                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SigfoxTransmit                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SigfoxTXReady                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SigfoxCommandSelector                                9     9      0    1154
                                             11 BANK0      9     9      0
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               6     2      4     475
                                              5 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) _strcat                                               6     2      4     498
                                              5 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ProtocolTaskBuildFrame                              12    12      0    1954
                                             26 BANK0     12    12      0
               _ProtocolAddFrameData
                _ProtocolGetValidity
        _SigfoxTaskLoadPayloadBuffer
 ---------------------------------------------------------------------------------
 (3) _SigfoxTaskLoadPayloadBuffer                         10     8      2     424
                                              5 BANK0     10     8      2
 ---------------------------------------------------------------------------------
 (3) _ProtocolGetValidity                                  2     2      0     120
                                              6 BANK0      2     2      0
              _gpsTaskGetVarValidity
            _powerTaskGetVarValidity
 ---------------------------------------------------------------------------------
 (4) _powerTaskGetVarValidity                              1     1      0      15
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _gpsTaskGetVarValidity                                1     1      0      15
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ProtocolAddFrameData                                21    16      5    1122
                                              5 BANK0     21    16      5
 ---------------------------------------------------------------------------------
 (2) _ProtocolSetNextMeasTime                              0     0      0     808
                            ___almod
 ---------------------------------------------------------------------------------
 (2) _ProtocolSetNextCommTime                              0     0      0     808
                            ___almod
 ---------------------------------------------------------------------------------
 (3) ___almod                                             10     2      8     808
                                              5 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           4     4      0      76
                                              1 BANK0      4     4      0
          _EUSART2_GPRS_Transmit_ISR
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0      30
                   Absolute function *
                    _systemMainTimer *
 ---------------------------------------------------------------------------------
 (9) _systemMainTimer                                      1     1      0      30
                                              0 BANK0      1     1      0
                   _ProtocolTaskTick
 ---------------------------------------------------------------------------------
 (10) _ProtocolTaskTick                                    0     0      0       0
                     _SigfoxTaskTick
                      _powerTaskTick
 ---------------------------------------------------------------------------------
 (11) _powerTaskTick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _SigfoxTaskTick                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART2_Transmit_ISR                                 0     0      0       0
                      _SigfoxReceive
 ---------------------------------------------------------------------------------
 (9) _SigfoxReceive                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART2_Receive_ISR                                  1     1      0      46
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART2_GPRS_Transmit_ISR                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ProtocolTask
     _ProtocolSetNextCommTime
       ___almod
     _ProtocolSetNextMeasTime
       ___almod
     _ProtocolTaskBuildFrame
       _ProtocolAddFrameData
       _ProtocolGetValidity
         _gpsTaskGetVarValidity
         _powerTaskGetVarValidity
       _SigfoxTaskLoadPayloadBuffer
     _ProtocolTaskExecute
       _SigfoxTask *
         _SigfoxCommManager
           _SigfoxCommandSelector
             _strcat
             _strcpy
           _SigfoxTXReady
           _SigfoxTransmit
           _SigfoxVerifyTransactionStatus
         _SigfoxResponseParser
           _strstr
             _strchr
             _strlen
             _strncmp
               _strlen (ARG)
         _SigfoxTaskPowerDown
         _SigfoxTaskReset
           _EUSART2_Initialize
       _powerTask *
         _powerTaskPowerDown
         _powerTaskReset
     _ProtocolTaskPowerDown
       _SigfoxTaskPowerDown
       _powerTaskPowerDown
     _SigfoxTaskNewTask
     _powerTaskNewTask
       _powerTaskPowerDown
   _ProtocolTaskPowerDown
     _SigfoxTaskPowerDown
     _powerTaskPowerDown
   _SYSTEM_Initialize
     _ADC_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _TMR0_SetInterruptHandler
   _setLedStatus

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART2_GPRS_Transmit_ISR
   _EUSART2_Receive_ISR
   _EUSART2_Transmit_ISR
     _SigfoxReceive
   _TMR0_ISR
     Absolute function(Fake) *
     _systemMainTimer *
       _ProtocolTaskTick
         _SigfoxTaskTick
         _powerTaskTick

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      2F       6       18.4%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     27      94       4       92.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      0       0       1        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C3       9        0.0%
DATA                 0      0      C3      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Jul 20 12:03:59 2017

                                           PL2 0E0E                                             PL4 0A32  
                                           PL6 0B16                                             PL8 1248  
                        ??_ProtocolTaskExecute 00E4                                 ?_powerTaskTick 00C4  
                              _timer0ReloadVal 00EB                                   __CFG_CP0$OFF 000000  
                                 __CFG_CP1$OFF 000000                             setLedStatus@status 00C9  
                                          PL10 0E2E                                            PL20 0A40  
                                          PL12 07CC                                            PL30 0F2A  
                                          PL22 13C8                                            PL14 0DB8  
                                          PL40 091E                                            PL32 0B28  
                                          PL24 07DC                                            PL16 0BEA  
                                          PL42 11AE                                            PL34 0F34  
                                          PL26 07E6                                            PL18 10DC  
                                          PL36 0BFA                                            PL28 0914  
                                          PL45 0FF0                                            PL38 11A8  
                                          PL47 0C8A                                            PL49 131E  
                                          l363 0DB2                                            l380 110A  
                                          l710 06F4                                            l711 070A  
                                          l298 1042                                            l378 10F6  
                                          l379 1100                                            l582 11E2  
                                          l683 0968                                            l827 0CC6  
                                          l596 0F9C                                            l678 0932  
                                          l854 1182                                            l858 1186  
                                 __CFG_CPB$OFF 000000                                   __CFG_CPD$OFF 000000  
                            ??_SigfoxTaskReset 00C9                                            prod 000FF3  
                                          tosl 000FFD                                            wreg 000FE8  
                              ?_powerTaskReset 00C4                           _ProtocolAddFrameData 0924  
                 ProtocolAddFrameData@longMask 00D8                          ?_SigfoxResponseParser 00C4  
                                 __CFG_LVP$OFF 000000             __end_ofSigfoxCommandSelector@F6862 060A  
                   SigfoxCommandSelector@F6862 0608             __end_ofSigfoxCommandSelector@F6864 0605  
                   SigfoxCommandSelector@F6864 0601                      __size_of_ProtocolTaskTick 0066  
                                         l2201 0D1E                                           l3003 096A  
                                         l2051 13AA                                           l2043 1398  
                                         l2131 0CAA                                           l3013 098C  
                                         l3015 0992                                           l3007 0972  
                                         l3023 099E                                           l2143 0CBE  
                                         l2119 0C9E                                           l3105 0E0C  
                                         l3033 0A10                                           l2161 0CDA  
                                         l3123 1246                                           l3115 1234  
                                         l3019 0996                                           l3131 066C  
                                         l2163 0CE0                                           l3061 0C42  
                                         l3053 0C22                                           l3141 0694  
                                         l2165 0CE6                                           l3205 126C  
                                         l3213 128C                                           l3151 06C2  
                                         l2271 10F0                                           l3073 0C78  
                                         l3065 0C64                                           l3057 0C32  
                                         l3049 0C0E                                           l3161 071A  
                                         l3129 0664                                           l2193 0D18  
                                         l2185 0D10                                           l2169 0CF0  
                                         l3313 0BA8                                           l2521 11C2  
                                         l3059 0C3E                                           l3171 0744  
                                         l3163 071E                                           l3155 06E4  
                                         l3139 0676                                           l1715 1368  
                                         l2179 0CFC                                           l2283 1114  
                                         l2451 117A                                           l3307 0BA2  
                                         l2523 11C6                                           l2531 11E8  
                                         l3069 0C72                                           l3093 0DEA  
                                         l3157 06EC                                           l2453 1180  
                                         l2461 1188                                           l3317 0BCE  
                                         l3325 0BD4                                           l2525 11CA  
                                         l3167 072E                                           l1719 136E  
                                         l2287 111A                                           l2455 1184  
                                         l3327 0BE8                                           l2519 11BE  
                                         l3177 0754                                           l1729 137A  
                                         l2713 0FD2                                           l2705 0FAA  
                                         l1497 0EBE                                           l3281 0B5A  
                                         l3257 0B34                                           l2529 11D0  
                                         l3099 0E02                                           l3179 0776  
                                         l2803 104A                                           l2723 130E  
                                         l2715 0FDA                                           l2811 0810  
                                         l3267 0B46                                           l3197 07BE  
                                         l2805 1054                                           l2717 12FA  
                                         l2709 0FC0                                           l2733 0E82  
                                         l3293 0B7A                                           l3365 0F5A  
                                         l1839 151E                                           l2671 11F8  
                                         l2751 0AB4                                           l2727 0E4A  
                                         l2735 0EAA                                           l2903 08B4  
                                         l2823 0818                                           l3383 0F88  
                                         l2681 1060                                           l2673 1202  
                                         l2761 0AEE                                           l2745 0AA4  
                                         l2833 082A                                           l3385 0F8E  
                                         l3377 0F78                                           l3369 0F68  
                                         l2683 1066                                           l1699 1510  
                                         l2923 08E2                                           l2907 08C0  
                                         l2851 085C                                           l2843 084C  
                                         l2685 1074                                           l2765 0B06  
                                         l2749 0AAC                                           l2941 08FA  
                                         l3389 0F9E                                           l2687 107E  
                                         l2759 0AD6                                           l2791 1038  
                                         l2783 102C                                           l2775 1012  
                                         l2695 12D4                                           l2927 08E8  
                                         l2855 0860                                           l2847 0854  
                                         l2953 0D3A                                           l2697 12DA  
                                         l2873 0884                                           l2971 0D8E  
                                         l2963 0D56                                           l2957 0D42  
                                         l2949 08FC                                           l2983 0934  
                                         l2887 089C                                           l2879 0890  
                                         l2993 0952                                           l2987 093C  
                                         l2899 08A8                                           l2997 0958  
                                         STR_1 0653                                           _LATA 000F89  
                                         _LATB 000F8A                                           _LATC 000F8B  
                                         u1750 09D0                                           u1920 07AE  
                                         u1755 09C6                                           u1938 1270  
                                         u1939 1282                                           i2l91 0042  
                                         i2l97 004E                                           i2l89 0026  
                              _sysVarMainInput 0093                                           _WPUB 000F61  
                        ??_EUSART2_Receive_ISR 00C4                                _sysVarGpsCourse 007A  
                                         _main 0F3E                                _TMR0_StartTimer 1556  
                                         fsr1h 000FE2                                           fsr2h 000FDA  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                                         btemp 0001                                  __CFG_BORV$190 000000  
                                         prodl 000FF3                                           start 0062  
                                __CFG_IESO$OFF 000000                _SigfoxTaskLoadPayloadBuffer$800 00CD  
              _SigfoxTaskLoadPayloadBuffer$801 00CF                   __end_of_EUSART2_Transmit_ISR 13C8  
                                 ___param_bank 000000                 __size_of_SigfoxCommandSelector 00C8  
                   __size_of_SigfoxCommManager 004E                  __end_of_SigfoxCommandSelector 0B16  
                       _SigfoxCommManagerState 0091                              _SigfoxTaskNewTask 10EA  
                      __end_of_TMR0_Initialize 1354                             ?_SigfoxTaskNewTask 00C4  
               __size_of_OSCILLATOR_Initialize 000E                       ??_ProtocolTaskBuildFrame 00DE  
                        __end_of_SigfoxTXReady 1512                  __end_of_OSCILLATOR_Initialize 1504  
                              __end_of___almod 0C8A                                          ?_main 00C4  
                                        _T0CON 000FD5                                _systemMainTimer 1296  
                               __CFG_DEBUG$OFF 000000                  _SigfoxScheduledMsgStaTaskFlag 008B  
                 __size_of_SigfoxTaskPowerDown 0016                                          i2l723 0F06  
                                        i2l724 0F14                                          _TMR0H 000FD7  
                                        _TMR0L 000FD6                          __end_of_SigfoxReceive 14D4  
                             _sysVarGpsDayTime 0068                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                        ?_ProtocolAddFrameData 00C9                            ??_SigfoxTaskNewTask 00C9  
            __size_of_TMR0_SetInterruptHandler 000A                                  __CFG_WRT0$OFF 000000  
                                __CFG_WRT1$OFF 000000                      ?_TMR0_SetInterruptHandler 00C9  
                               __CFG_EBTR0$OFF 000000                                 __CFG_FCMEN$OFF 000000  
                               __CFG_EBTR1$OFF 000000                                 _SigfoxRXBuffer 0119  
                             __end_of_TMR0_ISR 13FC                                  __CFG_WRTB$OFF 000000  
                                __CFG_WRTC$OFF 000000                                  __CFG_WRTD$OFF 000000  
                      ??_ProtocolTaskPowerDown 00C9                                 __CFG_EBTRB$OFF 000000  
                               _SigfoxTXBuffer 0095                       ?_ProtocolSetNextCommTime 00C4  
                           __CFG_MCLRE$EXTMCLR 000000                                          pclath 000FFA  
                     ?_ProtocolSetNextMeasTime 00C4                                          tablat 000FF5  
                     ProtocolAddFrameData@Data 00C9                              ?_powerTaskNewTask 00C4  
                                        plusw2 000FDB                                          status 000FD8  
                               __CFG_HFOFST$ON 000000                                __end_of_strncmp 0FF0  
                           ??_powerTaskNewTask 00C9                                 __CFG_PBADEN$ON 000000  
                    __end_of_SigfoxTaskNewTask 1132                                   _sysVarGpsLat 0070  
                  __end_of_ProtocolGetValidity 13AC                                __initialization 1132  
                               _SigfoxTaskTick 14E6           __end_of_SIT_FRAME_TRACKER_SF_ID_DESC 064E  
                 _SIT_FRAME_TRACKER_SF_ID_DESC 0646                                   __end_of_main 0FA8  
            powerTaskGetVarValidity@variableID 00C9                                ??_powerTaskTick 00C4  
                      ??_gpsTaskGetVarValidity 00C9                    ?_INTERRUPT_InterruptManager 00C4  
                               _SigfoxTransmit 153E                 SigfoxTask@SigfoxInitCommandPtr 00DE  
                                       ??_main 00EA                                  __activetblptr 000003  
                       ??_SigfoxResponseParser 00D8                        __end_of_TMR0_StartTimer 155A  
                   __end_of_EUSART2_Initialize 1480            __end_of_SigfoxTaskLoadPayloadBuffer 0DB8  
                  _SigfoxTaskLoadPayloadBuffer 0D36                                         _ANSELA 000F38  
                                       _ANSELB 000F39                                         _ANSELC 000F3A  
                                       i2l2031 0F22                                         i2l2301 12C0  
                                       i2l3225 13BC                                         i2l3235 10B4  
                                       i2l3229 13C4                                 __CFG_WDTEN$OFF 000000  
                                       i2l3247 10CE                                         i2l3239 10BE  
                                       i2l2297 12AA                                         i2l3347 003C  
                                       i2l1781 14EE                                         _RCREG2 000F74  
                                       _RCSTA2 000F71                                         _OSCCON 000FD3  
                                       _SPBRG2 000F75                                         _TXREG2 000F73  
                                       _TXSTA2 000F72                         __end_of_SigfoxTaskTick 14F6  
                                   _SigfoxTask 07F0                     __end_of_powerTaskPowerDown 1496  
                               __CFG_PWRTEN$ON 000000                                 __CFG_XINST$OFF 000000  
             __size_of_powerTaskGetVarValidity 000E                                      ??___almod 00D1  
                      __end_of_systemMainTimer 12CA                                 __CFG_STVREN$ON 000000  
                       __end_of_SigfoxTransmit 1546                    _SigfoxScheduledInitTaskFlag 008C  
                             ?_TMR0_Initialize 00C4                gpsTaskGetVarValidity@variableID 00C9  
                                       clear_0 1158                                         clear_1 1164  
                            _sysVarGpsOdometer 0078                __size_of_ProtocolTaskBuildFrame 0174  
                           _SigfoxTimeOutTimer 0087                                         _strcat 1056  
                                       _strchr 12FA                                         _strcpy 11EE  
                                       _strlen 12CA                                         _strstr 0E48  
                       ??_ProtocolAddFrameData 00CE                __end_of_ProtocolSetNextCommTime 1248  
                          _SigfoxPayloadBuffer 0100                                   __mediumconst 0000  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                __end_of_ProtocolSetNextMeasTime 0E0E  
                         _EUSART2_Transmit_ISR 13AC       TMR0_SetInterruptHandler@InterruptHandler 00C9  
                             _ProtocolTaskTick 0EC4                  _protVarSystemSynchronizedFlag 0083  
                                    ??_strncmp 00D3                  __size_of_INTERRUPT_Initialize 0004  
                            _SYSTEM_Initialize 14AC                                     __accesstop 0060  
                      __end_of__initialization 116A                                  _sysVarBattery 00F3  
                               _statusIndTimer 0085                             ?_SYSTEM_Initialize 00C4  
                                ___rparam_used 000000                     ProtocolAddFrameData@toLeft 00D7  
                              ?_SigfoxTaskTick 00C4              __end_of_SIT_FRAME_POWERUP_SF_DESC 0653  
                   __size_of_SigfoxTaskNewTask 0048                                  _sysVarGpsLong 006C  
                        ProtocolAddFrameData@i 00DC                       _SigfoxTransactionAttemps 008A  
                              _SigfoxTaskReset 1420                                   __pidataBANK0 1552  
                          ??_SYSTEM_Initialize 00CB                                      ?_TMR0_ISR 00C4  
                              ?_SigfoxTransmit 00C4                                     __end_ofPL2 0E2E  
                                   __end_ofPL4 0A40                                     __end_ofPL6 0B28  
                                   __end_ofPL8 1262                               ??_powerTaskReset 00C9  
                                ?_setLedStatus 00C4    SigfoxTaskLoadPayloadBuffer@payloadBufferPtr 00D1  
                        ?_EUSART2_Transmit_ISR 00C4                               ?_TMR0_StartTimer 00C4  
                    __end_of_SYSTEM_Initialize 14C0                                     __pbssBANK0 0060  
                                   __pbssBANK1 0100                                __CFG_PLLCFG$OFF 000000  
                       _ProtocolTaskBuildFrame 0658                            _SigfoxTaskPowerDown 1496  
                                  ?_SigfoxTask 00C4                             __CFG_CCP2MX$PORTC1 000000  
          SigfoxTask@sigfoxInitCommandsROMList 00DB                    __end_of_ProtocolTaskExecute 1296  
             __end_of_TMR0_SetInterruptHandler 1536                                     ??_TMR0_ISR 00C5  
                             ?_systemMainTimer 00C4                             __CFG_CCP3MX$PORTB5 000000  
                               _usartSemaphore 0092      SigfoxCommandSelector@SFX_COMMAND_TAIL_STR 00D3  
               ProtocolTaskBuildFrame@dataSize 00E7              SigfoxTaskLoadPayloadBuffer@buffer 00D2  
                     _pwrScheduledInitTaskFlag 0080                        __size_of_ADC_Initialize 0006  
                                      ?_strcat 00C9                                        ?_strchr 00C9  
                                      ?_strcpy 00C9                                        ?_strlen 00C9  
                                      ?_strstr 00D4                                 ??_setLedStatus 00C9  
                         ?_SigfoxTaskPowerDown 00C4                       SigfoxTaskNewTask@command 00C9  
                                      _OSCCON2 000FD2                             __size_of_powerTask 009A  
                  __end_of_EUSART2_Receive_ISR 10DC                                        i2u53_40 0EF6  
                                      _OSCTUNE 000F9B                                        _SPBRGH2 000F76  
                              __CFG_WDTPS$8192 000000              __end_of_SigfoxCommandsDefinitions 0646  
               ProtocolTaskTick@_500msToSecond 0081                 __size_of_ProtocolTaskPowerDown 000C  
                        _SigfoxMsgReceivedFlag 0090                  __end_of_ProtocolTaskPowerDown 152C  
                ProtocolGetValidity@variableID 00CA                        __end_of_SigfoxTaskReset 1444  
                      _powerTaskGetVarValidity 1512                                        __Hparam 0000  
                                      __Lparam 0000             SigfoxCommandSelector@SigfoxCommand 00D7  
             __size_of_ProtocolSetNextCommTime 0020                        powerTaskNewTask@command 00C9  
                                      ___almod 0C00               __size_of_ProtocolSetNextMeasTime 0046  
                                 __psmallconst 0600                          _SigfoxCommandSelector 0A4E  
                    __size_of_powerTaskNewTask 0034         ProtocolTaskBuildFrame@protFrameDescPtr 00E8  
                                      __pcinit 1132                                        __ramtop 0600  
               __size_of_gpsTaskGetVarValidity 0006                  __end_of_gpsTaskGetVarValidity 1552  
                                      __ptext0 0F3E                                        __ptext1 11B4  
                                      __ptext2 152C                                        __ptext3 14AC  
                                      __ptext4 1328                                        __ptext5 1556  
                                      __ptext6 13FC                                        __ptext7 14F6  
                                      __ptext8 155A                                        __ptext9 1546  
                        ??_SigfoxTaskPowerDown 00C9                                      _T0CONbits 000FD5  
                              __size_of_strcat 004A                                __size_of_strchr 0024  
                              __size_of_strcpy 003A                                __size_of_strlen 0030  
                               main@taskResult 00EA                                __size_of_strstr 007C  
                        _OSCILLATOR_Initialize 14F6                         ??_EUSART2_Transmit_ISR 00C4  
                     ??_PIN_MANAGER_Initialize 00C9                            __size_of_SigfoxTask 0124  
                   __size_of_SYSTEM_Initialize 0014                             _sysVarGpsValidFlag 0094  
                                      _strncmp 0FA8                           end_of_initialization 116A  
  SigfoxCommandSelector@SigfoxRomCommandStrPtr 00D5                         __size_of_SigfoxTXReady 000E  
               SigfoxCommManager@SigfoxCommand 00D8                             _EUSART2_Initialize 1464  
              ProtocolGetValidity@taskResponse 00CB                         __size_of_SigfoxReceive 0014  
                            __end_of_powerTask 0D36           __size_of_SigfoxTaskLoadPayloadBuffer 0082  
                                      postdec1 000FE5             __size_of_EUSART2_GPRS_Transmit_ISR 0002  
                                      postinc0 000FEE                                        postinc2 000FDE  
                     __end_of_ProtocolTaskTick 0F2A                     ?_EUSART2_GPRS_Transmit_ISR 00C4  
                          ?_EUSART2_Initialize 00C4                                        strlen@s 00C9  
                        __end_of_powerTaskTick 14E6                   __size_of_ProtocolGetValidity 002C  
                                ?_ProtocolTask 00C4                ??_SigfoxVerifyTransactionStatus 00C9  
                     _TMR0_SetInterruptHandler 152C                                      _PORTAbits 000F80  
                           _powerTaskPowerDown 1480                                      _SFX_STATE 00F2  
                                    _TRISBbits 000F93                ProtocolAddFrameData@DataRepSize 00CD  
                __size_of_SigfoxResponseParser 0020                            ?_powerTaskPowerDown 00C4  
                                    _PWR_STATE 00EF                           ??_EUSART2_Initialize 00C9  
                             ??_SigfoxTaskTick 00C4                      ??_powerTaskGetVarValidity 00C9  
                             ?_SigfoxTaskReset 00C4                           __end_of_setLedStatus 11EE  
                             ??_SigfoxTransmit 00C9                                 _sysVarGpsSpeed 007C  
                    _protVarCommunicationTimer 0060                 _SigfoxScheduledPwrDownTaskFlag 008D  
                         ??_powerTaskPowerDown 00C9                         ?_SigfoxCommandSelector 00C4  
                 __end_of_INTERRUPT_Initialize 155E                                _protDataShifter 00B8  
            __end_of_EUSART2_GPRS_Transmit_ISR 1560                                 ??_ProtocolTask 00EA  
              systemMainTimer@secondMultiplier 00C4                              __size_of_TMR0_ISR 0026  
                               _ADC_Initialize 1546                         ?_OSCILLATOR_Initialize 00C4  
                                _SigfoxTXReady 1504                      _SIT_FRAME_POWERUP_SF_DESC 064E  
                               __end_of_strcat 10A0                                 __end_of_strchr 131E  
                               __end_of_strcpy 1228                                 __end_of_strlen 12FA  
                               __end_of_strstr 0EC4                                    __end_ofPL10 0E48  
                                  __end_ofPL20 0A4E                                    __end_ofPL12 07DC  
                                  __end_ofPL30 0F34                                    __end_ofPL22 13D6  
                                  __end_ofPL14 0DC8                                    __end_ofPL40 0924  
                                  __end_ofPL32 0B32                                    __end_ofPL24 07E6  
                                  __end_ofPL16 0BFA                                    __end_ofPL42 11B4  
                                  __end_ofPL34 0F3E                                    __end_ofPL26 07F0  
                                  __end_ofPL18 10EA                                    __end_ofPL36 0C00  
                                  __end_ofPL28 091E                                    __end_ofPL45 1008  
                                  __end_ofPL38 11AE                                    __end_ofPL47 0C9C  
                                  __end_ofPL49 1328                            start_initialization 1132  
                                _SigfoxReceive 14C0                  __size_of_ProtocolAddFrameData 010E  
                     __size_of_TMR0_Initialize 002C                __size_of_PIN_MANAGER_Initialize 0024  
                                _SigfoxTxDelay 0086                        ?_ProtocolTaskBuildFrame 00C4  
                _pwrScheduledMeasPowerTaskFlag 007F                                SigfoxTask@F6887 0605  
                                 ??_SigfoxTask 00DA                        _ProtocolSetNextCommTime 1228  
                _pwrScheduledCommPowerTaskFlag 007E                        _ProtocolSetNextMeasTime 0DC8  
                       __end_of_ADC_Initialize 154C                                    __pdataBANK0 00F0  
                             _powerTaskNewTask 1174                     ProtocolTaskExecute@timeOut 00E4  
              __end_of_powerTaskGetVarValidity 1520                                 ?_SigfoxTXReady 00C4  
                                     ??_strcat 00CD                                       ??_strchr 00CD  
                                     ??_strcpy 00CD                                       ??_strlen 00CB  
                                     ??_strstr 00D8                                 ?_SigfoxReceive 00C4  
        __end_of_SigfoxVerifyTransactionStatus 1380         __size_of_SigfoxVerifyTransactionStatus 002C  
                _SigfoxVerifyTransactionStatus 1354                                  __pcstackBANK0 00C4  
               __end_of_ProtocolTaskBuildFrame 07CC                             __end_of_SigfoxTask 0914  
                      _SigfoxTransactionResult 00F1                      EUSART2_Receive_ISR@auxVar 00C4  
                        _TMR0_InterruptHandler 00ED                                      __pnvBANK0 00EB  
                     __size_of_TMR0_StartTimer 0004                         _PIN_MANAGER_Initialize 13FC  
                    _SigfoxCommandsDefinitions 060A                                      __pintcode 0008  
                                     ?___almod 00C9                                ?_ADC_Initialize 00C4  
                  SigfoxResponseParser@dumyPtr 00D8                   ??_INTERRUPT_InterruptManager 00C5  
                _SigfoxScheduledMsgAckTaskFlag 008E                               ___almod@dividend 00C9  
                             __CFG_PRICLKEN$ON 000000                   __size_of_ProtocolTaskExecute 0034  
                                  __smallconst 0600                                       _BAUDCON2 000F70  
              ProtocolTaskBuildFrame@dataField 00E1                       __size_of_systemMainTimer 0034  
                              _lastKnownResult 00F0                        __end_ofSigfoxTask@F6887 0608  
           SigfoxTaskLoadPayloadBuffer@rawData 00C9                        __size_of_powerTaskReset 0008  
                                     ?_strncmp 00CD                          __size_of_setLedStatus 003A  
                         _INTERRUPT_Initialize 155A                   ?_SigfoxTaskLoadPayloadBuffer 00C9  
                          _ProtocolGetValidity 1380                           __end_of_ProtocolTask 0BEA  
                            ??_TMR0_Initialize 00C9                   __size_of_EUSART2_Receive_ISR 003C  
SigfoxCommandSelector@SFX_COMMAND_TAIL_ACK_STR 00CF                          _ProtocolTaskPowerDown 1520  
                    ??_ProtocolSetNextCommTime 00D3                                       _LATAbits 000F89  
                                     _LATBbits 000F8A                                       _LATCbits 000F8B  
                                     _PIE3bits 000FA3                      ??_ProtocolSetNextMeasTime 00D3  
                                     _PMD0bits 000F3F                                       _PMD2bits 000F3D  
          __size_of_INTERRUPT_InterruptManager 005A                     ??_TMR0_SetInterruptHandler 00CB  
                                     _PIR3bits 000FA4                                       _RCONbits 000FD0  
                  __end_of_SigfoxTaskPowerDown 14AC                                       _TMR0_ISR 13D6  
                                    _sessionTO 0076                                ??_SigfoxTXReady 00C9  
                  ??_EUSART2_GPRS_Transmit_ISR 00C4                              ?_ProtocolTaskTick 00C4  
                                    _powerTask 0C9C                           ?_ProtocolGetValidity 00C4  
                           ??_ProtocolTaskTick 00C4                                ??_SigfoxReceive 00C4  
                        _gpsTaskGetVarValidity 154C                                   _setLedStatus 11B4  
                __size_of_EUSART2_Transmit_ISR 001C                                    _INTCON2bits 000FF1  
                                    copy_data0 1146                          ?_INTERRUPT_Initialize 00C4  
               ProtocolTaskExecute@taskTimeOut 00E2                 ProtocolTaskExecute@taskPointer 00E0  
               ?_SigfoxVerifyTransactionStatus 00C4                    ProtocolTaskBuildFrame@EVENT 00E0  
                ??_SigfoxTaskLoadPayloadBuffer 00CB                                       __Hparam0 0000  
                      ??_SigfoxCommandSelector 00CF                                       __Lparam0 0000  
              ProtocolTaskBuildFrame@totalBits 00E5                              _SigfoxRXBufferPtr 0088  
                 __end_of_SigfoxResponseParser 1464                             __CFG_BOREN$SBORDIS 000000  
                      _protVarMeasurementTimer 0064                              __CFG_P2BMX$PORTB5 000000  
                      ??_OSCILLATOR_Initialize 00C9                              ??_TMR0_StartTimer 00C9  
                             __size_of___almod 008A                          ??_ProtocolGetValidity 00CA  
                                   ?_powerTask 00C4                                     strcat@from 00CB  
                            _SigfoxTXBufferPtr 0089                      ProtocolAddFrameData@bytes 00DD  
                                     __ptext10 0B32                                       __ptext11 1174  
                                     __ptext20 1464                                       __ptext12 10EA  
                                     __ptext21 1496                                       __ptext13 1520  
                                     __ptext30 1504                                       __ptext22 1444  
                                     __ptext14 1262                                       __ptext31 0A4E  
                                     __ptext23 0E48                                       __ptext15 07F0  
                                     __ptext40 0DC8                                       __ptext32 11EE  
                                     __ptext24 0FA8                                       __ptext16 0C9C  
                                     __ptext41 1228                                       __ptext33 1056  
                                     __ptext25 12CA                                       __ptext17 1536  
                                     __ptext50 14C0                                       __ptext42 0C00  
                                     __ptext34 0658                                       __ptext26 12FA  
                                     __ptext18 1480                                       __ptext51 10A0  
                                     __ptext35 0D36                                       __ptext27 1008  
                                     __ptext19 1420                                       __ptext52 155E  
                                     __ptext44 13D6                                       __ptext36 1380  
                                     __ptext28 1354                                       __ptext53 0000  
                                     __ptext45 1296                                       __ptext37 1512  
                                     __ptext29 153E                                       __ptext46 0EC4  
                                     __ptext38 154C                                       __ptext47 14D4  
                                     __ptext39 0924                                       __ptext48 14E6  
                                     __ptext49 13AC                                       _ledTimer 0084  
                    _EUSART2_GPRS_Transmit_ISR 155E                                ___almod@divisor 00CD  
                            ??_systemMainTimer 00C4                                ___almod@counter 00D1  
                     __end_of_powerTaskNewTask 11A8                               __size_of_strncmp 0048  
                       ?_ProtocolTaskPowerDown 00C4                    __size_of_EUSART2_Initialize 001C  
                                   strcpy@from 00CB                         _powerTaskPwrReadyTimer 0074  
                                __size_of_main 006A                         __size_of_powerTaskTick 0012  
                                   strncmp@len 00D1                   __end_of_ProtocolAddFrameData 0A32  
                   _SigfoxScheduledMsgTaskFlag 008F                    __size_of_powerTaskPowerDown 0016  
                                     int$flags 0001                       __size_of_SigfoxTaskReset 0024  
                            _SigfoxCommManager 1008             __end_of_INTERRUPT_InterruptManager 0062  
                   _INTERRUPT_InterruptManager 0008                             ?_SigfoxCommManager 00C4  
                       ?_gpsTaskGetVarValidity 00C4                  ProtocolTaskExecute@taskResult 00E6  
                                   _INTCONbits 000FF2                            ??_SigfoxCommManager 00D8  
                        __size_of_ProtocolTask 00B8                         ??_INTERRUPT_Initialize 00C9  
                               _powerTaskReset 1536                       ?_powerTaskGetVarValidity 00C4  
                                     intlevel2 0000                                      strchr@chr 00CB  
                                    strchr@ptr 00C9                            _ProtocolTaskExecute 1262  
                      ?_PIN_MANAGER_Initialize 00C4                                     _RCSTA2bits 000F71  
                                    strncmp@s1 00CD                                      strncmp@s2 00CF  
                             ??_ADC_Initialize 00C9                      __end_of_SigfoxCommManager 1056  
                      __size_of_SigfoxTaskTick 0010                                    ??_powerTask 00C9  
                      __size_of_SigfoxTransmit 0008                           ?_ProtocolTaskExecute 00E0  
                          _EUSART2_Receive_ISR 10A0                                  _powerTaskTick 14D4  
                                 _ProtocolTask 0B32                                       strcat@cp 00CD  
                                     strcat@to 00C9                                _TMR0_Initialize 1328  
                                     strcpy@cp 00CD                                       strlen@cp 00CB  
                                     strcpy@to 00C9                         __end_of_powerTaskReset 153E  
                            __CFG_T3CMX$PORTC0 000000                                       strstr@s1 00D4  
                                     strstr@s2 00D6                           _SigfoxResponseParser 1444  
               __end_of_PIN_MANAGER_Initialize 1420                                     _PROT_STATE 0082  
                                 ___almod@sign 00D2                           ?_EUSART2_Receive_ISR 00C4  
                            __CFG_FOSC$INTIO67 000000  
